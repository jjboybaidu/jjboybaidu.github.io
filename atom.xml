<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿汶的博客</title>
  <subtitle>知我者谓我心忧 不知我者谓我何求</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="williamliuwen.cn/"/>
  <updated>2016-08-12T22:06:42.000Z</updated>
  <id>williamliuwen.cn/</id>
  
  <author>
    <name>阿汶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS-RunLoop</title>
    <link href="williamliuwen.cn/2016/07/23/AWblog/2016/7/iOS-RunLoop/"/>
    <id>williamliuwen.cn/2016/07/23/AWblog/2016/7/iOS-RunLoop/</id>
    <published>2016-07-23T00:35:55.000Z</published>
    <updated>2016-08-12T22:06:42.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h4 id=&quot;运行循环本质&quot;&gt;&lt;a href=&quot;#运行循环本质&quot; class=&quot;headerlink&quot; title=&quot;运行循环本质&quot;&gt;&lt;/a&gt;运行循环本质&lt;/h4&gt;&lt;p&gt;1.从字面上看，就是运行循环跑圈&lt;/p&gt;
&lt;p&gt;2.其实它内部就是do-while循环，在这个循环内部不断地处理各种任务（比如Source、Timer、Observer）&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;3.循环体的开始需要检测是否有需要处理的事件，如果有则去处&amp;gt; - 理，如果没有则进入睡眠以节省CPU时间&lt;/p&gt;
&lt;h4 id=&quot;FIXME-0-运行循环-概念性的东西有？&quot;&gt;&lt;a href=&quot;#FIXME-0-运行循环-概念性的东西有？&quot; class=&quot;headerlink&quot; title=&quot;FIXME:0.运行循环 概念性的东西有？&quot;&gt;&lt;/a&gt;FIXME:0.运行循环 概念性的东西有？&lt;/h4&gt;&lt;p&gt;概念1【输入源==事件源】&lt;br&gt;具体查看《RunLoop【输入源】》&lt;/p&gt;
&lt;p&gt;概念2【模式】&lt;br&gt;具体查看《RunLoop【模式】》&lt;/p&gt;
&lt;p&gt;概念3【观察者Observer】&lt;br&gt;具体查看《RunLoop【观察者】》&lt;/p&gt;
&lt;!--more--&gt;
&lt;h4 id=&quot;FIXME-1-运行循环-为什么要使用运行循环&quot;&gt;&lt;a href=&quot;#FIXME-1-运行循环-为什么要使用运行循环&quot; class=&quot;headerlink&quot; title=&quot;FIXME:1.运行循环 为什么要使用运行循环&quot;&gt;&lt;/a&gt;FIXME:1.运行循环 为什么要使用运行循环&lt;/h4&gt;&lt;p&gt;1.我们思考一下：程序为什么可以处理用户的各种事件，而且可以保证程序不退出？答案：就是因为程序里面有个系统的默认运行循环，所以能保证程序不退出，并且处理用户的各种事件&lt;/p&gt;
&lt;p&gt;2.想要了解为什么要使用运行循环，我们可以从使用运行循环的目的来了解，使用了运行循环我们可以：&lt;br&gt;a. 保证程序不退出 ;&lt;br&gt;b. 负责处理输入事件;&lt;br&gt;c. 如果没有事件发生，会让程序进入休眠状态。&lt;br&gt;从上面可以得出结论，为什么要使用运行循环，因为这是一个APP的基本，没有运行循环，就没有APP的正常运行。&lt;/p&gt;
&lt;p&gt;3.通过上面的了解我们可以总结运行循环的优点：有事情就做事情，没事情就休息；优点：节省CPU资源、提高程序性能；&lt;/p&gt;
&lt;h4 id=&quot;FIXME-2-运行循环-程序里哪里存在运行循环&quot;&gt;&lt;a href=&quot;#FIXME-2-运行循环-程序里哪里存在运行循环&quot; class=&quot;headerlink&quot; title=&quot;FIXME:2.运行循环 程序里哪里存在运行循环&quot;&gt;&lt;/a&gt;FIXME:2.运行循环 程序里哪里存在运行循环&lt;/h4&gt;&lt;p&gt;1.【系统默认 运行循环】系统默认就是一个运行循环，可以保证程序不死掉；系统默认运行循环在主线程&lt;/p&gt;
&lt;h4 id=&quot;FIXME-3-运行循环-与线程的关系&quot;&gt;&lt;a href=&quot;#FIXME-3-运行循环-与线程的关系&quot; class=&quot;headerlink&quot; title=&quot;FIXME:3.运行循环 与线程的关系&quot;&gt;&lt;/a&gt;FIXME:3.运行循环 与线程的关系&lt;/h4&gt;&lt;p&gt;1.每一个线程内部都有一个消息循环。只有主线程的消息循环默认开启,子线程的消息循环默认不开启，一个运行循环对应着一条唯一的线程，如何让子线程不死 ，给这条子线程开启一个运行循环，子线程的runloop需要手动创建,需要手动开启&lt;/p&gt;
&lt;p&gt;2.线程在执行中的休眠和激活就是由RunLoop对象进行管理的&lt;/p&gt;
&lt;p&gt;3.RunLoop是用来管理线程的&lt;/p&gt;
&lt;p&gt;4.每一个线程都有一个RunLoop对象。可以通过具体的方法去获得&lt;/p&gt;
&lt;p&gt;5.但是需要注意：虽然每一个线程都可以获取RunLoop对象，但是并不是每一个线程中都有实例对象，我们可以这样理解：如果我们不获取RunLoop，这个RunLoop就不存在，我们获取时，如果不存在，就会去创建。在主线程中，这个MainRunLoop是默认创建并运行激活的&lt;/p&gt;
&lt;p&gt;6.每条线程都有唯一的一个与之对应的RunLoop对象&lt;/p&gt;
&lt;h4 id=&quot;FIXME-4-运行循环-生命周期&quot;&gt;&lt;a href=&quot;#FIXME-4-运行循环-生命周期&quot; class=&quot;headerlink&quot; title=&quot;FIXME:4.运行循环 生命周期&quot;&gt;&lt;/a&gt;FIXME:4.运行循环 生命周期&lt;/h4&gt;&lt;p&gt;1.运行循环的生命周期：在第一次获取时创建，在线程结束时销毁&lt;/p&gt;
&lt;h4 id=&quot;FIXME-5-运行循环-基本运行流程&quot;&gt;&lt;a href=&quot;#FIXME-5-运行循环-基本运行流程&quot; class=&quot;headerlink&quot; title=&quot;FIXME:5.运行循环 基本运行流程&quot;&gt;&lt;/a&gt;FIXME:5.运行循环 基本运行流程&lt;/h4&gt;&lt;p&gt;1.创建消息（即输入源）；&lt;/p&gt;
&lt;p&gt;2.指定该事件（源）在循环中运行的模式，并加入循环；&lt;/p&gt;
&lt;p&gt;3.当事件的模式与消息循环的模式匹配的时候，消息才会运行。&lt;/p&gt;
&lt;p&gt;4.运行逻辑总结：一个线程对应一个runLoop,主线程的runloop是程序一启动,默认就创建一个runloop,创建好了之后就会给它添加一些默认的模式,每个模式里面会有很多的 source /timer/observer ,添加好这些模式后,observer就会监听主线程的runloop,进入runloop后,就开始处理事件,先处理timer,再处理source0,source0处理完之后再处理source1,当把这些所有的事件反复的处理完之后,如果没有事件了,那么runloop就会进入睡眠状态,当用户又触发了新的事件,就会唤醒runloop,唤醒runloop后回到第二步,重新处理新的timer,新的source0,新的source1,处理完后就睡眠,一直反复,当我们把程序关闭或者强退,这个时候observer就会监听都runloop退出了.&lt;/p&gt;
&lt;h4 id=&quot;FIXME-6-运行循环-API&quot;&gt;&lt;a href=&quot;#FIXME-6-运行循环-API&quot; class=&quot;headerlink&quot; title=&quot;FIXME:6.运行循环 API&quot;&gt;&lt;/a&gt;FIXME:6.运行循环 API&lt;/h4&gt;&lt;p&gt;1.NSRunloop&lt;/p&gt;
&lt;p&gt;2.CFRunLoopRef&lt;/p&gt;
&lt;p&gt;3.两种API的区别1：NSRunloop线程不安全，CFRunLoopRef线程安全；NSRunLoop是Cocoa框架中的类，与之对应的是在Core Fundation中有一个CFRunLoopRef类。这两者的区别是前者不是线程安全的，而CFRunLoopRef是线程安全的。所以：NSRunloop不能调用其他线程的方法.The NSRunLoop class is generally not considered to be thread-safe and its methods should only be called within the context of the current thread. You should never try to call the methods of an NSRunLoop object running in a different thread, as doing so might cause unexpected results.&lt;/p&gt;
&lt;p&gt;4.两种API的区别2：CFRunLoopRef创建一个timer必须添加到runloop 才会执行,添加的时候要指定模式 defaurce模式 ,不对程序做任何操作 timer就会后台运行 ,当我进行操作的时候runloop模式就会从默认模式切换到其他模式,假如说我操作scrollerView 它就会从default模式切换到tracking模式。而roonloop 同一时刻只能执行一种模式.&lt;/p&gt;
&lt;p&gt;5.NSRunLoop是基于CFRunLoopRef的一层OC包装，提供了面向对象的 API，但是这些 API 不是线程安全的。所以要了解RunLoop内部结构，需要多研究CFRunLoopRef层面的API（Core Foundation层面）&lt;/p&gt;
&lt;h4 id=&quot;FIXME-7-运行循环-启动&quot;&gt;&lt;a href=&quot;#FIXME-7-运行循环-启动&quot; class=&quot;headerlink&quot; title=&quot;FIXME:7.运行循环 启动&quot;&gt;&lt;/a&gt;FIXME:7.运行循环 启动&lt;/h4&gt;&lt;p&gt;启动的三种方式：&lt;/p&gt;
&lt;p&gt;1.无条件的—-无条件的进入Runloop是最简单的方法，但也最不推荐使用的。因为这样会使你的线程处在一个永久的循环中，这会让你对Runloop本身的控制很少。你可以添加或删除输入源和定时器，但是退出Runloop的唯一方法是杀死它。没有任何办法可以让这Runloop运行在自定义模式下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] run];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.设置超时时间—-替代无条件进入Runloop更好的办法是用预设超时时间来运行Runloop，这样Runloop运作直到某一事件到达或者规定的时间已经到期。如果是事件到达，消息会被传递给相应的处理程序来处理，然后Runloop退出。你可以重新启动Runloop来等待下一事件。如果是规定时间到期了，你只需简单的重启Runloop或使用此段时间来做任何的其他工作。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]]; 2 秒钟之后结束&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.特定的模式—-除了超时机制，你也可以使用特定的模式来运行你的Runloop。模式和超时不是互斥的，他们可以在启动RunLoop的时候同时使用。模式限制了可以传递事件给Runloop的输入源的类型。暂停当前处理的流程，转而处理其他输入源，当date设置为&lt;a href=&quot;将来，基本不会到达的时间&quot;&gt;NSDate distantFuture&lt;/a&gt;，所以除非处理其他输入源结束，否则永不退出处理暂停的当前处理的流程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;FIXME-8-运行循环-结束&quot;&gt;&lt;a href=&quot;#FIXME-8-运行循环-结束&quot; class=&quot;headerlink&quot; title=&quot;FIXME:8.运行循环 结束&quot;&gt;&lt;/a&gt;FIXME:8.运行循环 结束&lt;/h4&gt;&lt;p&gt;结束的三种方式：&lt;/p&gt;
&lt;p&gt;1.给RunLoop设置超时时间&lt;/p&gt;
&lt;p&gt;2.通知RunLoop停止—-如果可以配置的话，推荐使用第一种方法。指定一个超时时间可以使RunLoop退出前完成所有正常操作，包括发送消息给RunLoop观察者。&lt;/p&gt;
&lt;p&gt;3.使用CFRunLoopStop来显式的停止RunLoop和使用超时时间产生的结果相似。RunLoop把所有剩余的通知发送出去再退出。与设置超时的不同的是你可以在无条件启动的RunLoop里面使用该技术。&lt;/p&gt;
&lt;h4 id=&quot;FIXME-9-运行循环-添加输入源&quot;&gt;&lt;a href=&quot;#FIXME-9-运行循环-添加输入源&quot; class=&quot;headerlink&quot; title=&quot;FIXME:9.运行循环 添加输入源&quot;&gt;&lt;/a&gt;FIXME:9.运行循环 添加输入源&lt;/h4&gt;&lt;p&gt;具体查看《NSRunLoop【例子&lt;em&gt;输入源&lt;/em&gt;】》&lt;/p&gt;
&lt;h4 id=&quot;FIXME-10-运行循环-移除输入源&quot;&gt;&lt;a href=&quot;#FIXME-10-运行循环-移除输入源&quot; class=&quot;headerlink&quot; title=&quot;FIXME:10.运行循环 移除输入源&quot;&gt;&lt;/a&gt;FIXME:10.运行循环 移除输入源&lt;/h4&gt;&lt;p&gt;1.输入源被注册到RunLoop中时会有方法进行remove。但是定时器没有remove，但是它的invalidate方法可以将其从RunLoop中移除。invalidate是重要的也是唯一的将定时器从RunLoop中注销的方法，所以如果我们创建了定时器，就一定要再不适用的时候调用invalidate方法。&lt;/p&gt;
&lt;p&gt;2.自动释放池,什么时候创建和释放 ?&lt;br&gt;(1)第一次创建:是在runloop进入的时候创建 对应的状态 = KCFRunLoopEntry&lt;br&gt;(2)最后一个退出,是在runloop退出的时候 对应的状态 = KCFRunLoopExit&lt;br&gt;(3)其他的创建和释放&lt;br&gt;每次睡觉的时候会释放前自动释放池,再创建一个新的&lt;br&gt;即将进入睡眠的时候,先释放上一次创建的自动释放池,然后再创建一个新的释放池&lt;/p&gt;
&lt;h4 id=&quot;FIXME-11-运行循环-能运行的关键&quot;&gt;&lt;a href=&quot;#FIXME-11-运行循环-能运行的关键&quot; class=&quot;headerlink&quot; title=&quot;FIXME:11.运行循环 能运行的关键&quot;&gt;&lt;/a&gt;FIXME:11.运行循环 能运行的关键&lt;/h4&gt;&lt;p&gt;1.每次运行一个RunLoop，你指定（显式或隐式）RunLoop的运行模式。当相应的模式传递给RunLoop时，只有与该模式对应的Input Source才被监控并允许RunLoop对事件进行处理（与此类似，也只有与该模式对应的Observers才会被通知）&lt;/p&gt;
&lt;p&gt;2.上面的对应关系是：&lt;/p&gt;
&lt;p&gt;RunLoop—-模式—-&lt;br&gt;模式—-Input Sources&lt;br&gt;模式—-Observers&lt;/p&gt;
&lt;h4 id=&quot;FIXME-12-运行循环-可以对运行循环做的操作&quot;&gt;&lt;a href=&quot;#FIXME-12-运行循环-可以对运行循环做的操作&quot; class=&quot;headerlink&quot; title=&quot;FIXME:12.运行循环 可以对运行循环做的操作&quot;&gt;&lt;/a&gt;FIXME:12.运行循环 可以对运行循环做的操作&lt;/h4&gt;&lt;p&gt;1.添加输入源；添加定时源；添加观察者；&lt;/p&gt;
&lt;h4 id=&quot;FIXME-13-运行循环-获得RunLoop对象&quot;&gt;&lt;a href=&quot;#FIXME-13-运行循环-获得RunLoop对象&quot; class=&quot;headerlink&quot; title=&quot;FIXME:13.运行循环 获得RunLoop对象&quot;&gt;&lt;/a&gt;FIXME:13.运行循环 获得RunLoop对象&lt;/h4&gt;&lt;p&gt;Foundation&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[NSRunLoop currentRunLoop];   // 获得当前线程的RunLoop对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[NSRunLoop mainRunLoop];      // 获得主线程的RunLoop对象&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Core Foundation&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CFRunLoopGetCurrent();       // 获得当前线程的RunLoop对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFRunLoopGetMain();          // 获得主线程的RunLoop对象&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;FIXME-13-RunLoop是否有效的关键是？&quot;&gt;&lt;a href=&quot;#FIXME-13-RunLoop是否有效的关键是？&quot; class=&quot;headerlink&quot; title=&quot;FIXME:13.RunLoop是否有效的关键是？&quot;&gt;&lt;/a&gt;FIXME:13.RunLoop是否有效的关键是？&lt;/h4&gt;&lt;p&gt;1.关键是有没有事件源或者定时源；&lt;/p&gt;
&lt;h2 id=&quot;RunLoop模式&quot;&gt;&lt;a href=&quot;#RunLoop模式&quot; class=&quot;headerlink&quot; title=&quot;RunLoop模式&quot;&gt;&lt;/a&gt;RunLoop模式&lt;/h2&gt;&lt;p&gt;1.NS开头(Cocoa)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NSDefaultRunLoopMode 默认模式（最常用的循环模式） 默认Mode, 通常主线程在这个模式下运行处理modal panels（The mode to deal with input sources other than NSConnection objects. This is the most commonly used run-loop mode. Available in iOS 2.0 and later.）,DefaultMode 是 App 平时所处的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;NSEventTrackingRunLoopMode 此模式下用于处理窗口事件,鼠标事件等,如组件拖动输入源 UITrackingRunLoopModes 不处理定时事件；TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;NSRunLoopCommonModes 普通模式（一组模式的集合,包括NSDefaultRunLoopMode和UITrackingRunLoopMode）（Objects added to a run loop using this value as the mode are monitored by all run loop modes that have been declared as a member of the set of “common” modes; see the description of CFRunLoopAddCommonMode for details.）；哪些mode默认久标记为”Common”属性：主线程的 RunLoop 里有两个预置的 Mode：kCFRunLoopDefaultMode 和 UITrackingRunLoopMode。这两个 Mode 都已经被标记为”Common”属性。    此模式用于配置”组模式”，一个输入源与此模式关联，则输入源与组中的所有模式相关联。这是一组可配置的通用模式。将input sources与该模式关联则同时也将input sources与该组中的其它模式进行了关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;NSConnectionReplyMode 此模式用于处理NSConnection的回调事件,：处理NSConnection事件，属于系统内部，用户基本不用&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;NSModalPanelRunLoopMode 模态模式，此模式下，RunLoop只对处理模态相关事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.CF开头(Core Foundation)&lt;/p&gt;
&lt;p&gt;1）系统默认注册了5中mode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kCFRunLoopDefaultMode App的默认Mode，通常主线程是在这个Mode下运行；缺省情况下，将包含所有操作，并且大多数情况下都会使用此模式,几乎包括所有输入源(除NSConnection),对应NSDefaultRunLoopMode&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;UITrackingRunLoopMode 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;UIInitializationRunLoopMode 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;GSEventReceiveRunLoopMode 接受系统事件的内部 Mode，通常用不到&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;kCFRunLoopCommonModes 这是一个占位用的Mode，不是一种真正的Mode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.RunLoop模式介绍&lt;/p&gt;
&lt;p&gt;1）RunLoopMode是一个集合，包括监听：事件源，定时器，以及需通知的RunLoop observers&lt;br&gt;2）CFRunloopModeRef代表着Runloop的运行模式&lt;br&gt;3）一个Runloop中可以有多个mode,一个mode里面又可以有多个source\observer\timer等等&lt;br&gt;4）每次runloop启动的时候，只能指定一个mode,这个mode被称为该Runloop的当前mode&lt;br&gt;5）如果需要切换mode,只能先退出当前Runloop,再重新指定一个mode进入；RunLoop在某一时刻只能在一种模式下运行, 更换模式时需要暂停当前的Loop, 然后重启新的Loop.&lt;br&gt;6）这样做主要是为了分割不同组的定时器等，让他们相互之间不受影响&lt;/p&gt;
&lt;p&gt;4.模式切换&lt;/p&gt;
&lt;p&gt;1）NSDefaultRunLoopMode 切换为 NSEventTrackingRunLoopMode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个TableView时，RunLoop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;当设置事件模式为NSDefaultRunLoopMode 时，拖动UITextView界面,定时源停止运行；当停止拖动，定时源又继续运行;当设置事件模式为NSRunLoopCommonModes 时，拖动UITextView界面,定时源持续运行不受影响。此外，当设置事件模式为NSRunLoopCommonModes 时，未拖动UITextView界面时，消息循环的模式为kCFRunLoopDefaultMode ，当拖动UITextView界面时，消息循环的模式自动变为UITrackingRunLoopMode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2）模式切换例2&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 调用了scheduledTimer返回的定时器，已经自动被添加到当前runLoop中，而且是NSDefaultRunLoopMode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSTimer *timer = [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 修改模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当你在滑动ScrollView的时候上面的timer会失效, 原因是Timer是默认加在NSDefalutRunLoopMode上的, 而滑动ScrollView后系统把RunLoop切换为UITrackingRunLoopMode, 所以timer就不会执行了. 解决方法是把该Timer加到NSRunLoopCommonModes下, 这样即使滑动ScrollView也不会影响timer了.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3) 模式切换例3&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;另外还有一个trick是当tableview的cell从网络异步加载图片, 加载完成后在主线程刷新显示图片, 这时滑动tableview会造成卡顿. 通常的思路是tableview滑动的时候延迟加载图片, 等停止滑动时再显示图片. 这里我们可以通过RunLoop来实现.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.cellImageView performSelector:@sector(setImage:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;withObject:downloadedImage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;afterDelay:0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inModes:@[NSDefaultRunLoopMode]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当NSRunLoop为NSDefaultRunLoopMode的时候tableview肯定停止滑动了, why? 因为如果还在滑动中, RunLoop的mode应该是UITrackingRunLoopMode.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4)让一个事件同时在两个mode都有回调方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时你需要一个 Timer，在两个 Mode 中都能得到回调，一种办法就是将这个 Timer 分别加入这两个 Mode。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;还有一种方式，就是将 Timer 加入到顶层的 RunLoop 的 “commonModeItems” 中。”commonModeItems” 被 RunLoop 自动更新到所有具有”Common”属性的 Mode 里去&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;方式1:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSTimer *timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 定时器只运行在NSDefaultRunLoopMode下，一旦RunLoop进入其他模式，这个定时器就不会工作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 定时器只运行在UITrackingRunLoopMode下，一旦RunLoop进入其他模式，这个定时器就不会工作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] addTimer:timer forMode:UITrackingRunLoopMode];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;方式2：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 定时器会跑在标记为common modes的模式下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 标记为common modes的模式：UITrackingRunLoopMode和NSDefaultRunLoopMode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;RunLoop观察者&quot;&gt;&lt;a href=&quot;#RunLoop观察者&quot; class=&quot;headerlink&quot; title=&quot;RunLoop观察者&quot;&gt;&lt;/a&gt;RunLoop观察者&lt;/h2&gt;&lt;p&gt;1.观察者状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kCFRunLoopEntry = (1UL &amp;lt;&amp;lt; 0),         //即将进入Runloop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kCFRunLoopBeforeTimers = (1UL &amp;lt;&amp;lt; 1),  //即将处理NSTimer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kCFRunLoopBeforeSources = (1UL &amp;lt;&amp;lt; 2), //即将处理Sources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kCFRunLoopBeforeWaiting = (1UL &amp;lt;&amp;lt; 5), //即将进入休眠&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kCFRunLoopAfterWaiting = (1UL &amp;lt;&amp;lt; 6),  //刚从休眠中唤醒&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kCFRunLoopExit = (1UL &amp;lt;&amp;lt; 7),          //即将退出runloop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kCFRunLoopAllActivities = 0x0FFFFFFFU //所有状态改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一个参数:用于分配该observer对象的内存 CFAllocatorGetDefault&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二个参数:用以设置该observer所要关注的的事件 kCFRunLoopAllActivities&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三个参数:用于标识该observer是在第一次进入run loop时执行, 还是每次进入run loop处理时均执行 YES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第四个参数:用于设置该observer的优先级 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第五个参数: observer监听到事件时的回调block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFRunLoopObserverRef observer = CFRunLoopObserverCreateWithHandler(CFAllocatorGetDefault(), kCFRunLoopAllActivities, YES, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch(activity)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case kCFRunLoopEntry:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;即将进入loop&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case kCFRunLoopBeforeTimers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;即将处理timers&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case kCFRunLoopBeforeSources:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;即将处理sources&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case kCFRunLoopBeforeWaiting:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;即将进入休眠&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case kCFRunLoopAfterWaiting:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;刚从休眠中唤醒&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case kCFRunLoopExit:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;即将退出loop&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.参数解析&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopDefaultMode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一个参数: 给哪个RunLoop添加监听&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二个参数: 需要添加的Observer对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三个参数: 在哪种模式下监听&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.释放观察者&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CFRelease(observer);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.添加观察者过程&lt;/p&gt;
&lt;p&gt;1）创建一个观察者&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//创建一个runloop监听者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFRunLoopObserverRef observer = CFRunLoopObserverCreateWithHandler(CFAllocatorGetDefault(),kCFRunLoopAllActivities,YES, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@”监听RunLoop状态改变—%zd”,activity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2）添加创建的观察者&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFRunLoopAddObserver(CFRunLoopGetCurrent(),observer,kCFRunLoopDefaultMode);// 添加观察者：监听RunLoop的状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3）释放创建的观察者&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CFRelease(observer);//释放&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5.RunLoop观察者介绍&lt;/p&gt;
&lt;p&gt;1）CFRunLoopObserverRef是观察者，能够监听RunLoop的状态改变&lt;/p&gt;
&lt;p&gt;2）Observer是监听RunLoop状态的，CoreFunction向线程添加runloop observers来监听事件，意在监听事件发生时来做处理。&lt;/p&gt;
&lt;p&gt;3）线程除了处理输入源，RunLoop也会生成关于Run Loop行为的通知（notification）。RunLoop观察者（Run-Loop Observers）可以收到这些通知，并在线程上面使用他们来作额外的处理；如果RunLoop没有任何源需要监视的话，它会在你启动之际立马退出。&lt;/p&gt;
&lt;h2 id=&quot;RunLoop输入源&quot;&gt;&lt;a href=&quot;#RunLoop输入源&quot; class=&quot;headerlink&quot; title=&quot;RunLoop输入源&quot;&gt;&lt;/a&gt;RunLoop输入源&lt;/h2&gt;&lt;p&gt;1.RunLoop能处理的事件：输入源（事件源）、定时源 ;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;输入源也就是用户的各种事件，如触摸事件、定时器事件NSTimer、选择器事件selector;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入源是为了接收消息；当为一个长期存活的现场配置runloop时，至少添加一个input source去接收消息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CFRunLoopSourceRef 是事件产生的地方&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.输入源（事件源）&lt;/p&gt;
&lt;p&gt;1）一般用来处理异步事件的；&lt;/p&gt;
&lt;p&gt;2）两种分法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;旧：按照苹果官方文档进行划分的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新：基于函数的调用栈来进行划分的（source0和source1）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3）旧：按照苹果官方文档进行划分的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cocoa Perform Selector Sources（performSelector源）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom Input Sources（自定义源）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Port-Based Sources（基于端口Mach port的源）通过内核和其他线程通信，接收、分发系统事件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4) 新：基于函数的调用栈来进行划分的（source0和source1）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;source0是非基于端口的,是用户自己手动触发的操作,比如触摸滑动等操作.只包含了一个回调（函数指针），它并不能主动触发事件。使用时，你需要先调用 CFRunLoopSourceSignal(source)，将这个 Source 标记为待处理，然后手动调用 CFRunLoopWakeUp(runloop) 来唤醒 RunLoop，让其处理这个事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Source1是系统内部的一些端口触发的事件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.定时源&lt;/p&gt;
&lt;p&gt;1）一般用来处理同步事件的&lt;/p&gt;
&lt;p&gt;2）定时源即NSTimer（add timer）&lt;/p&gt;
&lt;p&gt;3) CFRunLoopTimerRef是基于时间的触发器&lt;/p&gt;
&lt;p&gt;4) CFRunLoopTimerRef基本上说的就是NSTimer，它受RunLoop的Mode影响&lt;/p&gt;
&lt;p&gt;5) GCD的定时器不受RunLoop的Mode影响&lt;/p&gt;
&lt;p&gt;6）一个mode里面可以添加多个NSTimer，也就是说以后当创建NSTimer的时候，可以指定它是在什么模式下运行的。&lt;/p&gt;
&lt;p&gt;4.performSelector源&lt;/p&gt;
&lt;p&gt;1) 当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。&lt;/p&gt;
&lt;p&gt;2) 当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。&lt;/p&gt;
&lt;p&gt;3) performSelector应用：可以让某些事件（行为、任务）在特定模式下执行; 有时候图片比较大，渲染到屏幕耗费时间，会造成界面卡顿，可以让图片在UIScrollView滚动完之后执行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[self.imageView performSelector:@selector(setImage:) withObject:[UIImage imageNamed:@&amp;quot;placeholder&amp;quot;] afterDelay:2 inModes:@[NSDefaultRunLoopMode]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5.自定义源&lt;/p&gt;
&lt;p&gt;6.基于端口源&lt;/p&gt;
&lt;h2 id=&quot;RunLoop类&quot;&gt;&lt;a href=&quot;#RunLoop类&quot; class=&quot;headerlink&quot; title=&quot;RunLoop类&quot;&gt;&lt;/a&gt;RunLoop类&lt;/h2&gt;&lt;p&gt;1.五个类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.CFRunLoopRef&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.CFRunLoopModeRef      代表RunLoop的运行模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.CFRunLoopSourceRef&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4.CFRunLoopTimerRef&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5.CFRunLoopObserverRef&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.CFRunLoopModeRef类&lt;/p&gt;
&lt;p&gt;1）参照RunLoop模式&lt;/p&gt;
&lt;p&gt;3.CFRunLoopSourceRef类&lt;/p&gt;
&lt;p&gt;1）参照RunLoop输入源&lt;/p&gt;
&lt;p&gt;4.CFRunLoopTimerRef类&lt;/p&gt;
&lt;p&gt;1）参照RunLoop输入源&lt;/p&gt;
&lt;p&gt;5.CFRunLoopObserverRef类&lt;/p&gt;
&lt;p&gt;1）参照RunLoop观察者&lt;/p&gt;
&lt;h2 id=&quot;RunLoop属性和方法&quot;&gt;&lt;a href=&quot;#RunLoop属性和方法&quot; class=&quot;headerlink&quot; title=&quot;RunLoop属性和方法&quot;&gt;&lt;/a&gt;RunLoop属性和方法&lt;/h2&gt;&lt;p&gt;1.获取主线程的RunLoop，主线程下就没必要调用[runLoop run]了, 因为它本来就是一直run的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSRunLoop * runloop = [NSRunLoop mainRunLoop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFRunLoopRef runloop = CFRunLoopGetMain();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.获取当前线程的RunLoop:有的话就直接获取，没有的话就自动创建&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSRunLoop * myRunLoop = [NSRunLoop currentRunLoop];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.将定时器添加到runloop中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-（void）addTimer:(NSTimer *)timer forMode:(NSString *)mode;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.添加输入源端口到runloop中，NSPort对象可以理解为详细的载体，会传递消息与其代理。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)addPort:(NSPort *)aPort forMode:(NSString *)mode;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5.将某个输入源端口移除&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)removePort:(NSPort *)aPort forMode:(NSString *)mode;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;6.到某个时间点运行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(void)runUntilDate:(NSDate *)limitDate;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;7.在某个期限前运行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(BOOL)runMode:(NSString *)mode beforeDate:(NSDate *)limitDate;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;8.在某个时间期限前接收相应&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(void)aceptInputForMode:(NSString *)mode beforeDate:(NSDate *)limitDate;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;9.子线程开启消息循环&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法1&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 开启消息循环 使用run方法后无法停止消息循环。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] run];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法2&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 指定循环运行时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法3&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BOOL shouldKeepRunning = YES;    // global设置为global变量，可控制该消息循环的开闭；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSRunLoop *theRL = [NSRunLoop currentRunLoop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while (shouldKeepRunning &amp;amp;&amp;amp; [theRL runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h6&gt;&lt;p&gt;1.&lt;a href=&quot;http://blog.csdn.net/wjsxiaoweige/article/details/38318733&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/wjsxiaoweige/article/details/38318733&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://blog.ibireme.com/2015/05/18/runloop/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.ibireme.com/2015/05/18/runloop/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;http://blog.csdn.net/yang__xz/article/details/50813404&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/yang__xz/article/details/50813404&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;http://blog.chinaunix.net/uid-24862988-id-3408565.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.chinaunix.net/uid-24862988-id-3408565.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;a href=&quot;http://my.oschina.net/u/816791/blog/387568&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/u/816791/blog/387568&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6.&lt;a href=&quot;http://blog.csdn.net/ios_che/article/details/8252800&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/ios_che/article/details/8252800&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7.&lt;a href=&quot;http://www.tuicool.com/articles/uaaei2u&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.tuicool.com/articles/uaaei2u&lt;/a&gt; 比较好&lt;/p&gt;
&lt;p&gt;8.&lt;a href=&quot;http://yangchao0033.github.io/blog/2016/01/06/runloopshen-du-tan-jiu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://yangchao0033.github.io/blog/2016/01/06/runloopshen-du-tan-jiu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;9.&lt;a href=&quot;http://yangchao0033.github.io/blog/2016/01/18/runloop-5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://yangchao0033.github.io/blog/2016/01/18/runloop-5/&lt;/a&gt; 理解&lt;/p&gt;
&lt;p&gt;10.&lt;a href=&quot;http://chun.tips/blog/2014/10/20/zou-jin-run-loopde-shi-jie-er-:ru-he-pei-zhi-run-loop-sources/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://chun.tips/blog/2014/10/20/zou-jin-run-loopde-shi-jie-er-:ru-he-pei-zhi-run-loop-sources/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11.&lt;a href=&quot;https://github.com/yechunjun/RunLoopDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yechunjun/RunLoopDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;12.&lt;a href=&quot;http://www.dreamingwish.com/article/ios-multithread-program-runloop-the.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.dreamingwish.com/article/ios-multithread-program-runloop-the.html&lt;/a&gt; 不错&lt;/p&gt;
&lt;p&gt;13.&lt;a href=&quot;https://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/&lt;/a&gt;  比较容易理解&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;运行循环本质&quot;&gt;&lt;a href=&quot;#运行循环本质&quot; class=&quot;headerlink&quot; title=&quot;运行循环本质&quot;&gt;&lt;/a&gt;运行循环本质&lt;/h4&gt;&lt;p&gt;1.从字面上看，就是运行循环跑圈&lt;/p&gt;
&lt;p&gt;2.其实它内部就是do-while循环，在这个循环内部不断地处理各种任务（比如Source、Timer、Observer）&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-数据持久化</title>
    <link href="williamliuwen.cn/2016/07/12/AWblog/2016/7/iOS-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>williamliuwen.cn/2016/07/12/AWblog/2016/7/iOS-数据持久化/</id>
    <published>2016-07-12T12:48:41.000Z</published>
    <updated>2016-08-13T13:35:38.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-RunTime</title>
    <link href="williamliuwen.cn/2016/07/09/AWblog/2016/7/iOS-RunTime/"/>
    <id>williamliuwen.cn/2016/07/09/AWblog/2016/7/iOS-RunTime/</id>
    <published>2016-07-08T22:02:46.000Z</published>
    <updated>2016-08-13T13:36:04.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;runtime常用方法&quot;&gt;&lt;a href=&quot;#runtime常用方法&quot; class=&quot;headerlink&quot; title=&quot;runtime常用方法&quot;&gt;&lt;/a&gt;runtime常用方法&lt;/h2&gt;&lt;p&gt;1.类结构：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_class &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class isa  OBJC_ISA_AVAILABILITY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if !__OBJC2__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class super_class                       OBJC2_UNAVAILABLE;  // 父类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char *name                        OBJC2_UNAVAILABLE;  // 类名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long version                            OBJC2_UNAVAILABLE;  // 类的版本信息，默认为0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long info                               OBJC2_UNAVAILABLE;  // 类信息，供运行期使用的一些位标识&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long instance_size                      OBJC2_UNAVAILABLE;  // 该类的实例变量大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_ivar_list *ivars            OBJC2_UNAVAILABLE;  // 该类的成员变量链表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_method_list **methodLists   OBJC2_UNAVAILABLE;  // 方法定义的链表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_cache *cache                OBJC2_UNAVAILABLE;  // 方法缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_protocol_list *protocols    OBJC2_UNAVAILABLE;  // 协议链表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; OBJC2_UNAVAILABLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_object &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class isa  OBJC_ISA_AVAILABILITY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.类实例结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef struct objc_object *id;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.类实例结构_常用函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取类的类名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char * class_getName ( Class cls );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取类的父类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class class_getSuperclass ( Class cls );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 判断给定的Class是否是一个元类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL class_isMetaClass ( Class cls );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取实例大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;size_t class_getInstanceSize ( Class cls );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取类中指定名称实例成员变量的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ivar class_getInstanceVariable ( Class cls, const char *name );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取类成员变量的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ivar class_getClassVariable ( Class cls, const char *name );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 添加成员变量,方法只能在objc_allocateClassPair函数与objc_registerClassPair之间调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL class_addIvar ( Class cls, const char *name, size_t size, uint8_t alignment, const char *types );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取整个成员变量列表 ，后续必须使用free释放Ivar这个数组对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ivar * class_copyIvarList ( Class cls, unsigned int *outCount );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取指定的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_property_t class_getProperty ( Class cls, const char *name );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取属性列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_property_t * class_copyPropertyList ( Class cls, unsigned int *outCount );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 为类添加属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL class_addProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 替换类的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void class_replaceProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.类方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef struct objc_method *Method;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_method &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SEL method_name                 OBJC2_UNAVAILABLE;  // 方法名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *method_types              OBJC2_UNAVAILABLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMP method_imp                  OBJC2_UNAVAILABLE;  // 方法实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5.类方法_常用函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 添加方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL class_addMethod ( Class cls, SEL name, IMP imp, const char *types );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取实例方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method class_getInstanceMethod ( Class cls, SEL name );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取类方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method class_getClassMethod ( Class cls, SEL name );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取所有方法的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method * class_copyMethodList ( Class cls, unsigned int *outCount );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 替代方法的实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMP class_replaceMethod ( Class cls, SEL name, IMP imp, const char *types );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 返回方法的具体实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMP class_getMethodImplementation ( Class cls, SEL name );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMP class_getMethodImplementation_stret ( Class cls, SEL name );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 类实例是否响应指定的selector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL class_respondsToSelector ( Class cls, SEL sel );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;6.实例方法_常用函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 调用指定方法的实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id method_invoke ( id receiver, Method m, ... );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 调用返回一个数据结构的方法的实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void method_invoke_stret ( id receiver, Method m, ... );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取方法名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SEL method_getName ( Method m );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 返回方法的实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMP method_getImplementation ( Method m );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取描述方法参数和返回值类型的字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char * method_getTypeEncoding ( Method m );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取方法的返回值类型的字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char * method_copyReturnType ( Method m );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取方法的指定位置参数的类型字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char * method_copyArgumentType ( Method m, unsigned int index );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 通过引用返回方法的返回值类型字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void method_getReturnType ( Method m, char *dst, size_t dst_len );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 返回方法的参数的个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unsigned int method_getNumberOfArguments ( Method m );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 通过引用返回方法指定位置参数的类型字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void method_getArgumentType ( Method m, unsigned int index, char *dst, size_t dst_len );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 返回指定方法的方法描述结构体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_method_description * method_getDescription ( Method m );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置方法的实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMP method_setImplementation ( Method m, IMP imp );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 交换两个方法的实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void method_exchangeImplementations ( Method m1, Method m2 );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//函数调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_msgSend(receiver, selector)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_msgSend(receiver, selector, arg1, arg2, ...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;7.方法选择器&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 返回给定选择器指定的方法的名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char * sel_getName ( SEL sel );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 在Objective-C Runtime系统中注册一个方法，将方法名映射到一个选择器，并返回这个选择器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SEL sel_registerName ( const char *str );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 在Objective-C Runtime系统中注册一个方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SEL sel_getUid ( const char *str );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 比较两个选择器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL sel_isEqual ( SEL lhs, SEL rhs );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;8.动态创建类&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 创建一个新类和元类 extraBytes通常指定为0，该参数是分配给类和元类对象尾部的索引ivars的字节数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class objc_allocateClassPair ( Class superclass, const char *name, size_t extraBytes );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 销毁一个类及其相关联的类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void objc_disposeClassPair ( Class cls );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 在应用中注册由objc_allocateClassPair创建的类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void objc_registerClassPair ( Class cls );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 例子1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class cls = objc_allocateClassPair(MyClass.class, &amp;quot;MySubClass&amp;quot;, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class_addMethod(cls, @selector(submethod1), (IMP)imp_submethod1, &amp;quot;v@:&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class_replaceMethod(cls, @selector(method1), (IMP)imp_submethod1, &amp;quot;v@:&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class_addIvar(cls, &amp;quot;_ivar1&amp;quot;, sizeof(NSString *), log(sizeof(NSString *)), &amp;quot;i&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_property_attribute_t type = &amp;#123;&amp;quot;T&amp;quot;, &amp;quot;@\&amp;quot;NSString\&amp;quot;&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_property_attribute_t ownership = &amp;#123; &amp;quot;C&amp;quot;, &amp;quot;&amp;quot; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_property_attribute_t backingivar = &amp;#123; &amp;quot;V&amp;quot;, &amp;quot;_ivar1&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_property_attribute_t attrs[] = &amp;#123;type, ownership, backingivar&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class_addProperty(cls, &amp;quot;property2&amp;quot;, attrs, 3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_registerClassPair(cls);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id instance = [[cls alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[instance performSelector:@selector(submethod1)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[instance performSelector:@selector(method1)];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;9.动态创建对象&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 创建类实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id class_createInstance ( Class cls, size_t extraBytes );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 在指定位置创建类实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id objc_constructInstance ( Class cls, void *bytes );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 销毁类实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void * objc_destructInstance ( id obj );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 例子1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id theObject = class_createInstance(NSString.class, sizeof(unsigned));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id str1 = [theObject init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, [str1 class]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id str2 = [[NSString alloc] initWithString:@&amp;quot;test&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, [str2 class]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;10.成员变量、属性&lt;/p&gt;
&lt;p&gt;Ivar 结构：Ivar是表示实例变量的类型，其实际是一个指向objc_ivar结构体的指针，其定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef struct objc_ivar *Ivar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct objc_ivar &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *ivar_name                 OBJC2_UNAVAILABLE;  // 变量名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char *ivar_type                 OBJC2_UNAVAILABLE;  // 变量类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int ivar_offset                 OBJC2_UNAVAILABLE;  // 基地址偏移字节&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef __LP64__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int space                       OBJC2_UNAVAILABLE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;11.objc_property_t 属性结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef struct objc_property *objc_property_t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char *name;           // 特性名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char *value;          // 特性值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; objc_property_attribute_t;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;12.常用方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取成员变量名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char * ivar_getName ( Ivar v );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取成员变量类型编码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char * ivar_getTypeEncoding ( Ivar v );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取成员变量的偏移量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ptrdiff_t ivar_getOffset ( Ivar v );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置关联对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void objc_setAssociatedObject ( id object, const void *key, id value, objc_AssociationPolicy policy );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取关联对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id objc_getAssociatedObject ( id object, const void *key );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 移除关联对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void objc_removeAssociatedObjects ( id object );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取属性名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char * property_getName ( objc_property_t property );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取属性特性描述字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const char * property_getAttributes ( objc_property_t property );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取属性中指定的特性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char * property_copyAttributeValue ( objc_property_t property, const char *attributeName );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取属性的特性列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_property_attribute_t * property_copyAttributeList ( objc_property_t property, unsigned int *outCount );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;runtime常用方法&quot;&gt;&lt;a href=&quot;#runtime常用方法&quot; class=&quot;headerlink&quot; title=&quot;runtime常用方法&quot;&gt;&lt;/a&gt;runtime常用方法&lt;/h2&gt;&lt;p&gt;1.类结构：&lt;/p&gt;
&lt;figure class=&quot;highligh
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-Notification</title>
    <link href="williamliuwen.cn/2016/07/09/AWblog/2016/7/iOS-Notification/"/>
    <id>williamliuwen.cn/2016/07/09/AWblog/2016/7/iOS-Notification/</id>
    <published>2016-07-08T22:01:34.000Z</published>
    <updated>2016-08-13T13:35:51.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-Thread</title>
    <link href="williamliuwen.cn/2016/07/02/AWblog/2016/7/iOS-Thread/"/>
    <id>williamliuwen.cn/2016/07/02/AWblog/2016/7/iOS-Thread/</id>
    <published>2016-07-02T08:52:50.000Z</published>
    <updated>2016-08-13T13:36:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Thread方案&quot;&gt;&lt;a href=&quot;#Thread方案&quot; class=&quot;headerlink&quot; title=&quot;Thread方案&quot;&gt;&lt;/a&gt;Thread方案&lt;/h2&gt;&lt;p&gt;1.NSOperation&lt;/p&gt;
&lt;p&gt;2.GCD&lt;/p&gt;
&lt;p&gt;3.NSThread&lt;/p&gt;
&lt;p&gt;4.Thread须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.xxx&lt;/li&gt;
&lt;li&gt;2.xxx&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-NSThread&quot;&gt;&lt;a href=&quot;#Thread-NSThread&quot; class=&quot;headerlink&quot; title=&quot;Thread - NSThread&quot;&gt;&lt;/a&gt;Thread - NSThread&lt;/h2&gt;&lt;p&gt;1.NSThread须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）NSThread使用的优点和局限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.NSThread使用注意？&lt;/p&gt;
&lt;p&gt;3.NSThread常用属性和方法？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-GCD&quot;&gt;&lt;a href=&quot;#Thread-GCD&quot; class=&quot;headerlink&quot; title=&quot;Thread - GCD&quot;&gt;&lt;/a&gt;Thread - GCD&lt;/h2&gt;&lt;h3 id=&quot;1-GCD须知？&quot;&gt;&lt;a href=&quot;#1-GCD须知？&quot; class=&quot;headerlink&quot; title=&quot;1.GCD须知？&quot;&gt;&lt;/a&gt;1.GCD须知？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1）GCD使用的优点和局限&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.GCD是苹果公司为多核的并行运算提出的解决方案&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.GCD会自动利用更多的CPU内核（比如双核、四核）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.GCD的高级功能：监视进程或者监视文件夹内文件的变化之类的比较合适。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2）GCD 全称是Grand Central Dispatch，可译为“牛逼的中枢调度器”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;GCD-串行、并行、异步、同步&quot;&gt;&lt;a href=&quot;#GCD-串行、并行、异步、同步&quot; class=&quot;headerlink&quot; title=&quot;GCD - 串行、并行、异步、同步&quot;&gt;&lt;/a&gt;GCD - 串行、并行、异步、同步&lt;/h5&gt;&lt;p&gt;1.什么是串行？&lt;/p&gt;
&lt;p&gt;串行就是一个接一个执行，串行是任务A执行完了任务B才能执行, 它们俩只能顺序执行&lt;/p&gt;
&lt;p&gt;2.什么是并行？&lt;/p&gt;
&lt;p&gt;并行就是多个可以一起执行，并行则是任务A和任务B可以同时执行&lt;/p&gt;
&lt;p&gt;3.什么是同步（ dispatch_sync ）？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1)同步就是，比如用来下载图片的函数A，同步函数只有在image下载结束之后才返回，下载的这段时间函数A只能搬个小板凳在那儿坐等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2)只能在当前线程中执行任务，不具备开启新线程的能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.什么是异步（ dispatch_async）？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1)异步，异步函数, 立即返回,图片会去下载 但函数A不会去等它完成，因此异步函数不会堵塞当前线程去执行下一个函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2)可以在新的线程中执行任务，具备开启新线程的能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3)异步（dispatch_async）是多线程的代名词&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.串行、并行、异步、同步与线程的关系？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步（ dispatch_sync）不会开启新线程，暂停执行所有不以block块任务为第一任务的队列，阻塞&lt;/li&gt;
&lt;li&gt;异步（ dispatch_async）不一定会开启新线程，这个跟队列有关，当前线程会直接往下执行，它不会阻塞当前线程&lt;/li&gt;
&lt;li&gt;同步执行和异步执行，他们之间的区别主要在于会不会阻塞当前线程,同步会让系统判定暂停执行所有不以block块任务为第一任务的队列（即如果block块任务不在队列头，那么block块任务所在的队列也会暂停执行），且同步一定不会开启新线程，因为GCD觉得既然其它队列暂停执行，block块任务就可以在当前线程执行了，没有必要开启新线程。而异步则系统不会进行判定，但是不一定会开启新线程，这个跟队列有关，如果是新创建的队列，那么GCD就会开启新线程，如果加入已有的队列，那么就会在队列所在的线程中执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;GCD-队列、主队列、全局队列、自定义队列、任务、串行队列、并发队列&quot;&gt;&lt;a href=&quot;#GCD-队列、主队列、全局队列、自定义队列、任务、串行队列、并发队列&quot; class=&quot;headerlink&quot; title=&quot;GCD - 队列、主队列、全局队列、自定义队列、任务、串行队列、并发队列&quot;&gt;&lt;/a&gt;GCD - 队列、主队列、全局队列、自定义队列、任务、串行队列、并发队列&lt;/h5&gt;&lt;p&gt;1.队列与任务关系?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）队列是用来放置任务的，一个队列可以有很多任务，同时也会有很多队列。&lt;/li&gt;
&lt;li&gt;2）所以操作任务的一般步骤是：第一步先确定想做的事情，就是定制任务；第二步是将任务添加到队列中，GCD会自动将队列中的任务取出，放到对应的线程中执行；注意：任务的取出遵循队列的FIFO原则：先进先出，后进后出；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.任务是什么？&lt;/p&gt;
&lt;p&gt;任务就是想要做的事，表示执行什么操作&lt;/p&gt;
&lt;p&gt;3.队列是什么？&lt;/p&gt;
&lt;p&gt;用来存放任务&lt;/p&gt;
&lt;p&gt;4.并发队列（Concurrent Dispatch Queue）是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）可以让多个任务并发（同时）执行（自动开启多个线程同时执行任务）&lt;/li&gt;
&lt;li&gt;2）并发功能只有在异步（dispatch_async）函数下才有效&lt;/li&gt;
&lt;li&gt;3）全局队列就是并发队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.串行队列（Serial Dispatch Queue）是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）让任务一个接着一个地执行（一个任务执行完毕后，再执行下一个任务）&lt;/li&gt;
&lt;li&gt;2）串行和并行是针对同一个队列中的任务而言的，当使用串行，那么队列里的那么队列里的任务最多只能使用一个线程运行，即同一时刻只有一个任务在执行，如果是并行，那么系统会根据队列里的任务自动分配线程执行，最大线程数根据参数设定。&lt;/li&gt;
&lt;li&gt;3）主队列就是串行队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6.自定义队列（Serial Dispatch Queue）是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）自定义队列可以是串行队列，也可以是并行队列&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-GCD使用注意？&quot;&gt;&lt;a href=&quot;#2-GCD使用注意？&quot; class=&quot;headerlink&quot; title=&quot;2.GCD使用注意？&quot;&gt;&lt;/a&gt;2.GCD使用注意？&lt;/h3&gt;&lt;h3 id=&quot;3-GCD常用属性和方法？&quot;&gt;&lt;a href=&quot;#3-GCD常用属性和方法？&quot; class=&quot;headerlink&quot; title=&quot;3.GCD常用属性和方法？&quot;&gt;&lt;/a&gt;3.GCD常用属性和方法？&lt;/h3&gt;&lt;p&gt;1.dispatch_sync// 同步执行&lt;/p&gt;
&lt;p&gt;2.dispatch_async// 异步执行&lt;/p&gt;
&lt;p&gt;3.dispatch_once_t// 保证某段代码在程序运行过程中只被执行1次&lt;/p&gt;
&lt;p&gt;4.dispatch_after// 延时&lt;/p&gt;
&lt;p&gt;5.dispatch_group_async// 组异步&lt;/p&gt;
&lt;p&gt;6.dispatch_suspend// 挂起&lt;/p&gt;
&lt;p&gt;7.dispatch_resume// 继续&lt;/p&gt;
&lt;p&gt;8.dispatch_barrier_async//  作用是在并行队列中，等待前面的队列执行完成后在继续往下执行&lt;/p&gt;
&lt;p&gt;9.dispatch_queue_t// 队列&lt;/p&gt;
&lt;p&gt;10.dispatch_apply&lt;/p&gt;
&lt;p&gt;11.[NSThread sleepForTimeInterval:1.0]; //线程休眠,等同于sleep(1)&lt;/p&gt;
&lt;p&gt;12.dispatch_queue_t queue = dispatch_get_main_queue(); // 创建主队列&lt;/p&gt;
&lt;h3 id=&quot;4-GCD-Dispatch-Source函数&quot;&gt;&lt;a href=&quot;#4-GCD-Dispatch-Source函数&quot; class=&quot;headerlink&quot; title=&quot;4.GCD - Dispatch Source函数&quot;&gt;&lt;/a&gt;4.GCD - Dispatch Source函数&lt;/h3&gt;&lt;p&gt;1.Dispatch Source函数须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）Source 可以理解为产生事件的地方，Source 产生事件，然后 Source 的回调函数负责 处理这些事件。&lt;/li&gt;
&lt;li&gt;2）iOS 中有两种 Source，一种是 Run Loop Source ,一种是 Dispatch Source。&lt;/li&gt;
&lt;li&gt;3）在 Run Loop 中， Run Loop Source 产生事件，之后唤醒 Run Loop， Run Loop 便执行该 Source 的回调函数。&lt;/li&gt;
&lt;li&gt;4）Dispatch Source 也会产生一些特定的事件，当这些事件发生的时候，其回调的 block （响应句柄）会自动加入到 对应的 dispatch queue 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.Dispatch Source 种类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_TIMER             定时器&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_SIGNAL            接收到 UNIX 信号&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_READ              文件可读&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_WRITE             文件可写&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_VNODE             文件系统有变更&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_PROC              与进程相关的事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_MACH_SEND Mach    端口发送事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_MACH_RECV Mach    端口接收事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_DATA_ADD          用户自定义的事件－变量相加&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_DATA_OR           用户自定义的事件－变量相或&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.选择Dispatch Source还是dispatch_async？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）Dispatch Source优势是可以利用联结dispatch_source_merge_data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.Dispatch Source常用属性和方法？&lt;/p&gt;
&lt;p&gt;dispatch_source_create//创建&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-NSOperation&quot;&gt;&lt;a href=&quot;#Thread-NSOperation&quot; class=&quot;headerlink&quot; title=&quot;Thread - NSOperation&quot;&gt;&lt;/a&gt;Thread - NSOperation&lt;/h2&gt;&lt;h3 id=&quot;1-NSOperation须知？&quot;&gt;&lt;a href=&quot;#1-NSOperation须知？&quot; class=&quot;headerlink&quot; title=&quot;1.NSOperation须知？&quot;&gt;&lt;/a&gt;1.NSOperation须知？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1）NSOperation使用的优点和局限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-NSOperation使用注意？&quot;&gt;&lt;a href=&quot;#2-NSOperation使用注意？&quot; class=&quot;headerlink&quot; title=&quot;2.NSOperation使用注意？&quot;&gt;&lt;/a&gt;2.NSOperation使用注意？&lt;/h3&gt;&lt;p&gt;1.为什么在并发情况下需要自己来设定isExecuting和isFinished这两个状态量呢?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1)为什么在并发情况下需要自己来设定isExecuting和isFinished这两个状态量呢?&lt;/li&gt;
&lt;li&gt;2)因为在并发情况下系统不知道operation什么时候finished, operation里面的task一般来说是异步执行的&lt;/li&gt;
&lt;li&gt;3)也就是start函数返回了operation不一定就是finish了, 这个你自己来控制, 你什么时候将isFinished置为YES(发送相应的KVO消息), operation就什么时候完成了&lt;/li&gt;
&lt;li&gt;4)修改的方法：willChangeValueForKey  /  didChangeValueForKey&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-NSOperation常用属性和方法？&quot;&gt;&lt;a href=&quot;#3-NSOperation常用属性和方法？&quot; class=&quot;headerlink&quot; title=&quot;3.NSOperation常用属性和方法？&quot;&gt;&lt;/a&gt;3.NSOperation常用属性和方法？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-(void)start;//启动任务,默认在当前队列同步执行；当实现了start方法时，默认会执行start方法，而不执行main方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)main;//main函数执行完成后, isExecuting会被置为NO, 而isFinished则被置为YES.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addDependency:(NSOperation *)op;//依赖可以跨队列依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)removeDependency:(NSOperation *)op;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)cancel;//取消任务，GCD没有这个功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)waitUntilFinished ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addExecutionBlock:(void (^)(void))block;//参考《NSOperation【子类1：NSBlockOperation】》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(nullable instancetype)initWithTarget:(id)target selector:(SEL)sel object:(nullable id)arg;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(instancetype)initWithInvocation:(NSInvocation *)inv NS_DESIGNATED_INITIALIZER;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addOperation:(NSOperation *)op;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addOperations:(NSArray&lt;nsoperation *=&quot;&quot;&gt; *)ops waitUntilFinished:(BOOL)wait ;&lt;/nsoperation&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addOperationWithBlock:(void (^)(void))block ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)cancelAllOperations;//取消队列中所有的任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)waitUntilAllOperationsAreFinished;//阻塞当前线程直到此队列中的所有任务执行完毕&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+(nullable NSOperationQueue *)currentQueue ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+(NSOperationQueue *)mainQueue ;//获取主队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+(instancetype)blockOperationWithBlock:(void (^)(void))block;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property NSInteger maxConcurrentOperationCount;//最大并发数;用来设置最多可以让多少个任务同时执行;为 1 时为串行；主对列默认是串行队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (readonly) NSUInteger operationCount;//获取队列的任务数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (readonly, getter=isCancelled) BOOL cancelled;//取消；用KVO可以方便的监测NSOperation的状态(isExecuted, isFinished, isCancelled)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (readonly, getter=isExecuting) BOOL executing;//正在执行；因为都起了别名，所以可以通过 isExecuting 来 getter 属性值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (readonly, getter=isFinished) BOOL finished;//完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (getter=isSuspended) BOOL suspended;//暂停;[queue setSuspended:YES];是重写 set 方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;NSOperationQueuePriority&quot;&gt;&lt;a href=&quot;#NSOperationQueuePriority&quot; class=&quot;headerlink&quot; title=&quot;NSOperationQueuePriority&quot;&gt;&lt;/a&gt;NSOperationQueuePriority&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;NSOperationQueuePriorityVeryLow = -8L,&lt;/li&gt;
&lt;li&gt;NSOperationQueuePriorityLow = -4L,&lt;/li&gt;
&lt;li&gt;NSOperationQueuePriorityNormal = 0,&lt;/li&gt;
&lt;li&gt;NSOperationQueuePriorityHigh = 4,&lt;/li&gt;
&lt;li&gt;NSOperationQueuePriorityVeryHigh = 8&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;参考连接&quot;&gt;&lt;a href=&quot;#参考连接&quot; class=&quot;headerlink&quot; title=&quot;参考连接&quot;&gt;&lt;/a&gt;参考连接&lt;/h4&gt;&lt;p&gt;1.&lt;a href=&quot;http://www.jianshu.com/p/c56b614db49d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/c56b614db49d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://alex1212112.github.io/blog/2015/11/24/dispatch-source/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://alex1212112.github.io/blog/2015/11/24/dispatch-source/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Thread方案&quot;&gt;&lt;a href=&quot;#Thread方案&quot; class=&quot;headerlink&quot; title=&quot;Thread方案&quot;&gt;&lt;/a&gt;Thread方案&lt;/h2&gt;&lt;p&gt;1.NSOperation&lt;/p&gt;
&lt;p&gt;2.GCD&lt;/p&gt;
&lt;p&gt;3.NSThread&lt;/p&gt;
&lt;p&gt;4.Thread须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.xxx&lt;/li&gt;
&lt;li&gt;2.xxx&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-NSThread&quot;&gt;&lt;a href=&quot;#Thread-NSThread&quot; class=&quot;headerlink&quot; title=&quot;Thread - NSThread&quot;&gt;&lt;/a&gt;Thread - NSThread&lt;/h2&gt;&lt;p&gt;1.NSThread须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）NSThread使用的优点和局限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.NSThread使用注意？&lt;/p&gt;
&lt;p&gt;3.NSThread常用属性和方法？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-Block</title>
    <link href="williamliuwen.cn/2016/06/09/AWblog/2016/6/iOS-Block/"/>
    <id>williamliuwen.cn/2016/06/09/AWblog/2016/6/iOS-Block/</id>
    <published>2016-06-08T22:02:38.000Z</published>
    <updated>2016-08-13T13:34:41.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Block有什么用？&quot;&gt;&lt;a href=&quot;#Block有什么用？&quot; class=&quot;headerlink&quot; title=&quot;Block有什么用？&quot;&gt;&lt;/a&gt;Block有什么用？&lt;/h2&gt;&lt;p&gt;1.代替类&lt;/p&gt;
&lt;p&gt;2.什么时候代替类，当类只有一个函数的时候&lt;/p&gt;
&lt;h2 id=&quot;Block的本质？&quot;&gt;&lt;a href=&quot;#Block的本质？&quot; class=&quot;headerlink&quot; title=&quot;Block的本质？&quot;&gt;&lt;/a&gt;Block的本质？&lt;/h2&gt;&lt;p&gt;1.类和闭包的本质是一样的&lt;/p&gt;
&lt;p&gt;2.类和闭包哪个好用：答案是类&lt;/p&gt;
&lt;p&gt;3.Block的另一个名字闭包&lt;/p&gt;
&lt;p&gt;4.block、代码块、闭包，都是只一样的玩意，是一个GCC 非常模糊的特性，以及 Clang 也有的特性是&lt;/p&gt;
&lt;p&gt;5.Block是带有自动变量的匿名函数；匿名函数顾名思义就是不带名字的函数，在C语言中不允许这样的方法存在，而在OC中的Block则可以用指针来直接调用一个函数，但虽说如此我们还是需要知道指针的名称。&lt;/p&gt;
&lt;p&gt;6.自动变量在Block中的具体表现就是截获自动变量&lt;/p&gt;
&lt;h2 id=&quot;一个标准的Block&quot;&gt;&lt;a href=&quot;#一个标准的Block&quot; class=&quot;headerlink&quot; title=&quot;一个标准的Block&quot;&gt;&lt;/a&gt;一个标准的Block&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^ NSString *(NSString *a,NSString *b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* “^”这个符号表示这是一个Block；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 返回值类型：NSString *表示返回值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 参数列表：(NSString a,NSString b)这个括号中是Block的参数，语法和C语言类似&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 变量名在哪里？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Block调用&quot;&gt;&lt;a href=&quot;#Block调用&quot; class=&quot;headerlink&quot; title=&quot;Block调用&quot;&gt;&lt;/a&gt;Block调用&lt;/h2&gt;&lt;p&gt;1.Block调用1&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int b = 0;// 初始化b变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void (^blockName)() = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;Input:b=%d&amp;quot;,b);//打印b变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = 3;// 对b变量进行修改，无法修改，原因如下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blockName();// 调用blockName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;原因：虽然我们在调用blockName之前改变了b的值，但是输出的还是blockName编译时候b的值，所以截获瞬间自动变量就是：在blockName中会保存变量的值，而不会随变量的值的改变而改变。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.Block调用2&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int b = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void (^blockName)() = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这段代码编译出错，编译器提示的大概就是不能在Block中改变变量的值。因为在Block中截获了变量的瞬间值以后就不能再改变变量的值，如果想要在Block中改变变量的值，那么我们只需要在变量声明的时候加上__Block修饰符，像这样：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__block int b = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void (^blockName)() = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Block使用技巧&quot;&gt;&lt;a href=&quot;#Block使用技巧&quot; class=&quot;headerlink&quot; title=&quot;Block使用技巧&quot;&gt;&lt;/a&gt;Block使用技巧&lt;/h2&gt;&lt;p&gt;1.修改闭包内部变量注意，如果该变量在Block外部，需要在变量前面加上__block关键字&lt;/p&gt;
&lt;p&gt;2.在Block中常常会用到weakSelf和strong来处理block的产生循环引用的问题&lt;/p&gt;
&lt;p&gt;3.代码块如果在闭合的圆括号内的话，会返回最后语句的值;例子中返回的是url&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSURL *url = (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *urlString = [NSString stringWithFormat:@&amp;quot;%@/%@&amp;quot;, baseURLString, endpoint];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[NSURL URLWithString:urlString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.在Block中不可以对C语言数组进行操作，原因是：不支持&lt;/p&gt;
&lt;p&gt;5.Block可以定义在方法内部，也可以定义在方法外部；&lt;/p&gt;
&lt;p&gt;6.只有调用Block时候，才会执行其内部方法&lt;/p&gt;
&lt;h2 id=&quot;weakSelf和strongSelf&quot;&gt;&lt;a href=&quot;#weakSelf和strongSelf&quot; class=&quot;headerlink&quot; title=&quot;weakSelf和strongSelf&quot;&gt;&lt;/a&gt;weakSelf和strongSelf&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接在 block 里面使用关键词 self&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 block 外定义一个 __weak 的 引用到 self，并且在 block 里面使用这个弱引用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 block 外定义一个 &lt;strong&gt;weak 的 引用到 self，并在在 block 内部通过这个弱引用定义一个 &lt;/strong&gt;strong 的引用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意：当 block并没有被self对象所引用 时，一般可以直接使用self&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;weakSelf和strongSelf的选择是：如果block不是属性则使用self；是属性但block中调用单个self的方法时用weakSelf；多个方法用strongSelf&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用weakSelf&quot;&gt;&lt;a href=&quot;#使用weakSelf&quot; class=&quot;headerlink&quot; title=&quot;使用weakSelf&quot;&gt;&lt;/a&gt;使用weakSelf&lt;/h2&gt;&lt;p&gt;1.持有Block；completionHandler是一个Block；被self调用，那正常来说，block里面不能用self调用方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MyViewController *myController = [[MyViewController alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self presentViewController:myController animated:YES completion:self.completionHandler];// 这里是self对block持有&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.当block对象被self持有时，一定要使用weakself避免循环引用,下面的weakSelf如果换成了self就会循环引用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__weak typeof(self) weakSelf = self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.completionHandler = ^&amp;#123; // self.completionHandler表示self调用了block，block里面又使用self，用weakSelf替换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, weakSelf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.来一个没有使用weakSelf导致运行循环的例子&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self executeBlock:^(NSData *data, NSError *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self doSomethingWithData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用strongSelf&quot;&gt;&lt;a href=&quot;#使用strongSelf&quot; class=&quot;headerlink&quot; title=&quot;使用strongSelf&quot;&gt;&lt;/a&gt;使用strongSelf&lt;/h2&gt;&lt;p&gt;1.参考《解决Block循环引用》&lt;/p&gt;
&lt;p&gt;2.什么时候使用weakSelf和strongSelf：参考《weakSelf和strongSelf》&lt;/p&gt;
&lt;p&gt;3.多个方法用strongSelf&lt;/p&gt;
&lt;h2 id=&quot;解决Block循环引用&quot;&gt;&lt;a href=&quot;#解决Block循环引用&quot; class=&quot;headerlink&quot; title=&quot;解决Block循环引用&quot;&gt;&lt;/a&gt;解决Block循环引用&lt;/h2&gt;&lt;p&gt;1.什么时候会出现循环引用？简单来说就是双边引用, 如果block是self类的property (此时self已经retain了block), 然后在block内又引用了self, 这个情况下就肯定会循环引用了&lt;/p&gt;
&lt;p&gt;2.在block体内define一个strong的self, 然后执行的时候判断下self是否还在, 如果在就继续执行下面的操作, 否则return或抛出异常.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__weak typeof(self) weakSelf = self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myObj.myBlock =  ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__strong typeof(self) strongSelf = weakSelf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (strongSelf) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[strongSelf doSomething]; // strongSelf != nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// preemption, strongSelf still not nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[strongSelf doSomethingElse]; // strongSelf != nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Probably nothing...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.来一个使用strongSelf错误的例子,因为block里面调用了多个方法，所以建议用strongSelf&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__weak __typeof(self)weakSelf = self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self executeBlock:^(NSData *data, NSError *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[weakSelf doSomethingWithData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[weakSelf doSomethingWithData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;1.weakSelf和strongSelf的选择是：如果block不是属性则使用self；是属性但block中调用单个self的方法时用weakSelf；多个方法用strongSelf&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Block有什么用？&quot;&gt;&lt;a href=&quot;#Block有什么用？&quot; class=&quot;headerlink&quot; title=&quot;Block有什么用？&quot;&gt;&lt;/a&gt;Block有什么用？&lt;/h2&gt;&lt;p&gt;1.代替类&lt;/p&gt;
&lt;p&gt;2.什么时候代替类，当类只有一个函数的时候&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS分类/协议/扩展/代理/数据源</title>
    <link href="williamliuwen.cn/2016/06/04/AWblog/2016/6/iOS%E5%88%86%E7%B1%BB-%E5%8D%8F%E8%AE%AE-%E6%89%A9%E5%B1%95-%E4%BB%A3%E7%90%86-%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>williamliuwen.cn/2016/06/04/AWblog/2016/6/iOS分类-协议-扩展-代理-数据源/</id>
    <published>2016-06-04T12:37:24.000Z</published>
    <updated>2016-08-13T13:34:53.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;1.分类原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分类可以访问原类中的成员变量，但是在分类不能添加任何变量。若需要添加变量可以考虑创建子类&lt;/li&gt;
&lt;li&gt;分类中的方法名可以与原类的某个方法名相同（即重载），但是原类的同名方法将失效，不能访问&lt;/li&gt;
&lt;li&gt;通过分类添加的方法是可以被子类继承的&lt;/li&gt;
&lt;li&gt;不必实现分类的所有方法。可以在分类中声明所有的方法，但不实现，在需要的时候再去实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;4.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;协议&quot;&gt;&lt;a href=&quot;#协议&quot; class=&quot;headerlink&quot; title=&quot;协议&quot;&gt;&lt;/a&gt;协议&lt;/h2&gt;&lt;p&gt;1.协议的原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现此协议的类必须实现对应的方法&lt;/li&gt;
&lt;li&gt;协议中方法是否必须实现，通过关键字进行@required和@optional进行设置&lt;/li&gt;
&lt;li&gt;如果不设置则默认是@required（注意ObjC是弱语法，即使不实现必选方法编译运行也不会报错）&lt;/li&gt;
&lt;li&gt;一个类可以同时实现多个协议，中间通过逗号分隔&lt;/li&gt;
&lt;li&gt;协议的实现只能在类的声明上,不能放到类的实现上（也就是说必须写成@interface Person:NSObject&lt;animaldelegate&gt;而不能写成@implementation Person&lt;animaldelegate&gt;）&lt;/animaldelegate&gt;&lt;/animaldelegate&gt;&lt;/li&gt;
&lt;li&gt;协议中不能定义属性、成员变量等,只能定义方法&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.例如定义一个动物协议，其中有吃的方法；人对象实现这个动物这个协议，不要遵守动物的方法；&lt;/p&gt;
&lt;p&gt;3.代理模式的出现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事实上在ObjC中协议的更多作用是用于约束一个类必须实现某些方法，而从面向对象的角度而言这个类跟接口并不一定存在某种自然关系，可能是两个完全不同意义上的事物,这种模式我们称之为代理模式（Delegation）。在Cocoa框架中大量采用这种模式实现数据和UI的分离，而且基本上所有的协议都是以Delegate结尾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.协议和代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议和代理是模块化开发和封装的产物&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.模块间通信（举例）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大厨类只做菜 但是菜做好了怎么办，必须及时的上菜，让顾客享用。但是大厨自己不能上菜，所以大厨必须抛出菜做好了的信号，具体这个菜上不上，怎么上，就不是大厨关心的了&lt;/li&gt;
&lt;li&gt;这里的喊一声就实现了通信（抽象点就是用协议）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;// 第一步：大厨把菜做好了，通知自己的代理把菜拿走&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DaChu.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@protocol DaChuDelegate &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)doSomethingAftercaiZuohaole;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface DaChu : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*  delegate 是dachu类的一个属性，weak 关键字是为了避免循环引用，&amp;lt;DaChuDelegate&amp;gt;表示遵守DaChuDelegate协议&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*  更加直白点：在大厨心里有一个人接受他的菜好了的信号去做一些事情，具体这个人是谁，大厨不关心，这个人的代号是delegate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, weak) id &amp;lt;DaChuDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)kaiShiZuoCai;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Dachu.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DaChu.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation DaChu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)kaiShiZuoCai&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;开始做菜&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sleep(2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;做好菜了，该上菜了&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//下面这句是判断 一下delegate是否实现了doSomethingAftercaiZuohaole方法，如果delegate没有实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//直接[self.delegate doSomethingAftercaiZuohaole];会crash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ([self.delegate respondsToSelector:@selector(doSomethingAftercaiZuohaole)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.delegate doSomethingAftercaiZuohaole];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;// 第二步：代理小二遵守大厨的拿菜方法，等大厨通知，把菜拿走&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;XiaoEr.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;DaChu.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface XiaoEr ()&amp;lt;DaChuDelegate&amp;gt;//&amp;lt;DaChuDelegate&amp;gt;表示遵守DaChuDelegate协议，并且实现协议里面的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation XiaoEr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)XiaoErZhunBei&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DaChu *dachu1 = [[DaChu alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dachu1.delegate = self;//说明小二充当代理的角色，负责接收菜好了的信号。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[dachu1 kaiShiZuoCai];//大厨开始做菜&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)doSomethingAftercaiZuohaole&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;小二知道了&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;6.分类也可以遵守协议&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface Person(chinaPerson) &amp;lt;NSCopying,NSCoding&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明Person类拥有一个分类chinaPerson，这个分类遵守NSCopying 和NSCoding协议&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;7.定义协议的类和遵守协议的类之间不存在自然关系&lt;/p&gt;
&lt;p&gt;8.协议真正的作用是约束一个类必须实现某些方法；&lt;br&gt;就是说定义协议的类A是用来约束另一个遵守协议的类B必须实现某些方法；&lt;br&gt;并且类A和类B通常不存在关系；可能类A和类B是两个完全不同意义上的东西；&lt;br&gt;而我们把类A和类B这种关系模式称为“代理关系模式”；而“代理关系模式”大量&lt;br&gt;应用在Cocoa框架中，主要解决数据和UI的分离；&lt;/p&gt;
&lt;p&gt;9.按钮点击–&amp;gt;事件机制（非OC语言）&lt;/p&gt;
&lt;p&gt;满足事件机制条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者订阅了点击事件&lt;/li&gt;
&lt;li&gt;点击的时候会触发这个事件&lt;/li&gt;
&lt;li&gt;OC中没有事件定义，用“代理关系模式”代替&lt;/li&gt;
&lt;li&gt;首先在按钮中，定义按钮的代理，同时使用协议约束这个代理&lt;/li&gt;
&lt;li&gt;（事件的触发者 = 点击按钮的）必须实现协议中的某些方法；&lt;/li&gt;
&lt;li&gt;实现方法的过程中，按钮的处理流程是：&lt;/li&gt;
&lt;li&gt;先检查代理是否实现了按钮定义的协议方法，如果实现了，则调用&lt;/li&gt;
&lt;li&gt;MyListener作为事件触发者，它实现了KCButtonDelegate代理&lt;/li&gt;
&lt;li&gt;事件触发者 = 代理&lt;/li&gt;
&lt;li&gt;使用respondsToSelector方法可以判断一个对象是否实现了某个方法（需要注意方法名不是”onClick”而是“onClick:”，冒号也是方法名的一部分）；&lt;/li&gt;
&lt;li&gt;看下面例子&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10.例子代码解析&lt;/p&gt;
&lt;p&gt;1）@property (nonatomic,retain) id&lt;kcbuttondelegate&gt; delegate;&lt;br&gt;//id可以表示任何一个ObjC对象类型，类型后面的”&amp;lt;协议名&amp;gt;“用于约束作为&lt;br&gt;这个属性的对象必须实现该协议(注意：使用id定义的对象类型不需要加“*”)；&lt;/kcbuttondelegate&gt;&lt;/p&gt;
&lt;p&gt;11.@class或@protocol&lt;/p&gt;
&lt;p&gt;1）在.h文件中如果使用了另一个文件的类或协议我们可以通过@class或者@protocol进行声明，&lt;br&gt;而不必导入这个文件，这样可以提高编译效率（注意有些情况必须使用@class或@protocol，&lt;br&gt;例如上面KCButton.h中上面声明的KCButtonDelegate协议中用到了KCButton类，&lt;br&gt;而此文件下方的KCButton类声明中又使用了KCButtonDelegate，&lt;br&gt;从而形成在一个文件中互相引用关系，此时必须使用@class或者@protocol声明，&lt;br&gt;否则编译阶段会报错），但是在.m文件中则必须导入对应的类声明文件或协议文件&lt;br&gt;（如果不导入虽然语法检查可以通过但是编译链接会报错）；&lt;/p&gt;
&lt;p&gt;12.一个协议类，一个遵守协议类；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个类定义了一个相同的协议，可以把这个协议抽出来&lt;/li&gt;
&lt;li&gt;能不能把全部东西都抽出来不留任何东西，目前要保留@property(atomic) id&lt;xxdelegate&gt; delegate;&lt;/xxdelegate&gt;&lt;/li&gt;
&lt;li&gt;方法可以抽出来&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KCButton.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@class KCButton;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//一个协议可以扩展另一个协议，例如KCButtonDelegate扩展了NSObject协议&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@protocol KCButtonDelegate &amp;lt;NSObject&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@required                              //@required修饰的方法必须实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)onClick:(KCButton *)button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@optional                             //@optional修饰的方法是可选实现的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)onMouseover:(KCButton *)button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)onMouseout:(KCButton *)button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface KCButton : NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//代理属性，同时约定作为代理的对象必须实现KCButtonDelegate协议&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,retain) id&amp;lt;KCButtonDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//点击方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)click;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KCButton.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;KCButton.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation KCButton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)click&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;Invoke KCButton&amp;apos;s click method.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//判断_delegate实例是否实现了onClick:方法（注意方法名是&amp;quot;onClick:&amp;quot;,后面有个:）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//避免未实现ButtonDelegate的类也作为KCButton的监听&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if([_delegate respondsToSelector:@selector(onClick:)])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_delegate onClick:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MyListener.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@class KCButton;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@protocol KCButtonDelegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface MyListener : NSObject&amp;lt;KCButtonDelegate&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)onClick:(KCButton *)button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MyListener.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;MyListener.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;KCButton.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation MyListener&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)onClick:(KCButton *)button&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;Invoke MyListener&amp;apos;s onClick method.The button is:%@.&amp;quot;,button);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;KCButton.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;MyListener.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int main(int argc, const char * argv[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@autoreleasepool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KCButton *button=[[KCButton alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MyListener *listener=[[MyListener alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//button的delegate属性对象是id任意类型；把listener赋值给它，那listener必须遵守delegate属性规定的协议；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;button.delegate=listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[button click];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* 结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Invoke KCButton&amp;apos;s click method.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Invoke MyListener&amp;apos;s onClick method.The button is:&amp;lt;KCButton: 0x1001034c0&amp;gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h2&gt;&lt;p&gt;1.&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;h6 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h6&gt;&lt;p&gt;1.&lt;a href=&quot;http://blog.csdn.net/jianxin160/article/details/47753189&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/jianxin160/article/details/47753189&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://www.cnblogs.com/iyou/p/3636848.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/iyou/p/3636848.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;4.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;1.分类原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分类可以访问原类中的成员变量，但是在分类不能添加任何变量。若需要添加变量可以考虑创建子类&lt;/li&gt;
&lt;li&gt;分类中的方法名可以与原类的某个方法名相同（即重载），但是原类的同名方法将失效，不能访问&lt;/li&gt;
&lt;li&gt;通过分类添加的方法是可以被子类继承的&lt;/li&gt;
&lt;li&gt;不必实现分类的所有方法。可以在分类中声明所有的方法，但不实现，在需要的时候再去实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;4.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS最佳实践</title>
    <link href="williamliuwen.cn/2016/06/03/AWblog/2016/6/iOS%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>williamliuwen.cn/2016/06/03/AWblog/2016/6/iOS最佳实践/</id>
    <published>2016-06-03T13:19:56.000Z</published>
    <updated>2016-08-13T13:35:19.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo 部署</title>
    <link href="williamliuwen.cn/2016/04/23/AWblog/2016/4/hexo-%E9%83%A8%E7%BD%B2/"/>
    <id>williamliuwen.cn/2016/04/23/AWblog/2016/4/hexo-部署/</id>
    <published>2016-04-23T02:53:57.000Z</published>
    <updated>2016-08-13T13:32:49.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;部署hexo前提准备&quot;&gt;&lt;a href=&quot;#部署hexo前提准备&quot; class=&quot;headerlink&quot; title=&quot;部署hexo前提准备&quot;&gt;&lt;/a&gt;部署hexo前提准备&lt;/h4&gt;&lt;p&gt;1.到node.js 网站 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org/en/&lt;/a&gt;  下载node.js 直接安装，安装完，查看版本 ，node -v&lt;/p&gt;
&lt;p&gt;2.到homebrew 网站  &lt;a href=&quot;http://brew.sh/index_zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://brew.sh/index_zh-cn.html&lt;/a&gt; 使用下面的命令安装,如果安装失败，使用sudo&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;开始部署hexo&quot;&gt;&lt;a href=&quot;#开始部署hexo&quot; class=&quot;headerlink&quot; title=&quot;开始部署hexo&quot;&gt;&lt;/a&gt;开始部署hexo&lt;/h4&gt;&lt;p&gt;1.使用下面的命令，一条一条来，如果不行，用sudo&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.直接访问本地部署好的hexo&lt;/p&gt;
&lt;h4 id=&quot;利用hexo发布文章&quot;&gt;&lt;a href=&quot;#利用hexo发布文章&quot; class=&quot;headerlink&quot; title=&quot;利用hexo发布文章&quot;&gt;&lt;/a&gt;利用hexo发布文章&lt;/h4&gt;&lt;p&gt;1.新建文章，先进入hexo文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new &amp;quot;新文章&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.写好文章后，生成静态文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.生成静态文件后，上传到github&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;hexo技巧&quot;&gt;&lt;a href=&quot;#hexo技巧&quot; class=&quot;headerlink&quot; title=&quot;hexo技巧&quot;&gt;&lt;/a&gt;hexo技巧&lt;/h4&gt;&lt;p&gt;1.因为hexo生成的静态文件是放在public文件夹下面的，如果你部署github的时候，使用的git destop版本来上传代码的话，你可以clone你的git下来的时候，clone到hexo文件下，且改名为public，那么下次hexo生成静态文件的时候就会直接生成到clone下来的git文件夹里面，那你用git desktop上传代码的时候，就可以直接commit上传了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;部署hexo前提准备&quot;&gt;&lt;a href=&quot;#部署hexo前提准备&quot; class=&quot;headerlink&quot; title=&quot;部署hexo前提准备&quot;&gt;&lt;/a&gt;部署hexo前提准备&lt;/h4&gt;&lt;p&gt;1.到node.js 网站 &lt;a href=&quot;https://nodejs.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-AddressBook/AddressBookUI/Contacts</title>
    <link href="williamliuwen.cn/2016/04/12/AWblog/2016/4/iOS-AddressBook-AddressBookUI-Contacts/"/>
    <id>williamliuwen.cn/2016/04/12/AWblog/2016/4/iOS-AddressBook-AddressBookUI-Contacts/</id>
    <published>2016-04-12T12:18:04.000Z</published>
    <updated>2016-08-13T13:33:17.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;读取手机通讯录一共经历了几个版本的API&quot;&gt;&lt;a href=&quot;#读取手机通讯录一共经历了几个版本的API&quot; class=&quot;headerlink&quot; title=&quot;读取手机通讯录一共经历了几个版本的API&quot;&gt;&lt;/a&gt;读取手机通讯录一共经历了几个版本的API&lt;/h2&gt;&lt;p&gt;1.AddressBook.Framework&lt;/p&gt;
&lt;p&gt;2.AddressBookUI.Framework&lt;/p&gt;
&lt;p&gt;3.Contacts.Framework&lt;/p&gt;
&lt;h2 id=&quot;ABAddressBook基本知识&quot;&gt;&lt;a href=&quot;#ABAddressBook基本知识&quot; class=&quot;headerlink&quot; title=&quot;ABAddressBook基本知识&quot;&gt;&lt;/a&gt;ABAddressBook基本知识&lt;/h2&gt;&lt;p&gt;1.ABAddressBookRef&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addressBook是通讯录对象，要查找通讯录，必须通过这个对象，所以每次调用手机的通讯录都要先创建这个对象，然后去赋值通讯录的信息，显示在你的table上面；通过该对象开发人员不用过多的关注通讯录的存储方式，可以直接以透明的方式去访问、保存（在使用AddressBook.framework操作联系人时，所有的增加、删除、修改后都必须执行保存操作，类似于Core Data）等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.ABRecordCopyValue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ABRecordCopyValue用来addressbook里面的各种属性，单值属性，多值属性；&lt;/li&gt;
&lt;li&gt;CFTypeRef ABRecordCopyValue (ABRecordRef record,ABPropertyID property);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.ABRecordRef&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是记录对象，代表一个通用的记录对象，可以是一条联系人信息，也可以是一个群组，可以通过ABRecordGetRecordType()函数获得具体类型。如果作为联系人（事实上也经常使用它作为联系人），那么这个记录记录了一个完整的联系人信息（姓名、性别、电话、邮件等），每条记录都有一个唯一的ID标示这条记录（可以通过ABRecordGetRecordID()函数获得）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.ABPropertyID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ABPropertyID是属性ID，就是上面的常量kABPersonFirstNameProperty等。返回值类型是CFTypeRef，它是Core Foundation类型的“泛型”，可以代表任何的Core Foundation类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.CFRelease&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CFRelease函数就是相当于Foundation框架中的release（或autorelease）方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6.CFBridgingRelease&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CFBridgingRelease函数实现的是Core Foundation类型到Foundation类型转化并把对象所有权转让ARC（自动管理引用计数），因此不需要释放属性listContacts对应的成员变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;7.CFBridgingRetain&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CFBridgingRetain 把NSString类型转换为CFString类型，实现的是Foundation类型到Core Foundation类型转化, 并把对象所有权转让调用者，因此需要释放这个对象，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;8.ABMultiValueRef&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ABMultiValueRef是多值属性访问返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;9.ABMultiValueCopyArrayOfAllValues&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用ABMultiValueCopyArrayOfAllValues函数从ABMultiValueRef对象中获取数组CFArrayRef集合；就相当于取单值属性时一样，使用aABRecordCopyVlue从ABRecordRef中获取数组；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10.AddressBook授权状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kABAuthorizationStatusNotDetermined = 0,    // 未进行授权选择&lt;/li&gt;
&lt;li&gt;kABAuthorizationStatusRestricted,           // 未授权，且用户无法更新，如家长控制情况下&lt;/li&gt;
&lt;li&gt;kABAuthorizationStatusDenied,               // 用户拒绝App使用&lt;/li&gt;
&lt;li&gt;kABAuthorizationStatusAuthorized            // 已授权，可使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;11.当我们需要访问手机通讯录的时候，需要用到框架：AddressBook.framework；由于iOS的权限设计，开发人员是不允许直接访问通讯录数据库的，必须依靠AddressBook提供的标准API来实现通讯录操作。&lt;/p&gt;
&lt;p&gt;12.ABPersonRef&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代表联系人信息，很少直接使用，实际开发过程中通常会使用类型为“kABPersonType”的ABRecordRef来表示联系人（由此可见ABPersonRef其实是一种类型为“kABPersonType”的ABRecordRef）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;13.ABGroupRef&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代表群组，与ABPersonRef类似，很少直接使用ABGroupRef，而是使用类型为“kABGroupType”的ABRecordRef来表示群组，一个群组可以包含多个联系人，一个联系人也同样可以多个群组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;14.常用的操作通讯录记录的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ABPersonCreate():创建一个类型为“kABPersonType”的ABRecordRef。&lt;/li&gt;
&lt;li&gt;ABRecordCopyValue():取得指定属性的值。&lt;/li&gt;
&lt;li&gt;ABRecordCopyCompositeName():取得联系人（或群组）的复合信息（对于联系人则包括：姓、名、公司等信息，对于群组则返回组名称）。&lt;/li&gt;
&lt;li&gt;ABRecordSetValue():设置ABRecordRef的属性值。注意在设置ABRecordRef的值时又分为单值属性和多值属性：单值属性设置只要通过ABRecordSetValue()方法指定属性名和值即可；多值属性则要先通过创建一个ABMutableMultiValueRef类型的变量，然后通过ABMultiValueAddValueAndLabel()方法依次添加属性值，最后通过ABRecordSetValue()方法将ABMutableMultiValueRef类型的变量设置为记录值。&lt;/li&gt;
&lt;li&gt;ABRecordRemoveValue():删除指定的属性值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;15.通讯录的访问步骤一般如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用ABAddressBookCreateWithOptions()方法创建通讯录对象ABAddressBookRef。&lt;/li&gt;
&lt;li&gt;调用ABAddressBookRequestAccessWithCompletion()方法获得用户授权访问通讯录。&lt;/li&gt;
&lt;li&gt;调用ABAddressBookCopyArrayOfAllPeople()、ABAddressBookCopyPeopleWithName()方法查询联系人信息。&lt;/li&gt;
&lt;li&gt;读取联系人后如果要显示联系人信息则可以调用ABRecord相关方法读取相应的数据；如果要进行修改联系人信息，则可以使用对应的方法修改ABRecord信息，然后调用ABAddressBookSave()方法提交修改；如果要删除联系人，则可以调用ABAddressBookRemoveRecord()方法删除，然后调用ABAddressBookSave()提交修改操作。&lt;/li&gt;
&lt;li&gt;也就是说如果要修改或者删除都需要首先查询对应的联系人，然后修改或删除后提交更改。如果用户要增加一个联系人则不用进行查询，直接调用ABPersonCreate()方法创建一个ABRecord然后设置具体的属性，调用ABAddressBookAddRecord方法添加即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h6&gt;&lt;p&gt;1.&lt;a href=&quot;http://www.cnblogs.com/kenshincui/p/4220402.html#contact&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/kenshincui/p/4220402.html#contact&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;读取手机通讯录一共经历了几个版本的API&quot;&gt;&lt;a href=&quot;#读取手机通讯录一共经历了几个版本的API&quot; class=&quot;headerlink&quot; title=&quot;读取手机通讯录一共经历了几个版本的API&quot;&gt;&lt;/a&gt;读取手机通讯录一共经历了几个版本的API&lt;/h2&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-Delegate</title>
    <link href="williamliuwen.cn/2016/04/10/AWblog/2016/4/iOS-Delegate/"/>
    <id>williamliuwen.cn/2016/04/10/AWblog/2016/4/iOS-Delegate/</id>
    <published>2016-04-10T14:31:01.000Z</published>
    <updated>2016-08-13T14:09:03.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;代理基本理解&quot;&gt;&lt;a href=&quot;#代理基本理解&quot; class=&quot;headerlink&quot; title=&quot;代理基本理解&quot;&gt;&lt;/a&gt;代理基本理解&lt;/h2&gt;&lt;p&gt;1.Delegate的使用场合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象A内部发生了一些事情,想通知对象B **&lt;/li&gt;
&lt;li&gt;对象B想监听对象A内部发生了什么事情&lt;/li&gt;
&lt;li&gt;对象A想在自己的方法内部调用对象B的某个方法,并且对象A不能对对象B有耦合依赖&lt;/li&gt;
&lt;li&gt;对象A想传递数据给对象B&lt;/li&gt;
&lt;li&gt;以上情况,结果都一样:对象B是对象A的代理(delegate)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.使用delegate的步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;先搞清楚谁是谁的代理(delegate)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;定义代理协议,协议名称的命名规范:控件类名 + Delegate&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;定义代理方法 代理方法一般都定义为@optional&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;代理方法名都以控件名开头&lt;/li&gt;
&lt;li&gt;代理方法至少有1个参数,将控件本身传递出去&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;设置代理(delegate)对象  (比如myView.delegate = xxxx;) 代理对象遵守协议&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;代理对象实现协议里面该实现的方法&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;在恰当的时刻调用代理对象(delegate)的代理方法,通知代理发生了什么事情(在调用之前判断代理是否实现了该代理方法)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.代理传值核心原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值由我来提供给代理显示；&lt;/li&gt;
&lt;li&gt;或者值由我来提供给代理用；&lt;/li&gt;
&lt;li&gt;代理会遵守我定义的协议，我的协议内容就是一个方法；&lt;/li&gt;
&lt;li&gt;我的协议方法里面会有一个参数，就是使用这个方法必须传入一个参数；&lt;/li&gt;
&lt;li&gt;参数是我来提供，方法有代理来实现；&lt;/li&gt;
&lt;li&gt;过程是：我通知代理来实现由我给参数的方法，参数我提供给你，看你自己怎么用了；这就是代理传值的核心原理&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代理基本理解&quot;&gt;&lt;a href=&quot;#代理基本理解&quot; class=&quot;headerlink&quot; title=&quot;代理基本理解&quot;&gt;&lt;/a&gt;代理基本理解&lt;/h2&gt;&lt;p&gt;1.Delegate的使用场合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象A内部发生了一些事情,想通知对象B **&lt;/l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-Tips</title>
    <link href="williamliuwen.cn/2016/04/04/AWblog/2016/4/iOS-Tips/"/>
    <id>williamliuwen.cn/2016/04/04/AWblog/2016/4/iOS-Tips/</id>
    <published>2016-04-04T11:53:15.000Z</published>
    <updated>2016-08-13T13:33:24.000Z</updated>
    
    <content type="html">&lt;h6 id=&quot;Tip1-隐藏状态栏&quot;&gt;&lt;a href=&quot;#Tip1-隐藏状态栏&quot; class=&quot;headerlink&quot; title=&quot;Tip1 隐藏状态栏&quot;&gt;&lt;/a&gt;Tip1 隐藏状态栏&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)prefersStatusBarHidden&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return  YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip2-设置与状态栏间距（没有导航栏）&quot;&gt;&lt;a href=&quot;#Tip2-设置与状态栏间距（没有导航栏）&quot; class=&quot;headerlink&quot; title=&quot;Tip2 设置与状态栏间距（没有导航栏）&quot;&gt;&lt;/a&gt;Tip2 设置与状态栏间距（没有导航栏）&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If you are doing thins programatically and are using a UITableViewController without a UINavigationController your best bet is to do the following in viewDidLoad:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The UITableViewController will still scroll behind the status bar but won&amp;apos;t be under it when scrolled to the top.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.tableView.contentInset = UIEdgeInsetsMake(20.0f,0.0f,0.0f,0.0f);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip3-修改状态栏颜色&quot;&gt;&lt;a href=&quot;#Tip3-修改状态栏颜色&quot; class=&quot;headerlink&quot; title=&quot;Tip3 修改状态栏颜色&quot;&gt;&lt;/a&gt;Tip3 修改状态栏颜色&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一步：在info.plist中添加一个字段：UIViewControllerBasedStatusBarAppearance 设置值为 NO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二步，设置状态栏颜色为白色:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIApplication.sharedApplication().statusBarStyle = UIStatusBarStyle.LightContent&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h6 id=&quot;Tip4-快速设置UIWindows根控制器&quot;&gt;&lt;a href=&quot;#Tip4-快速设置UIWindows根控制器&quot; class=&quot;headerlink&quot; title=&quot;Tip4 快速设置UIWindows根控制器&quot;&gt;&lt;/a&gt;Tip4 快速设置UIWindows根控制器&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DefineTabBarController *tabBarVc = [[DefineTabBarController alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.window.rootViewController = tabBarVc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.window makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip5-修改APP显示名称&quot;&gt;&lt;a href=&quot;#Tip5-修改APP显示名称&quot; class=&quot;headerlink&quot; title=&quot;Tip5 修改APP显示名称&quot;&gt;&lt;/a&gt;Tip5 修改APP显示名称&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;Bundle name           - 简单来说就是App安装到iOS机子里的App文件夹名&lt;/li&gt;
&lt;li&gt;Executable name       –  执行程序名,默认与PRODUCT_NAME一致&lt;/li&gt;
&lt;li&gt;Bundle display name   –  真正显示到用户屏幕上的App名称&lt;h6 id=&quot;Tip6-逻辑删除代码比注释代码好&quot;&gt;&lt;a href=&quot;#Tip6-逻辑删除代码比注释代码好&quot; class=&quot;headerlink&quot; title=&quot;Tip6 逻辑删除代码比注释代码好&quot;&gt;&lt;/a&gt;Tip6 逻辑删除代码比注释代码好&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#if 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//CODE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;Tip6-设置应用间跳转：A应用–-gt-B应用&quot;&gt;&lt;a href=&quot;#Tip6-设置应用间跳转：A应用–-gt-B应用&quot; class=&quot;headerlink&quot; title=&quot;Tip6 设置应用间跳转：A应用–&amp;gt;B应用&quot;&gt;&lt;/a&gt;Tip6 设置应用间跳转：A应用–&amp;gt;B应用&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@&amp;quot;%@BundleID&amp;quot;, UIApplicationOpenSettingsURLString]]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip7-iOS监听亮屏灭屏代码&quot;&gt;&lt;a href=&quot;#Tip7-iOS监听亮屏灭屏代码&quot; class=&quot;headerlink&quot; title=&quot;Tip7 iOS监听亮屏灭屏代码&quot;&gt;&lt;/a&gt;Tip7 iOS监听亮屏灭屏代码&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)registerAppforDetectBrightState &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int notify_token;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    notify_register_dispatch(&amp;quot;com.apple.springboard.hasBlankedScreen&amp;quot;,&amp;amp;notify_token,dispatch_get_main_queue(), ^(int token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint64_t state = UINT64_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    notify_get_state(token, &amp;amp;state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(state == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NSLog(@&amp;quot;亮屏&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // do what you want to do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NSLog(@&amp;quot;灭屏&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // do what you want to do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip8-iOS获取手机版本&quot;&gt;&lt;a href=&quot;#Tip8-iOS获取手机版本&quot; class=&quot;headerlink&quot; title=&quot;Tip8 iOS获取手机版本&quot;&gt;&lt;/a&gt;Tip8 iOS获取手机版本&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define iOS8 ([[UIDevice currentDevice].systemVersion floatValue] &amp;gt;= 8.0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip9-TableViewCell重用代码&quot;&gt;&lt;a href=&quot;#Tip9-TableViewCell重用代码&quot; class=&quot;headerlink&quot; title=&quot;Tip9 TableViewCell重用代码&quot;&gt;&lt;/a&gt;Tip9 TableViewCell重用代码&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static NSString * cellIdentifer = @&amp;quot;cell&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UITableViewCell * cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (cell == nil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cell.textLabel.text = array[indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return cell;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip10-多线程同步问题&quot;&gt;&lt;a href=&quot;#Tip10-多线程同步问题&quot; class=&quot;headerlink&quot; title=&quot;Tip10 多线程同步问题&quot;&gt;&lt;/a&gt;Tip10 多线程同步问题&lt;/h6&gt;&lt;p&gt;1.对于数据源或model类一定要注意多线程同时访问的情况&lt;/p&gt;
&lt;h6 id=&quot;Tip11-移除Observer&quot;&gt;&lt;a href=&quot;#Tip11-移除Observer&quot; class=&quot;headerlink&quot; title=&quot;Tip11 移除Observer&quot;&gt;&lt;/a&gt;Tip11 移除Observer&lt;/h6&gt;&lt;p&gt;1.现在的代码里面很多需要用到Observer, 根据被观察对象的状态来相应的Update UI或者执行某个操作. 注册observer很简单, 但是移除的时候就出问题了, 要么是忘记移除observer了, 要么是移除的时机不对. 如果某个被观察对象已经被释放了, observer还在, 那结果只能是crash了, 所以切记至少在dealloc里面移除一下observer&lt;/p&gt;
&lt;h6 id=&quot;Tip12-NSArray-NSDictionary成员的判空保护&quot;&gt;&lt;a href=&quot;#Tip12-NSArray-NSDictionary成员的判空保护&quot; class=&quot;headerlink&quot; title=&quot;Tip12 NSArray, NSDictionary成员的判空保护&quot;&gt;&lt;/a&gt;Tip12 NSArray, NSDictionary成员的判空保护&lt;/h6&gt;&lt;p&gt;1.在addObject或insertObject到NSArray或者NSDictionary时最好加一下判空保护, 尤其是网络相关的逻辑, 如果网络返回为空(jason解析出来为空), 但你还是毅然决然的add到array里面&lt;/p&gt;
&lt;h6 id=&quot;Tip13-单例代码块&quot;&gt;&lt;a href=&quot;#Tip13-单例代码块&quot; class=&quot;headerlink&quot; title=&quot;Tip13 单例代码块&quot;&gt;&lt;/a&gt;Tip13 单例代码块&lt;/h6&gt;&lt;p&gt;1.单例代码块a–初始化属性比较多的情况&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)shareInstance &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // dispatch_once_t表示只执行一次&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static AppNetworkingClient *_instance = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static dispatch_once_t onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_once(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 初始化属性比较多，还可以更多，只要是一次性的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _instance = [[AppNetworkingClient alloc] initWithBaseURL:[NSURL URLWithString:baseUrlString]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _instance.securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _instance.requestSerializer.timeoutInterval = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return _instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.单例代码块b–初始化属性少的情况&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype *)shareInstance &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static AccountManager *_instance = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // predicate和上面例子中的onceToken一个作用，可以自由替换，不是常量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static dispatch_once_t predicate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_once(&amp;amp;predicate, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _instance = [[self alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return _instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip14-僵尸模式&quot;&gt;&lt;a href=&quot;#Tip14-僵尸模式&quot; class=&quot;headerlink&quot; title=&quot;Tip14 僵尸模式&quot;&gt;&lt;/a&gt;Tip14 僵尸模式&lt;/h6&gt;&lt;p&gt;1.NSZombie僵尸，僵尸对象；&lt;/p&gt;
&lt;p&gt;2.僵尸模式：NSZombieEnable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;僵尸模式的作用是：用来接收错误信息（错误信息可以指一个错误的内存访问就会变成一条无法识别的消息,这条无法识别的信息就是错误信息）&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;Tip15-优化加载图片&quot;&gt;&lt;a href=&quot;#Tip15-优化加载图片&quot; class=&quot;headerlink&quot; title=&quot;Tip15 优化加载图片&quot;&gt;&lt;/a&gt;Tip15 优化加载图片&lt;/h6&gt;&lt;p&gt;1.imageWithContentsOfFile则仅只加载图片,不缓存；&lt;/p&gt;
&lt;p&gt;2.imageNamed默认加载图片成功后会内存中缓存图片&lt;/p&gt;
&lt;p&gt;3.最佳实践是：当应用程序需要加载一张比较大的图片并且使用一次性，那么其实是没有必要去缓存这个图片的，用imageWithContentsOfFile是最为经济的方式,这样不会因为UIImage元素较多情况下，CPU会被逐个分散在不必要缓存上浪费过多时间&lt;/p&gt;
&lt;h6 id=&quot;Tip16-优化viewWillAppear&quot;&gt;&lt;a href=&quot;#Tip16-优化viewWillAppear&quot; class=&quot;headerlink&quot; title=&quot;Tip16 优化viewWillAppear&quot;&gt;&lt;/a&gt;Tip16 优化viewWillAppear&lt;/h6&gt;&lt;p&gt;1.在这个方法中不要处理复杂费时的事情&lt;/p&gt;
&lt;p&gt;2.只应该在这个方法设置 view 的显示属性之类的简单事情，比如背景色，字体等。不然，用户会明显感觉到 view 显示迟钝.&lt;/p&gt;
&lt;h6 id=&quot;Tip16-Lifecycle代码块&quot;&gt;&lt;a href=&quot;#Tip16-Lifecycle代码块&quot; class=&quot;headerlink&quot; title=&quot;Tip16 Lifecycle代码块&quot;&gt;&lt;/a&gt;Tip16 Lifecycle代码块&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewWillAppear:(BOOL)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[super viewWillAppear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidAppear:(BOOL)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[super viewDidAppear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewWillDisappear:(BOOL)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[super viewWillDisappear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidDisappear:(BOOL)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[super viewDidDisappear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)didReceiveMemoryWarning &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[super didReceiveMemoryWarning];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip17-mark代码块&quot;&gt;&lt;a href=&quot;#Tip17-mark代码块&quot; class=&quot;headerlink&quot; title=&quot;Tip17 mark代码块&quot;&gt;&lt;/a&gt;Tip17 mark代码块&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - &amp;lt;#Section#&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip18-多线程常用代码块&quot;&gt;&lt;a href=&quot;#Tip18-多线程常用代码块&quot; class=&quot;headerlink&quot; title=&quot;Tip18 多线程常用代码块&quot;&gt;&lt;/a&gt;Tip18 多线程常用代码块&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(dispatch_get_global_queue(&amp;lt;#dispatch_queue_priority_t priority#&amp;gt;, &amp;lt;#unsigned long flags#&amp;gt;), ^(void) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;#code#&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(dispatch_get_main_queue(), ^(void) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;#code#&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip19-strong-self代码块&quot;&gt;&lt;a href=&quot;#Tip19-strong-self代码块&quot; class=&quot;headerlink&quot; title=&quot;Tip19 __strong self代码块&quot;&gt;&lt;/a&gt;Tip19 __strong self代码块&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__strong __typeof(&amp;lt;#weakSelf#&amp;gt;)strongSelf = &amp;lt;#weakSelf#&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip20-weak-self代码块&quot;&gt;&lt;a href=&quot;#Tip20-weak-self代码块&quot; class=&quot;headerlink&quot; title=&quot;Tip20 __weak self代码块&quot;&gt;&lt;/a&gt;Tip20 __weak self代码块&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__weak typeof(self)weakSelf = self;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip21-NSCoding代码块&quot;&gt;&lt;a href=&quot;#Tip21-NSCoding代码块&quot; class=&quot;headerlink&quot; title=&quot;Tip21 NSCoding代码块&quot;&gt;&lt;/a&gt;Tip21 NSCoding代码块&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithCoder:(NSCoder *)decoder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self = [super init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (!self) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;# implementation #&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)encodeWithCoder:(NSCoder *)coder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;# implementation #&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip22-互斥锁&quot;&gt;&lt;a href=&quot;#Tip22-互斥锁&quot; class=&quot;headerlink&quot; title=&quot;Tip22 互斥锁&quot;&gt;&lt;/a&gt;Tip22 互斥锁&lt;/h6&gt;&lt;p&gt;1.互斥锁作用：给需要同步的代码块加一个互斥锁，就可以保证每次只有一个线程访问此代码块&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@synchronized(self) &amp;#123;// OC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip23-使用const关键字&quot;&gt;&lt;a href=&quot;#Tip23-使用const关键字&quot; class=&quot;headerlink&quot; title=&quot;Tip23 使用const关键字&quot;&gt;&lt;/a&gt;Tip23 使用const关键字&lt;/h6&gt;&lt;p&gt;1.使用const关键字作用是：保证编译的时候不能更改变量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const CGFloat redValue = 0.6;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extern const CGFloat redValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString * const name = @&amp;quot;jjbai&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extern NSString * const name;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip24-常用PCH（Percompile-Prefix-Header，预编译）&quot;&gt;&lt;a href=&quot;#Tip24-常用PCH（Percompile-Prefix-Header，预编译）&quot; class=&quot;headerlink&quot; title=&quot;Tip24 常用PCH（Percompile Prefix Header，预编译）&quot;&gt;&lt;/a&gt;Tip24 常用PCH（Percompile Prefix Header，预编译）&lt;/h6&gt;&lt;p&gt;1.调试模式打印，非调试模式不打印&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef __OBJC__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#ifdef DEBUG&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define FBLog(...) NSLog(__VA_ARGS__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define FBLog(...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.判断真机还是模拟器&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 判断是真机&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_OS_IPHONE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//iPhone Device&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 判断是模拟器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if TARGET_IPHONE_SIMULATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// iPhone Simulator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.判断是否使用ARC或者MRC&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 使用ARC和不使用ARC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#if __has_feature(objc_arc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// compiling with ARC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// compiling without ARC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#endif&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip25-常用define&quot;&gt;&lt;a href=&quot;#Tip25-常用define&quot; class=&quot;headerlink&quot; title=&quot;Tip25 常用define&quot;&gt;&lt;/a&gt;Tip25 常用define&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;宏的优点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1）最主要还是帮你省点事，少写点代码&lt;/p&gt;
&lt;p&gt;2）实现一些高级的功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宏的缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1）swift不支持&lt;/p&gt;
&lt;p&gt;2）名称没起好很容易造成歧义&lt;/p&gt;
&lt;p&gt;3）代码不是很易读&lt;/p&gt;
&lt;p&gt;4）宏没写好容易导致未知的bug&lt;/p&gt;
&lt;p&gt;1.关于颜色的define&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 自定义透明度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define RGBA(r,g,b,a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 不透明RGB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define RGB_COLOR(r,g,b) RGBA(r,g,b,1.0f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// RGB颜色转换（16进制-&amp;gt;10进制） 变量是rgbValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define UICOLORFROMRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp;amp; 0xFF0000) &amp;gt;&amp;gt; 16))/255.0  green:((float)((rgbValue &amp;amp; 0xFF00) &amp;gt;&amp;gt; 8))/255.0  blue:((float)(rgbValue &amp;amp; 0xFF))/255.0  alpha:1.0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 背景色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define BACKGROUND_COLOR [UIColor colorWithRed:242.0/255.0 green:236.0/255.0 blue:231.0/255.0 alpha:1.0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 清除背景色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define CLEAR_COLOR [UIColor clearColor]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 随机颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define RANDOM_COLOR RGB_COLOR(arc4random_uniform(256),arc4random_uniform(256), arc4random_uniform(256))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.关于系统的define&lt;/p&gt;
&lt;p&gt;1）判断手机系统版本和手机型号&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define ios6x [[[UIDevice currentDevice] systemVersion] floatValue] &amp;lt; 7.0f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define iosNot6x [[[UIDevice currentDevice] systemVersion] floatValue] &amp;gt;= 7.0f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define iOS7 ( [ [ [ UIDevice currentDevice ] systemVersion ] floatValue ] &amp;gt;= 7.0 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define ios7x ([[[UIDevice currentDevice] systemVersion] floatValue] &amp;gt;= 7.0f) &amp;amp;&amp;amp; ([[[UIDevice currentDevice] systemVersion] floatValue] &amp;lt; 8.0f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define ios8x [[[UIDevice currentDevice] systemVersion] floatValue] &amp;gt;=8.0f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define ios9x [[[UIDevice currentDevice] systemVersion] floatValue] &amp;gt;=9.0f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 判断是否为iphone4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define iphone4x_3_5 ([UIScreen mainScreen].bounds.size.height==480.0f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define iphone5x_4_0 ([UIScreen mainScreen].bounds.size.height==568.0f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define iphone6_4_7 ([UIScreen mainScreen].bounds.size.height==667.0f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define iphone6Plus_5_5 ([UIScreen mainScreen].bounds.size.height==736.0f || [UIScreen mainScreen].bounds.size.height==414.0f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 判断是否为视网膜屏幕&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define isRetina ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2）另外一种方法获得系统版本（留着备用）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define SYSTEM_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define IOS_VERSION [[UIDevice currentDevice] systemVersion]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3) 获取当前语言&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define CURRENT_LANGUAGE ([[NSLocale preferredLanguages] objectAtIndex:0])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4）获取屏幕高度、宽度&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define SCREEN_WIDTH ([UIScreen mainScreen].bounds.size.width)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define SCREEN_HEIGHT ([UIScreen mainScreen].bounds.size.height)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.关于图片的define&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 读取本地图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define LOADIMAGE(file,ext) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:ext]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 定义UIImage对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define IMAGE(A) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:A ofType:nil]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 定义UIImage对象，建议使用前两种宏定义,性能高于后者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define ImageNamed(_pointer) [UIImage imageNamed:[UIUtil imageName:_pointer]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip26-系统工具方法&quot;&gt;&lt;a href=&quot;#Tip26-系统工具方法&quot; class=&quot;headerlink&quot; title=&quot;Tip26 系统工具方法&quot;&gt;&lt;/a&gt;Tip26 系统工具方法&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__COUNTER__ 无重复的计数器，从程序启动开始每次调用都会++，常用语宏中定义无重复的参数名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__FILE__：当前文件的绝对路径,常见于log中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__LINE__：展开该宏时在文件中的行数,常见于log中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__func__：所在scope的函数名称,常见于log中；这个常用来打印调用方法的函数名&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip27-LLDB&quot;&gt;&lt;a href=&quot;#Tip27-LLDB&quot; class=&quot;headerlink&quot; title=&quot;Tip27 LLDB&quot;&gt;&lt;/a&gt;Tip27 LLDB&lt;/h6&gt;&lt;p&gt;1.po命令&lt;/p&gt;
&lt;p&gt;1) 打印出完整的视图层次结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;po [[UIWindow keyWindow] recursiveDescription]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2)检查视图控制器&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;po [[[UIWindow keyWindow] rootViewController] _printHierarchy]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip28-将NSLog打印信息输出到手机上&quot;&gt;&lt;a href=&quot;#Tip28-将NSLog打印信息输出到手机上&quot; class=&quot;headerlink&quot; title=&quot;Tip28 将NSLog打印信息输出到手机上&quot;&gt;&lt;/a&gt;Tip28 将NSLog打印信息输出到手机上&lt;/h6&gt;&lt;p&gt;1.当使用NSLog的时候，就使用printLogScreen方法输出日志到手机上；&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// textView是放在屏幕上的输出日志控件；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)printLogScreen:(NSString *)string&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.textView setText:[NSString stringWithFormat:@&amp;quot;来自系统打印日志：%@&amp;quot;,string]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip29-获取手机已经连接的wifi列表&quot;&gt;&lt;a href=&quot;#Tip29-获取手机已经连接的wifi列表&quot; class=&quot;headerlink&quot; title=&quot;Tip29 获取手机已经连接的wifi列表&quot;&gt;&lt;/a&gt;Tip29 获取手机已经连接的wifi列表&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;SystemConfiguration/CaptiveNetwork.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)fetchSSIDInfo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSArray *ifs = (__bridge_transfer id)CNCopySupportedInterfaces();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;Supported interfaces: %@&amp;quot;, ifs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id info = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for (NSString *ifnam in ifs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info = (__bridge_transfer id)CNCopyCurrentNetworkInfo((__bridge CFStringRef)ifnam);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@ =&amp;gt; %@&amp;quot;, ifnam, info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (info &amp;amp;&amp;amp; [info count]) &amp;#123; break; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip30-iOS应用跳转到设置界面&quot;&gt;&lt;a href=&quot;#Tip30-iOS应用跳转到设置界面&quot; class=&quot;headerlink&quot; title=&quot;Tip30 iOS应用跳转到设置界面&quot;&gt;&lt;/a&gt;Tip30 iOS应用跳转到设置界面&lt;/h6&gt;&lt;p&gt;1.经典步骤: 以跳到设置wifi界面为例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在项目中的info.plist中，添加 URL types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;并设置一项URL Schemes为prefs（如果没有URL Schemes，就添加一个，在URL Schemes里面在添加一个items，在items的string里面填入prefs）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在指定要跳转到设置界面的地方写下面的代码：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSURL *url = [NSURL URLWithString:@&amp;quot;prefs:root=WIFI&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ([[UIApplication sharedApplication] canOpenURL:url])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[UIApplication sharedApplication] openURL:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.iOS应用跳转到设置界面URL Scheme参考&lt;/p&gt;
&lt;p&gt;About                  — prefs:root=General&amp;amp;path=About&lt;/p&gt;
&lt;p&gt;Accessibility          — prefs:root=General&amp;amp;path=ACCESSIBILITY&lt;/p&gt;
&lt;p&gt;Airplane Mode On       — prefs:root=AIRPLANE_MODE&lt;/p&gt;
&lt;p&gt;Auto-Lock              — prefs:root=General&amp;amp;path=AUTOLOCK&lt;/p&gt;
&lt;p&gt;Brightness             — prefs:root=Brightness&lt;/p&gt;
&lt;p&gt;Bluetooth              — prefs:root=General&amp;amp;path=Bluetooth&lt;/p&gt;
&lt;p&gt;Date &amp;amp; Time            — prefs:root=General&amp;amp;path=DATE_AND_TIME&lt;/p&gt;
&lt;p&gt;FaceTime               — prefs:root=FACETIME&lt;/p&gt;
&lt;p&gt;General                — prefs:root=General&lt;/p&gt;
&lt;p&gt;Keyboard               — prefs:root=General&amp;amp;path=Keyboard&lt;/p&gt;
&lt;p&gt;iCloud                 — prefs:root=CASTLE&lt;/p&gt;
&lt;p&gt;iCloud Storage &amp;amp; Backup      — prefs:root=CASTLE&amp;amp;path=STORAGE_AND_BACKUP&lt;/p&gt;
&lt;p&gt;International           — prefs:root=General&amp;amp;path=INTERNATIONAL&lt;/p&gt;
&lt;p&gt;Location Services       — prefs:root=LOCATION_SERVICES&lt;/p&gt;
&lt;p&gt;Music                   — prefs:root=MUSIC&lt;/p&gt;
&lt;p&gt;Music Equalizer         — prefs:root=MUSIC&amp;amp;path=EQ&lt;/p&gt;
&lt;p&gt;Music Volume Limit      — prefs:root=MUSIC&amp;amp;path=VolumeLimit&lt;/p&gt;
&lt;p&gt;Network                 — prefs:root=General&amp;amp;path=Network&lt;/p&gt;
&lt;p&gt;Nike + iPod             — prefs:root=NIKE_PLUS_IPOD&lt;/p&gt;
&lt;p&gt;Notes                   — prefs:root=NOTES&lt;/p&gt;
&lt;p&gt;Notification            — prefs:root=NOTIFICATIONS_ID&lt;/p&gt;
&lt;p&gt;Phone                   — prefs:root=Phone&lt;/p&gt;
&lt;p&gt;Photos                  — prefs:root=Photos&lt;/p&gt;
&lt;p&gt;Profile                 — prefs:root=General&amp;amp;path=ManagedConfigurationList&lt;/p&gt;
&lt;p&gt;Reset                   — prefs:root=General&amp;amp;path=Reset&lt;/p&gt;
&lt;p&gt;Safari                  — prefs:root=Safari&lt;/p&gt;
&lt;p&gt;Siri                    — prefs:root=General&amp;amp;path=Assistant&lt;/p&gt;
&lt;p&gt;Sounds                  — prefs:root=Sounds&lt;/p&gt;
&lt;p&gt;Software Update         — prefs:root=General&amp;amp;path=SOFTWARE_UPDATE_LINK&lt;/p&gt;
&lt;p&gt;Store                   — prefs:root=STORE&lt;/p&gt;
&lt;p&gt;Twitter                 — prefs:root=TWITTER&lt;/p&gt;
&lt;p&gt;Usage                   — prefs:root=General&amp;amp;path=USAGE&lt;/p&gt;
&lt;p&gt;VPN                     — prefs:root=General&amp;amp;path=Network/VPN&lt;/p&gt;
&lt;p&gt;Wallpaper               — prefs:root=Wallpaper&lt;/p&gt;
&lt;p&gt;Location                — prefs:root=LOCATION_SERVICES&lt;/p&gt;
&lt;h6 id=&quot;Tip31-ABAddressBook-获取权限代码块&quot;&gt;&lt;a href=&quot;#Tip31-ABAddressBook-获取权限代码块&quot; class=&quot;headerlink&quot; title=&quot;Tip31 ABAddressBook 获取权限代码块&quot;&gt;&lt;/a&gt;Tip31 ABAddressBook 获取权限代码块&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ABAuthorizationStatus status = ABAddressBookGetAuthorizationStatus();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (status == kABAuthorizationStatusNotDetermined) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ABAddressBookRef book = ABAddressBookCreateWithOptions(NULL, NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ABAddressBookRequestAccessWithCompletion(book, ^(bool granted, CFErrorRef error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (granted == YES) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;---允许&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;---不允许&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFRelease(book);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h6&gt;&lt;p&gt;1.&lt;a href=&quot;http://casatwy.com/shi-yong-lldbdiao-shi-cheng-xu.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://casatwy.com/shi-yong-lldbdiao-shi-cheng-xu.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://00red.com/blog/2015/01/14/teacher-wifi-solution/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://00red.com/blog/2015/01/14/teacher-wifi-solution/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;http://www.superqq.com/blog/2015/11/30/jump-to-setting-wifi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.superqq.com/blog/2015/11/30/jump-to-setting-wifi/&lt;/a&gt; 从应用跳到wifi设置&lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;http://www.jianshu.com/p/19602f48309b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/19602f48309b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;a href=&quot;http://worldligang.baijia.baidu.com/article/255351&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://worldligang.baijia.baidu.com/article/255351&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6.&lt;a href=&quot;http://blog.csdn.net/xyt8023y/article/details/50365140&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/xyt8023y/article/details/50365140&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7.&lt;a href=&quot;https://github.com/devinshively/wifiAssociate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/devinshively/wifiAssociate&lt;/a&gt; 越狱设备，通过ssid和password连接设备&lt;/p&gt;
&lt;p&gt;8.&lt;a href=&quot;https://www.douban.com/note/293551961/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.douban.com/note/293551961/&lt;/a&gt; wifi私有api&lt;/p&gt;
&lt;p&gt;9.&lt;a href=&quot;http://www.ppios.com/cydia-tweak-thor-automatically-turn-on-wifi.html//&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ppios.com/cydia-tweak-thor-automatically-turn-on-wifi.html//&lt;/a&gt; 打开应用wifi自动打开&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;Tip1-隐藏状态栏&quot;&gt;&lt;a href=&quot;#Tip1-隐藏状态栏&quot; class=&quot;headerlink&quot; title=&quot;Tip1 隐藏状态栏&quot;&gt;&lt;/a&gt;Tip1 隐藏状态栏&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)prefersStatusBarHidden&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return  YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip2-设置与状态栏间距（没有导航栏）&quot;&gt;&lt;a href=&quot;#Tip2-设置与状态栏间距（没有导航栏）&quot; class=&quot;headerlink&quot; title=&quot;Tip2 设置与状态栏间距（没有导航栏）&quot;&gt;&lt;/a&gt;Tip2 设置与状态栏间距（没有导航栏）&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If you are doing thins programatically and are using a UITableViewController without a UINavigationController your best bet is to do the following in viewDidLoad:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The UITableViewController will still scroll behind the status bar but won&amp;apos;t be under it when scrolled to the top.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.tableView.contentInset = UIEdgeInsetsMake(20.0f,0.0f,0.0f,0.0f);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;Tip3-修改状态栏颜色&quot;&gt;&lt;a href=&quot;#Tip3-修改状态栏颜色&quot; class=&quot;headerlink&quot; title=&quot;Tip3 修改状态栏颜色&quot;&gt;&lt;/a&gt;Tip3 修改状态栏颜色&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一步：在info.plist中添加一个字段：UIViewControllerBasedStatusBarAppearance 设置值为 NO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二步，设置状态栏颜色为白色:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIApplication.sharedApplication().statusBarStyle = UIStatusBarStyle.LightContent&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS报错</title>
    <link href="williamliuwen.cn/2016/04/03/AWblog/2016/4/iOS%E6%8A%A5%E9%94%99/"/>
    <id>williamliuwen.cn/2016/04/03/AWblog/2016/4/iOS报错/</id>
    <published>2016-04-03T13:21:40.000Z</published>
    <updated>2016-08-13T13:33:31.000Z</updated>
    
    <content type="html">&lt;h6 id=&quot;报错1-duplicate-symbol-OBJCMETACLASS-类名-in-？？&quot;&gt;&lt;a href=&quot;#报错1-duplicate-symbol-OBJCMETACLASS-类名-in-？？&quot; class=&quot;headerlink&quot; title=&quot;报错1 duplicate symbol _OBJCMETACLASS$_类名 in: ？？&quot;&gt;&lt;/a&gt;报错1 duplicate symbol _OBJC&lt;em&gt;METACLASS&lt;/em&gt;$_类名 in: ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 90%都是因为#import了.m文件; 思路2 其他可能是因为项目中存在了2个一样的.m文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错2-could-not-inspect-the-application-package-？？&quot;&gt;&lt;a href=&quot;#报错2-could-not-inspect-the-application-package-？？&quot; class=&quot;headerlink&quot; title=&quot;报错2 could not inspect the application package ？？&quot;&gt;&lt;/a&gt;报错2 could not inspect the application package ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 按中Option的时候，进入菜单Product | Clean Build Folder …进行Clean后再运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错3-Outlets-cannot-be-connected-to-repeating-content-？？&quot;&gt;&lt;a href=&quot;#报错3-Outlets-cannot-be-connected-to-repeating-content-？？&quot; class=&quot;headerlink&quot; title=&quot;报错3 Outlets cannot be connected to repeating content ？？&quot;&gt;&lt;/a&gt;报错3 Outlets cannot be connected to repeating content ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 直接使用静态cell可以解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h6 id=&quot;报错4-This-application’s-application-identifier-entitlement-does-not-match-that-of-the-installed-application-These-values-must-match-for-an-upgrade-to-be-allowed-？？&quot;&gt;&lt;a href=&quot;#报错4-This-application’s-application-identifier-entitlement-does-not-match-that-of-the-installed-application-These-values-must-match-for-an-upgrade-to-be-allowed-？？&quot; class=&quot;headerlink&quot; title=&quot;报错4 This application’s application-identifier entitlement does not match that of the installed application. These values must match for an upgrade to be allowed.？？&quot;&gt;&lt;/a&gt;报错4 This application’s application-identifier entitlement does not match that of the installed application. These values must match for an upgrade to be allowed.？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 把你以前安装同名软件卸掉(建议)或者更改项目的bunldID（不建议）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错5-the-item-height-must-be-less-than-the-height-of-the-UICollectionView-minus-the-section-insets-top-and-bottom-values-？？&quot;&gt;&lt;a href=&quot;#报错5-the-item-height-must-be-less-than-the-height-of-the-UICollectionView-minus-the-section-insets-top-and-bottom-values-？？&quot; class=&quot;headerlink&quot; title=&quot;报错5 the item height must be less than the height of the UICollectionView minus the section insets top and bottom values. ？？&quot;&gt;&lt;/a&gt;报错5 the item height must be less than the height of the UICollectionView minus the section insets top and bottom values. ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 把collectiview的高亮背景色调成蓝色+把当前控制器的under属性取消勾选，附带原答案（I found that, using storyboards, you have to go into the storyboard and click on the overall View Controller (the view should be highlighted in blue) and go to the Attributes Inspector (the fourth tab on the right side of the screen) and unchecking the “Under Top Bars”, “Under Bottom Bars”, and “Under Opaque Bars.” This cleared up the issue for me, and it cleared it for my coworkers as well.）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错6-Terminating-app-due-to-uncaught-exception-‘NSInvalidArgumentException’-reason-‘attempt-to-scroll-to-invalid-index-path-length-2-path-50-0-？？&quot;&gt;&lt;a href=&quot;#报错6-Terminating-app-due-to-uncaught-exception-‘NSInvalidArgumentException’-reason-‘attempt-to-scroll-to-invalid-index-path-length-2-path-50-0-？？&quot; class=&quot;headerlink&quot; title=&quot;报错6 Terminating app due to uncaught exception ‘NSInvalidArgumentException’, reason: ‘attempt to scroll to invalid index path:  {length = 2, path = 50 - 0} ？？&quot;&gt;&lt;/a&gt;报错6 Terminating app due to uncaught exception ‘NSInvalidArgumentException’, reason: ‘attempt to scroll to invalid index path: &lt;nsindexpath: 0xc000000000000c96=&quot;&quot;&gt; {length = 2, path = 50 - 0} ？？&lt;/nsindexpath:&gt;&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 检查下面的方法有没有值：我的错误在于：没有指定代理和数据源代理，就是拖线；还可以查看有没有执行下面的方法，如果没有拖线是不会执行的，因为当前不是代理，就不会执行这个代理的方法；numberOfItemsInSection / numberOfSectionsInCollectionView&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错7-Settings-→-General-→-DeviceManagement-→-DeveloperApp-→-Trust&quot;&gt;&lt;a href=&quot;#报错7-Settings-→-General-→-DeviceManagement-→-DeveloperApp-→-Trust&quot; class=&quot;headerlink&quot; title=&quot;报错7 Settings → General → DeviceManagement → DeveloperApp → Trust. ??&quot;&gt;&lt;/a&gt;报错7 Settings → General → DeviceManagement → DeveloperApp → Trust. ??&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 在手机上设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错8-declaration-of-inet-addr-must-be-imported-from-module-darwin-posix-arpa-inet-？？&quot;&gt;&lt;a href=&quot;#报错8-declaration-of-inet-addr-must-be-imported-from-module-darwin-posix-arpa-inet-？？&quot; class=&quot;headerlink&quot; title=&quot;报错8 declaration of inet_addr must be imported from module darwin.posix.arpa.inet ？？&quot;&gt;&lt;/a&gt;报错8 declaration of inet_addr must be imported from module darwin.posix.arpa.inet ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 导入 #include &lt;arpa inet.h=&quot;&quot;&gt;&lt;/arpa&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错9-dylib，tbd转换-？？&quot;&gt;&lt;a href=&quot;#报错9-dylib，tbd转换-？？&quot; class=&quot;headerlink&quot; title=&quot;报错9 dylib，tbd转换 ？？&quot;&gt;&lt;/a&gt;报错9 dylib，tbd转换 ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 在添加framework那个对话框，最下面有个 “add other…” 点开之后， cmd+shift+G  路径输入 /usr/lib/  然后 找到你需要的lib文件 就ok了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错10-implicitly-declaring-library-function-‘strncpy’-with-type-？？&quot;&gt;&lt;a href=&quot;#报错10-implicitly-declaring-library-function-‘strncpy’-with-type-？？&quot; class=&quot;headerlink&quot; title=&quot;报错10 implicitly declaring library function ‘strncpy’ with type ？？&quot;&gt;&lt;/a&gt;报错10 implicitly declaring library function ‘strncpy’ with type ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 &lt;a href=&quot;http://stackoverflow.com/questions/977233/warning-incompatible-implicit-declaration-of-built-in-function-xyz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/977233/warning-incompatible-implicit-declaration-of-built-in-function-xyz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错11-No-visible-interface-for-UIView-declares-the-selector-‘loadRequest-’-on-line-？？&quot;&gt;&lt;a href=&quot;#报错11-No-visible-interface-for-UIView-declares-the-selector-‘loadRequest-’-on-line-？？&quot; class=&quot;headerlink&quot; title=&quot;报错11 No visible @interface for UIView declares the selector ‘loadRequest:’ on line ？？&quot;&gt;&lt;/a&gt;报错11 No visible @interface for UIView declares the selector ‘loadRequest:’ on line ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 why you are getting this error is becuase loadRequest is not the method of UIView. But in-spite of that it is the method of UIWebView. For more refer this UIWebView documentation . So just replace UIView to UIWebView and check&lt;br&gt;//Comment this&lt;br&gt;//@property (strong, nonatomic) IBOutlet UIView &lt;em&gt;viewWeb;&lt;br&gt;//Modify this&lt;br&gt;//@property (strong, nonatomic) IBOutlet UIWebView &lt;/em&gt;viewWeb;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错12-implicitly-declaring-library-function-‘objc-xxxxxx’-with-type-？？&quot;&gt;&lt;a href=&quot;#报错12-implicitly-declaring-library-function-‘objc-xxxxxx’-with-type-？？&quot; class=&quot;headerlink&quot; title=&quot;报错12 implicitly declaring library function ‘objc_xxxxxx’ with type  ？？&quot;&gt;&lt;/a&gt;报错12 implicitly declaring library function ‘objc_xxxxxx’ with type  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 添加头文件 #import &lt;objc message.h=&quot;&quot;&gt;&lt;/objc&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错13-没有模拟器-？？&quot;&gt;&lt;a href=&quot;#报错13-没有模拟器-？？&quot; class=&quot;headerlink&quot; title=&quot;报错13 没有模拟器  ？？&quot;&gt;&lt;/a&gt;报错13 没有模拟器  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 工程的版本太高，模拟器不支持; 唯一办法是：调低工程的编译版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错14-setvalue-forUndefinedKey-？？&quot;&gt;&lt;a href=&quot;#报错14-setvalue-forUndefinedKey-？？&quot; class=&quot;headerlink&quot; title=&quot;报错14 setvalue-forUndefinedKey  ？？&quot;&gt;&lt;/a&gt;报错14 setvalue-forUndefinedKey  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 原因是找不到连线的属性；可能是storyboar里面连线的属性被删除了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错14-APP程序闪退-？？&quot;&gt;&lt;a href=&quot;#报错14-APP程序闪退-？？&quot; class=&quot;headerlink&quot; title=&quot;报错14 APP程序闪退  ？？&quot;&gt;&lt;/a&gt;报错14 APP程序闪退  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 provisioning profile证书变成invalid;原因分析：估计谁重新生成过调试证书了或者有人把你的证书revoke了；深度分析：导致生成证书的原因：使用陌生的设备编译了工程文件，且编译的时候点击了修复证书；原文（May be you added a new device to the mix or updated something else that affects this mobileprovision. Click on the Edit and just re-generate the mobileprovision and the status should then go from Invalid to Green dot that is Valid：就是说添加新的设备，会影响mobileprovision）原文链接：&lt;a href=&quot;http://zhidao.baidu.com/link?url=guOm7huxAgSy2ZEdwWpEfp77I9tuK6KfdbfarlJ6OhuiSZPs6q5T8HHHDsP0w9oIrJOIwlomY6geZD5Bq5kbU82sRdoGfR9rYi9cSjWT0ei&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zhidao.baidu.com/link?url=guOm7huxAgSy2ZEdwWpEfp77I9tuK6KfdbfarlJ6OhuiSZPs6q5T8HHHDsP0w9oIrJOIwlomY6geZD5Bq5kbU82sRdoGfR9rYi9cSjWT0ei&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/25887845/apple-developer-provisioning-profile-showing-invalid-status&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/25887845/apple-developer-provisioning-profile-showing-invalid-status&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错15-error-instance-variable-‘wheels’-is-protected-p-gt-wheels-4-？？&quot;&gt;&lt;a href=&quot;#报错15-error-instance-variable-‘wheels’-is-protected-p-gt-wheels-4-？？&quot; class=&quot;headerlink&quot; title=&quot;报错15 error:instance variable ‘wheels’ is protected p-&amp;gt;wheels = 4  ？？&quot;&gt;&lt;/a&gt;报错15 error:instance variable ‘wheels’ is protected p-&amp;gt;wheels = 4  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 给这个属性添加@protect&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错16-Requesting-the-window-of-a-view-with-a-nil-layer-This-view-probably-hasn’t-received-initWithFrame-or-initWithCoder-？？&quot;&gt;&lt;a href=&quot;#报错16-Requesting-the-window-of-a-view-with-a-nil-layer-This-view-probably-hasn’t-received-initWithFrame-or-initWithCoder-？？&quot; class=&quot;headerlink&quot; title=&quot;报错16 Requesting the window of a view () with a nil layer. This view probably hasn’t received initWithFrame: or initWithCoder:  ？？&quot;&gt;&lt;/a&gt;报错16 Requesting the window of a view (&lt;wldotacell: 0=&quot;&quot; 0x79f86160;=&quot;&quot; baseclass=&quot;UITableViewCell;&quot; frame=&quot;(0&quot; 0;=&quot;&quot; 0);=&quot;&quot; transform=&quot;[0,&quot; 0,=&quot;&quot; 0];=&quot;&quot; alpha=&quot;0;&quot; opaque=&quot;NO;&quot; autoresize=&quot;W;&quot; layer=&quot;(null)&quot;&gt;) with a nil layer. This view probably hasn’t received initWithFrame: or initWithCoder:  ？？&lt;/wldotacell:&gt;&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;因为是手动代码写控件，所以需要重写initWithStyle方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (self) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 头像控件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIImageView *iconView = [[UIImageView alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.contentView addSubview:iconView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.iconView = iconView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 名字控件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UILabel *nameView = [[UILabel alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.contentView addSubview:nameView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.nameView = nameView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错17-cancelPeripheralConnection-CBPeripheral-peripheral不会马上断开外设-？？&quot;&gt;&lt;a href=&quot;#报错17-cancelPeripheralConnection-CBPeripheral-peripheral不会马上断开外设-？？&quot; class=&quot;headerlink&quot; title=&quot;报错17 cancelPeripheralConnection:(CBPeripheral *)peripheral不会马上断开外设  ？？&quot;&gt;&lt;/a&gt;报错17 cancelPeripheralConnection:(CBPeripheral *)peripheral不会马上断开外设  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 系统自带的不会马上断开&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://www.jianshu.com/p/d8aad492b937&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;https://devzone.nordicsemi.com/question/3366/ios-corebluetooth-reconnecting-device-with-pair/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://stackoverflow.com/questions/22158099/getting-ios-centralmanagerdiddisconnectperipheral-call-but-device-is-not-really&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错18-viewController-up-unrecongized-selector-sent-to-instance-0x8c50af0-？？&quot;&gt;&lt;a href=&quot;#报错18-viewController-up-unrecongized-selector-sent-to-instance-0x8c50af0-？？&quot; class=&quot;headerlink&quot; title=&quot;报错18 -[viewController up]: unrecongized selector sent to instance 0x8c50af0  ？？&quot;&gt;&lt;/a&gt;报错18 -[viewController up]: unrecongized selector sent to instance 0x8c50af0  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 表示某个对象没有实现某个方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错19-让手机震动方法-？？&quot;&gt;&lt;a href=&quot;#报错19-让手机震动方法-？？&quot; class=&quot;headerlink&quot; title=&quot;报错19 让手机震动方法  ？？&quot;&gt;&lt;/a&gt;报错19 让手机震动方法  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 导入#import &lt;audiotoolbox audiotoolbox.h=&quot;&quot;&gt;   代码：AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);&lt;/audiotoolbox&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错20-检查广告标识符-？？&quot;&gt;&lt;a href=&quot;#报错20-检查广告标识符-？？&quot; class=&quot;headerlink&quot; title=&quot;报错20 检查广告标识符  ？？&quot;&gt;&lt;/a&gt;报错20 检查广告标识符  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 如果你APP里面有广告标识符，但你选择了否 解决方案&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.方案一：重新下载xcode，安装比较新的版本重新打包ipa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.方案二：检测哪里用到IDFA，首先cd到你的工程目录下，然后执行命令：（ grep -r advertisingIdentifier . ）注意后面还有一个点。找到后，把你广告移除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.方案三：承认你有广告标识符&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错21-NSURLSession-NSURLConnection-HTTP-load-failed-kCFStreamErrorDomainSSL-9802-？？&quot;&gt;&lt;a href=&quot;#报错21-NSURLSession-NSURLConnection-HTTP-load-failed-kCFStreamErrorDomainSSL-9802-？？&quot; class=&quot;headerlink&quot; title=&quot;报错21 NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9802)  ？？&quot;&gt;&lt;/a&gt;报错21 NSURLSession/NSURLConnection HTTP load failed (kCFStreamErrorDomainSSL, -9802)  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 在info.plist里面添加如下内容即可:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iOS8 编译错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build Settings 里 将 Enable Bitcode的值设置成 NO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://my.oschina.net/rareliu/blog/509521&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错22-在ios上摇动时出现撤销、重做弹出框-？？&quot;&gt;&lt;a href=&quot;#报错22-在ios上摇动时出现撤销、重做弹出框-？？&quot; class=&quot;headerlink&quot; title=&quot;报错22 在ios上摇动时出现撤销、重做弹出框  ？？&quot;&gt;&lt;/a&gt;报错22 在ios上摇动时出现撤销、重做弹出框  ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 [UIApplication sharedApplication].applicationSupportsShakeToEdit = NO;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://ask.csdn.net/questions/236048&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://stackoverflow.com/questions/6520125/how-to-disable-ios-shake-to-undo-in-a-webapp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;报错1-duplicate-symbol-OBJCMETACLASS-类名-in-？？&quot;&gt;&lt;a href=&quot;#报错1-duplicate-symbol-OBJCMETACLASS-类名-in-？？&quot; class=&quot;headerlink&quot; title=&quot;报错1 duplicate symbol _OBJCMETACLASS$_类名 in: ？？&quot;&gt;&lt;/a&gt;报错1 duplicate symbol _OBJC&lt;em&gt;METACLASS&lt;/em&gt;$_类名 in: ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 90%都是因为#import了.m文件; 思路2 其他可能是因为项目中存在了2个一样的.m文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错2-could-not-inspect-the-application-package-？？&quot;&gt;&lt;a href=&quot;#报错2-could-not-inspect-the-application-package-？？&quot; class=&quot;headerlink&quot; title=&quot;报错2 could not inspect the application package ？？&quot;&gt;&lt;/a&gt;报错2 could not inspect the application package ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 按中Option的时候，进入菜单Product | Clean Build Folder …进行Clean后再运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;报错3-Outlets-cannot-be-connected-to-repeating-content-？？&quot;&gt;&lt;a href=&quot;#报错3-Outlets-cannot-be-connected-to-repeating-content-？？&quot; class=&quot;headerlink&quot; title=&quot;报错3 Outlets cannot be connected to repeating content ？？&quot;&gt;&lt;/a&gt;报错3 Outlets cannot be connected to repeating content ？？&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;思路1 直接使用静态cell可以解决&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>极简衣物观</title>
    <link href="williamliuwen.cn/2015/06/01/AWblog/2015/%E6%9E%81%E7%AE%80%E8%A1%A3%E7%89%A9%E8%A7%82/"/>
    <id>williamliuwen.cn/2015/06/01/AWblog/2015/极简衣物观/</id>
    <published>2015-06-01T12:09:33.000Z</published>
    <updated>2016-08-13T13:20:48.000Z</updated>
    
    <content type="html">&lt;p&gt;每日给自己一句话：超抵抗力最大的路径前进！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;我的精简心得之一：-衣物精简原则&quot;&gt;&lt;a href=&quot;#我的精简心得之一：-衣物精简原则&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之一： 衣物精简原则&quot;&gt;&lt;/a&gt;我的精简心得之一： 衣物精简原则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;有不少人问我是怎么精简我的物品的，有哪些经验或者哪些物品值得推荐。其实在精简的过程中，我确实感受到这里面还是有一定的原则可循的，那就写一篇文字和大家分享。声明：以下文字只是个人总结，没有经过普遍性验证，仅供参考。在精简物品的过程中，个人衣物是重头戏，我们就先来谈谈这个话题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;精简原则：&quot;&gt;&lt;a href=&quot;#精简原则：&quot; class=&quot;headerlink&quot; title=&quot;精简原则：&quot;&gt;&lt;/a&gt;精简原则：&lt;/h4&gt;&lt;p&gt;1、功能性&amp;gt;适合性&amp;gt;个人喜好&lt;br&gt;我们平时在选购物品的时候，经常以个人喜好为主要标准。但是我认为要以功能性优先。比如你有很多喜欢的牛仔裤，但是如果公司要求正装出席某些场合的时候，你是否有合适的服装？&lt;br&gt;在满足功能性的前提下，其次要考虑的是适合性。穿在模特身上好看的衣服，一定适合自己吗？绝大多数情况之下，答案让人沮丧。我们的喜好经常受到媒体潜移默化地引导。最好的办法还是要了解自己的特质，身材比例，体型，肤色，气质，等等。网上有很多这类的电子书，大家可以参阅。&lt;br&gt;最后，在功能性和适合性都得到满足的前提下，我们再去考虑个人喜好。&lt;/p&gt;
&lt;p&gt;2、 基本款&amp;gt;流行款&lt;br&gt;基本款的另一个名字叫经典。相对于流行款，它的适用范围更广，可搭配程度更高，并且不需要经常升级和更新。基本款的颜色最好选择纯色，相对于花色或多色的衣服，纯色的衣服更加高雅和容易搭配。&lt;/p&gt;
&lt;p&gt;3、外衣偏深色，内衣偏浅色。&lt;br&gt;投资了经典设计和高质量的基本款之后，衣服升级的频率就会显著地下降。但是在这里要说明，外衣选择深色，即使很长时间之后也不会显得很旧；而内衣则不然，由于是贴身的衣服，应该选择浅色，一旦颜色泛黄显旧就要更新升级，以保证衣物的功能性，防止影响健康。&lt;/p&gt;
&lt;p&gt;4、选择可以承受范围内最好的。&lt;br&gt;便宜的东西未必不好，但好东西肯定不便宜。从经济学的角度来说，非常容易理解。好的衣服，需要好的设计人员，优质的原材料，高超的制作工艺，等等…这些成本都要分摊到我们购买的价格中。但是，由于适合我们自己的东西不多（因为个人特征的独特性），所以在购买数量小的前提下，我们可以追求那些设计和质量更好的衣服，当然价钱会更高。需要说明的是，我们要鉴别价格高的原因，如果是出于品牌定位的话，我就觉得没有必要了。&lt;/p&gt;
&lt;p&gt;5、去标签化。&lt;br&gt;我们已经为商品付出了成本，不再需要变成商家的移动广告，我买的是商品本身而不是它的品牌效应。在同等质量的情况下，我会选择没有标签的，或者标签非常小的，或者标签不起眼的品牌。&lt;/p&gt;
&lt;p&gt;6、精明选择，标准化更替。&lt;br&gt;由于成年之后，我们的特征相对稳定。所以按照上面的原则选择的衣服应该是比较适合自己的，那么接下来就对这些衣物进行标准化，也就是说在衣物需要更替的时候，尽量选择同品牌同款同色的衣服。&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之二-内衣篇&quot;&gt;&lt;a href=&quot;#我的精简心得之二-内衣篇&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之二 内衣篇&quot;&gt;&lt;/a&gt;我的精简心得之二 内衣篇&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在第一篇心得中，曾经有一条原则涉及到内衣的选择，就是内衣要选择浅色。其他的就看个人的偏好了，而且在这个方面，男生女生的选择差异巨大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于我这样的男生而言，选择相对简单：&lt;/p&gt;
&lt;p&gt;1、 V领白色短袖打底衫－优衣库 AIRism系列&lt;br&gt;这个主要是温暖季节为衬衣打底，不至于衬衣因为出汗而贴到后背上。另外，穿白衬衣的时候也不至于太透。由于白色打底，会让白衬衣看上去更加洁白。&lt;/p&gt;
&lt;p&gt;2、V领白色长袖打底衫－优衣库 HEATTECH系列&lt;/p&gt;
&lt;p&gt;3、白色紧身裤 －HEATTECH系列&lt;br&gt;这两件基本上应对冬季，除非特别冷的天气，平时足够了。&lt;/p&gt;
&lt;p&gt;4、黑色五指袜 - 优衣库&lt;br&gt;五指袜能够有效保持脚趾间部位的干爽，达到保暖，抑菌的作用，对足部健康非常有益。对于袜子，我只选择黑色，因为百搭。&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之三：中衣篇&quot;&gt;&lt;a href=&quot;#我的精简心得之三：中衣篇&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之三：中衣篇&quot;&gt;&lt;/a&gt;我的精简心得之三：中衣篇&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;选择功能性较强的内衣可以很大程度上削弱中衣的重要性，而中衣的选择则更多地关注百搭。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、纯色精致牛津纺衬衣 - 优衣库&lt;br&gt;衬衣主要在工作场合穿着，所以纯色的衬衣更百搭。精致牛津纺面料容易打理，由于我衬衣和衣架一一对应，所以洗过晾干的衬衣也不用叠，直接挂到衣橱里面，没有什么褶皱和折痕，避免了熨烫的麻烦。&lt;/p&gt;
&lt;p&gt;2、V领浅灰色羊毛衫 - 无印良品&lt;br&gt;灰色是高雅色，也属于百搭系列。和西裤衬衣组合就非常商务，而和牛仔裤搭配就非常休闲。&lt;/p&gt;
&lt;p&gt;3、Columbia Men’s Expedition Long Sleeve 1/2 Zip Shirt - Black&lt;/p&gt;
&lt;p&gt;4、Columbia Men’s Extreme Fleece Tight - Black&lt;br&gt;哥伦比亚这一身保暖效果非常好，使用了OMNI-HEAT THERMAL REFLECTIVE技术，能够反射人体自身散发的热量，通过自身的热量循环减少热量损失，最终达到保暖的作用，同时兼顾透气，排汗，速干和抑菌。这个套装对我非常重要，它们使我不借助臃肿的羽绒服轻松度过华北的寒冬。&lt;/p&gt;
&lt;p&gt;5、浅灰色长袖T恤衫 - 优衣库&lt;br&gt;百搭休闲。&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之四：外衣篇&quot;&gt;&lt;a href=&quot;#我的精简心得之四：外衣篇&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之四：外衣篇&quot;&gt;&lt;/a&gt;我的精简心得之四：外衣篇&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果不是意外损坏的话，外衣的使用寿命一般都是很长的，更新换代的频率也非常慢。所以，选择的标准是经典款式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、短款黑色羊绒大衣。&lt;br&gt;即使再极简，我也觉得这件外衣不能少。和西裤搭配，那就是商务着装的代表；和牛仔裤搭配，那就休闲衣着的经典。&lt;/p&gt;
&lt;p&gt;2、黑色商务套装。&lt;br&gt;其实，炭灰色也许比黑色更经典。不论怎样，西装是功能性第一的服装，不过一套足矣。&lt;/p&gt;
&lt;p&gt;3、黑色西裤。&lt;br&gt;主要是工作着装。&lt;/p&gt;
&lt;p&gt;4、牛仔裤。&lt;br&gt;无需赘述，一条就好。&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之五-APP管理篇&quot;&gt;&lt;a href=&quot;#我的精简心得之五-APP管理篇&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之五 APP管理篇&quot;&gt;&lt;/a&gt;我的精简心得之五 APP管理篇&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;现在智能设备大行其道，确实给我们带来了方便，但同时也带来了烦恼。如何找到自己需要的App呢？我也没有灵丹妙药，还是要根据自己的需要不断尝试，去粗取精。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过了长时间的体验，我最终选择了这几个App, 和大家分享一下，如果你也一直在寻找这类的App, 不妨体验一下，或者有更好的推荐也可以分享给我。那我就在这里抛个砖引个玉吧。&lt;/p&gt;
&lt;p&gt;1、Kindle: Mobi格式电子书阅读利器。&lt;/p&gt;
&lt;p&gt;2、Pocket: 优秀文章一键保存。&lt;/p&gt;
&lt;p&gt;3、Adobe Reader: PDF格式电子书阅读。&lt;/p&gt;
&lt;p&gt;4、WeChat: 关闭朋友圈功能，主要用于《逻辑思维》语音推荐和推荐文章阅读。&lt;/p&gt;
&lt;p&gt;5、WhatsApp: 和国外朋友和同事日常联系。&lt;/p&gt;
&lt;p&gt;6、 LinkedIn: 商务应用。&lt;/p&gt;
&lt;p&gt;7、MindNode: 思维的导图工具。&lt;/p&gt;
&lt;p&gt;8、Evernote: 知识管理工具。&lt;/p&gt;
&lt;p&gt;9、Eidetic: 记忆增强工具。&lt;/p&gt;
&lt;p&gt;10、Bible: 电子版圣经。&lt;br&gt;其它日常需要都能够被系统自带App满足。&lt;/p&gt;
&lt;p&gt;转自：豆瓣：Oscar&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0601.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有小孩知道他们在寻找什么。 —— 《小王子》    &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每日给自己一句话：超抵抗力最大的路径前进！&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>极简消费观</title>
    <link href="williamliuwen.cn/2015/05/31/AWblog/2015/%E6%9E%81%E7%AE%80%E6%B6%88%E8%B4%B9%E8%A7%82/"/>
    <id>williamliuwen.cn/2015/05/31/AWblog/2015/极简消费观/</id>
    <published>2015-05-31T12:17:55.000Z</published>
    <updated>2016-08-13T13:19:07.000Z</updated>
    
    <content type="html">&lt;p&gt;每日给自己一句话：抵抗力最大的路和抵抗力最小的路有共同的起点，可终点不啻霄壤。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;每日给自己一句话：生活就像逆水行舟，想活得有意义，还是要走抵抗力最大的那条路。看书学习抵抗力大，刷微博微信抵抗力小；坚持锻炼身体抵抗力大，窝在沙发里上网看电视抵抗力小；吃清淡健康食物抵抗力大，喝啤酒吃炸鸡抵抗力小；精简生活抵抗力大，囤积、消费抵抗力小。&lt;/p&gt;
&lt;p&gt;开始正文：来自网络&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在我们现在的社会中，消费主义是主流思想。每天我们都要被动地被广告成千上万次，在这样密集的轰滥炸式的灌输之下，有几人能保持理性消费？广告的作用并不是简单地宣扬产品的优点，其真正的目的是营造一种气氛，造成一种假象，让你感觉必须使用这种产品你才能幸福。但是，从过去成千上万次的消费经验中，我们很容易就能发现，购买不能让我们感到真正的快乐。但是那些看上去很好、实际没用的东西却让我们付出巨大的代价。我们需要加更多的班，挣更多的钱去还信用卡；我们减少了陪家人的时间；我们减少了本应该不断增长的个人存款；我们减少了梦想基金。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我一个朋友，爱买衣服。那些衣服价格不菲，堆积成山，很少上身，甚至有的根本没穿过。她有一个梦想就是去欧洲旅行，尤其喜欢捷克的布拉格。很久以来，一直都念叨着存钱去旅行。我告诉她，如果你不买那些从来没有穿过的衣服，你早可以在布拉格广场边上租个房子住上一个月了…&lt;br&gt;那什么是极简消费观呢？我没有明确的定义，但我可以分享自己的看法。&lt;/p&gt;
&lt;h5 id=&quot;第一原则：能租的就不买，能借的就不租。&quot;&gt;&lt;a href=&quot;#第一原则：能租的就不买，能借的就不租。&quot; class=&quot;headerlink&quot; title=&quot;第一原则：能租的就不买，能借的就不租。&quot;&gt;&lt;/a&gt;第一原则：能租的就不买，能借的就不租。&lt;/h5&gt;&lt;p&gt;我不是为了购买而购买，消费是为了完成某件事情。看看家里的东西，很多都是使用了一次或者几次之后就束之高阁，在我们“万一某天还能用的上”的心理作用下，被遗忘在角落。如果你做一个试验，把所有的物品都整理出来，你会发现已经忘记很多东西的存在。所以，租、借的方式可能让我们省下很多的金钱、维护的精力、家中的空间，还能让那些东西物尽其用。&lt;/p&gt;
&lt;h5 id=&quot;第二原则：少、小、好、巧，外加环保。&quot;&gt;&lt;a href=&quot;#第二原则：少、小、好、巧，外加环保。&quot; class=&quot;headerlink&quot; title=&quot;第二原则：少、小、好、巧，外加环保。&quot;&gt;&lt;/a&gt;第二原则：少、小、好、巧，外加环保。&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;少&lt;/strong&gt;：囤积是人的天性之一，商家也用“量贩”的方式引诱消费者。可是为什么购买超过需求的物品呢？就是因为便宜？但是你牺牲了家中的空间和再次选择的权利。我曾经以量贩的方式购买过东西，后来发现不好用。扔掉省下的大部分吧，绝对浪费；不扔吧，实在不好用；最后，好不容易用完了，简直是煎熬。以后就买小包装了，其实没有贵多少，再说，哪有量贩式的精品…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小&lt;/strong&gt;：现在进入了微时代，什么都是越便携越好。这个我非常赞同。一般来说，东西做大一些相对容易，要做得更小，需要更加精细的工艺。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好&lt;/strong&gt;：极简主义者不是乞丐，虽然我拒绝购买不需要的物品，但是对于购买的物品质量都是高要求的。由于购买的东西少，我有更多的资金去购买高质量的物&lt;br&gt;品，享受高品质的使用体验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;巧&lt;/strong&gt;：我喜欢设计精巧的物品。这样在使用的时候更加方便顺手，同时也能增加使用的愉悦感。典型的例子就是瑞士军刀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环保&lt;/strong&gt;：物品的材质不但影响品质，也影响环境。尽量选择环保材料和生产工艺的物品是极简主义者的态度。例如：能用玻璃的，就不用塑料；能用电子的，就不用纸张；能用再生纸的，就不用非再生纸；能用棉花的，就不用羊毛的，等等。&lt;/p&gt;
&lt;p&gt;这些原则不是对生活的限制，而是对生活品质的追求&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0531.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;士之读书治学，盖将以脱心志于俗谛之桎梏，真理因得以发扬。思想而不自由，毋宁死耳。 —— 陈寅恪    &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每日给自己一句话：抵抗力最大的路和抵抗力最小的路有共同的起点，可终点不啻霄壤。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>极简生活</title>
    <link href="williamliuwen.cn/2015/05/30/AWblog/2015/%E6%9E%81%E7%AE%80%E7%94%9F%E6%B4%BB/"/>
    <id>williamliuwen.cn/2015/05/30/AWblog/2015/极简生活/</id>
    <published>2015-05-30T11:43:26.000Z</published>
    <updated>2016-08-13T13:19:00.000Z</updated>
    
    <content type="html">&lt;p&gt;每日给自己一句话：多谈些问题，少谈些主义。 —— 胡适&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;关键词：&quot;&gt;&lt;a href=&quot;#关键词：&quot; class=&quot;headerlink&quot; title=&quot;关键词：&quot;&gt;&lt;/a&gt;关键词：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;仓库(住所)&lt;/li&gt;
&lt;li&gt;现在当下（快活）&lt;/li&gt;
&lt;li&gt;未来过去（不快活）&lt;/li&gt;
&lt;li&gt;需要，合适，舒服&lt;/li&gt;
&lt;li&gt;不增加衣物，不增加卡片&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;内容较多，给大家列多几点&quot;&gt;&lt;a href=&quot;#内容较多，给大家列多几点&quot; class=&quot;headerlink&quot; title=&quot;内容较多，给大家列多几点:&quot;&gt;&lt;/a&gt;内容较多，给大家列多几点:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超过自己管理能力的物品，不持有不留恋的物品，不持有无法回归自然或转让给其他人的物品，不持有和自己或自己的生活风格不符的物品，不持有生命本身就是一场体验，只经历，不占有。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不持有的生活不仅是提倡绿色环保，节俭，乐活，更是精神压力的释放与解脱，内省，灵修，心灵成长和达到各方面的平衡。每天使用到的东西要斤斤计较，就是常用的东西都要选自己喜欢的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于一些不常用的东西，可以向朋友借。让自己的东西只出不进每天坚持不买瓶装饮料，而是自制饮料。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每天收拾一个抽屉每天走路带上计步器。扔掉不要的运动器材。出门自己带购物袋，不需要商场的购物袋，不要接受免费的赠品。购物的时候要考虑东西是否对自己有用。而不是看买哪件还是哪件好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不去特定去看优惠的信息，要到需要的时候去买，而不是看到优惠才想自己需不需要买。两者前后顺序不一样。不管多便宜，只买有用的东西即使免费送，也只接受需要的东西。学会扔掉的习惯。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会用东西来代替自己需要的东西。如果你在考虑你是否需要买一样东西的时候，可以考虑这样东西，是否有无都对你无所谓。如果是就不买。跟比人说“谢谢”的时候，要注释对方的眼睛并微笑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每天至少仰望一次天空。r吃饭的时候不可一心二用，如一边吃饭一边看电视。回家之后，一定要把手提包和外套放到固定位置，回家之后，把脱下来的鞋摆好。在泡澡之前让孩子（或自己）将玩具放好。最好不要使用淋浴，而是盆浴。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每天闭目静坐5分钟。尽量一天之内整理好已经晒干的衣物。在固定的时间看电视在固定的时间上网，玩游戏。睡觉之前，确保地面上没有任何东西。睡觉之前，不要在水槽中放置需要洗涤的衣物。睡觉之前，准备好第二天外出时所需的物品。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;每一条都很受用，慢慢领悟慢慢做，如果都做到了，你就成功了：&quot;&gt;&lt;a href=&quot;#每一条都很受用，慢慢领悟慢慢做，如果都做到了，你就成功了：&quot; class=&quot;headerlink&quot; title=&quot;每一条都很受用，慢慢领悟慢慢做，如果都做到了，你就成功了：&quot;&gt;&lt;/a&gt;每一条都很受用，慢慢领悟慢慢做，如果都做到了，你就成功了：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每天用吸尘器把房间打扫一遍。每三天擦拭一次地板和家具。把一年之内不打算穿的衣服处理掉（出售，转赠，扔掉）对那些沾有污垢或开线的衣物进行修补，无法修补的处理掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理掉不佩戴的饰品。处理掉夹脚或基本不穿的鞋。将那些毫无“用武之地”的领带处理掉处理掉那些变旧或使用起来不舒服的毛巾。处理掉多余的被褥及亚麻类用品处理掉那些毫无用处的家具和电器。处理掉那些没有保存价值的信–仅仅是问候的信？邮递广告。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扔掉那些没有放入相册中或没有保存必要的照片处理掉已经用不到的婴儿车等婴儿用品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理掉不玩的玩具在一个月前的杂志中，找出有保存价值的保存起来，其余的处理掉。处理掉那些读过后感觉没有保存价值的书（出售，送人，扔掉）处理掉那些听过后没有感觉没有保存价值的dvd处理掉那些录好后一直没有看过的录像处理掉那些拆开没再碰过的赠品或礼物处理掉不喜欢的装饰品处理掉那些不用的餐具盒烹饪用具去自己喜欢的饭店遇到东西用完的情况时，尽量选择不购买，试着用其他方式代替，以不增加物品，一定要买，则要选择可以使生活变得更加简单的物品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择购买食品时，选那些没有附带赠品的东西；不要申请会员卡。不要轻易在跳蚤市场买东西，不要图便宜货觉得有趣就盲目购买。不要轻易在外出旅行时购买纪念品。尽量使用充电电池。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;吃剩的冷冻食品不要在继续保存。不让免费的物品进入家里，家里的东西就会慢慢变少。不购买那些长期储藏品使家中物品的数量缩减20%银行卡有钱才买商品，不能提前透支。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多出去旅行或听音乐会，以此来取代购物。对于长期处于无精打采的状态的人，应该美美的睡一觉，吃一顿，欣赏美丽的风景，给予身体和心灵养分。约朋友出来见个面。帮助不肯扔东西的人，一点点的开始扔垃圾，即使当事人发现了，自己也要装作不知道。需要“从无论怎么看都是垃圾”的东西开始。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;我很喜欢这一条：&quot;&gt;&lt;a href=&quot;#我很喜欢这一条：&quot; class=&quot;headerlink&quot; title=&quot;我很喜欢这一条：&quot;&gt;&lt;/a&gt;我很喜欢这一条：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对于兴趣爱好，即使花费时间，也不能花费金钱的原则，另外，如果对某件事情产生了兴趣，就一定要坚持到底。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果对很多事情都感兴趣，尽量选择那些不需要太多东西的爱好。对某一事情产生兴趣时，尽量租借所需的物品。如果对某一爱好不感兴趣了，就将与之有关的东西赠与或借给他人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于那些即使花钱也很难坚持到底的兴趣，要趁早放弃。从你最介意的地方开始处理，并要保证处理后东西不会再增加。衣服的分类1工作2游玩3日常生活4正式场合需要处理的东西报纸，宣传单各种通知单剪报，发票会员卡，积分卡纸盒发票要坚持放在固定的地方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理掉不用的会员卡，不接受新的会员卡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;早起30分钟，让你的时间渐渐地宽裕起来。认真地享受自己的每一餐（包括做饭的过程），这样你的心情也会得到放松。仰望天空无须花费你很多时间，但却能使你的生活变得悠闲，舒适。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0530.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你把幸福掌握在手中的时候，它看起来总是微不足道，但当它不见的时候，你才会了解它是多么重要和珍贵。 —— 马克西姆·高尔基&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每日给自己一句话：多谈些问题，少谈些主义。 —— 胡适&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>番茄工作法实践</title>
    <link href="williamliuwen.cn/2015/05/23/AWblog/2015/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%AE%9E%E8%B7%B5/"/>
    <id>williamliuwen.cn/2015/05/23/AWblog/2015/番茄工作法实践/</id>
    <published>2015-05-23T11:53:26.000Z</published>
    <updated>2016-08-13T13:21:56.000Z</updated>
    
    <content type="html">&lt;p&gt;每日给自己一句话：背人说话没好事儿&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;一生大概有80年，一年大概有12个月，大概有365天，每天有24个小时，除了8小时的睡觉时间，16个小时都在工作，学习，生活，旅游，发呆。&lt;/p&gt;
&lt;p&gt;你的一生是否幸福快乐自由享受，就在乎这80年里面，你是否过得幸福快乐自由享受；也在乎每天年中365天里面你是否过得幸福快乐自由享受；也在乎你每天16个小时里面，你是否过得幸福快乐自由享受。&lt;/p&gt;
&lt;p&gt;珍惜你一天里面的16个小时，不要浪费，不给花在无关的事，无关的人上面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;工作日&quot;&gt;&lt;a href=&quot;#工作日&quot; class=&quot;headerlink&quot; title=&quot;工作日&quot;&gt;&lt;/a&gt;工作日&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我的工作日：一天里面大概有10个番茄时间花在学习上，就是花了5个小时了，还剩下11个小时，一个小时2个番茄时间，就是说还有22个番茄时间，我都用在了哪里呢：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;番茄时间完成的原则：具体时间根据具体情况而定，只要能完成总的番茄时间。对于番茄时间被打断是否承认为番茄时间问题上，还在考虑中。&lt;/li&gt;
&lt;li&gt;下面的计划只是用一个月以内，根据以后具体的角色改变而改变。&lt;/li&gt;
&lt;li&gt;我的工作：睡觉时间标准比例是：晚上10点–白天6点&lt;/li&gt;
&lt;li&gt;我的工作：工作学习生活旅游时间是：白天6点–晚上10点，划分的细致一点是：&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;我的工作：一天下来总共需要完成14个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;早上&quot;&gt;&lt;a href=&quot;#早上&quot; class=&quot;headerlink&quot; title=&quot;早上&quot;&gt;&lt;/a&gt;早上&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;6点-1点，7个小时，&lt;/li&gt;
&lt;li&gt;在家里待的时间是2个小时（可以利用2个番茄时间，1小时）1/2=50%；&lt;/li&gt;
&lt;li&gt;在公司待的时间8点–1点，就是5小时（可以利用4个番茄时间，2小时），2/5=40%。可以扩充多1个番茄时间：2.5/5=50%  下午1点-6点，5个小时（可以利用4个番茄时间，2小时），2/5=40%。可以扩充多1个番茄时间：2.5/5=50%  &lt;/li&gt;
&lt;li&gt;晚上6点-10,4个小时，6点-8点吃饭休息洗澡时间，8点-10点（有2个番茄时间可以利用）剩下1个小时什么都不做。&lt;/li&gt;
&lt;li&gt;剩下的一个小时，可以陪伴家人，可以跟宝宝聊天早上：家里2个番茄时间；公司5个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;下午：&quot;&gt;&lt;a href=&quot;#下午：&quot; class=&quot;headerlink&quot; title=&quot;下午：&quot;&gt;&lt;/a&gt;下午：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;公司5个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;完成：&quot;&gt;&lt;a href=&quot;#完成：&quot; class=&quot;headerlink&quot; title=&quot;完成：&quot;&gt;&lt;/a&gt;完成：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;家里2个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;周末&quot;&gt;&lt;a href=&quot;#周末&quot; class=&quot;headerlink&quot; title=&quot;周末&quot;&gt;&lt;/a&gt;周末&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我的周末：睡觉时间标准比例是：晚上10点–白天8点，周六除外，周六需要10点起床；我的周末：基于周末可能有时候会有事情办，对于没有时间安排的番茄时间，可以具体说明时间都去哪里了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;我的周六：总共需要完成12个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;早上10点-1点，3个小时，吃饭时间12点-1点包括休息，完全可以利用时间10-12点，2个小时，4个饭番茄时间  下午1点-6点，5个小时，吃饭时间5点-6点，完全可以利用时间1点-5点，4个小时，8个番茄时间  晚上6点-10,6点-8点，陪伴家人时间，休息，8点-10点，自己休息时间，自由发挥。早上：4个番茄时间;下午：8个番茄时间;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我的周日：总共需要完成16个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;早上8点-1点，5个小时，吃饭时间12点-1点包括休息，完全可以利用时间8点-12点，4个小时，8个饭番茄时间  下午1点-6点，5个小时，吃饭时间5点-6点，完全可以利用时间1点-5点，4个小时，8个番茄时间  晚上6点-10,6点-8点，陪伴家人时间，休息，8点-10点，自己休息时间，自由发挥。早上：8个番茄时间;下午：8个番茄时间;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每日给自己一句话：背人说话没好事儿&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>番茄工作法介绍</title>
    <link href="williamliuwen.cn/2015/05/22/AWblog/2015/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>williamliuwen.cn/2015/05/22/AWblog/2015/番茄工作法介绍/</id>
    <published>2015-05-22T13:11:43.000Z</published>
    <updated>2016-08-13T13:22:06.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;每日给自己一句话：I didn’t allude to anything or anybody.(我并未影射任何人或任何事)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;总共40多条，带你全面领悟番茄的乐趣：&quot;&gt;&lt;a href=&quot;#总共40多条，带你全面领悟番茄的乐趣：&quot; class=&quot;headerlink&quot; title=&quot;总共40多条，带你全面领悟番茄的乐趣：&quot;&gt;&lt;/a&gt;总共40多条，带你全面领悟番茄的乐趣：&lt;/h3&gt;&lt;p&gt;1、采用简单的工具，比如铅笔，纸，不容易引起分心的工具。&lt;/p&gt;
&lt;p&gt;2、一个番茄时间有30分钟，包括25分钟工作时间和一个5分钟休息时间&lt;/p&gt;
&lt;p&gt;3、一个番茄时间不能被划分，不能被中断，如果发上所说情况，重新开始计算番茄时间。25分钟纯粹工作时间，然后休息3-5分钟。&lt;/p&gt;
&lt;p&gt;4、到了休息时间，必须停止工作，就算你觉得你能再这休息的几分钟内完成你的工作。&lt;/p&gt;
&lt;p&gt;5、休息时间能做的事情：在房间走一走；喝杯水；策划一下你假期的行程；坐坐深呼吸；伸展鱼洞；与同事分享快乐。&lt;/p&gt;
&lt;p&gt;6、每4个番茄时间，进行一段长时间的休息，15-30分钟。&lt;/p&gt;
&lt;p&gt;7、15-30分钟休息时间可以做的事情：不去做复杂的事情；喝一杯咖啡；散步；清理办公桌；检查电子邮件。&lt;/p&gt;
&lt;p&gt;8、特殊情况：当前的番茄时间作废&lt;/p&gt;
&lt;p&gt;9、完成一项任务后就开始下一项任务，直到所有任务完成，并且一定要休息好。&lt;/p&gt;
&lt;p&gt;10、对于番茄工作法来说，开始时间或者是结束时间并不重要，重要的是完成任务所用的番茄数。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;11、被别人打断分两种：外部因素和内部因素;内部因素与注意力不集中联系在一起。应对这种情况：可以在计划外的紧急事件内标注内部因素原因。花在打断上的时间越少越好，至多几秒钟，否则，打断就真正成立。&lt;/p&gt;
&lt;p&gt;12、如果遇到计划外的紧急事件，可以在下一个番茄时间处理这件事，而保证现在这个番茄时间不被打断。&lt;/p&gt;
&lt;p&gt;13、如果发生的紧急事情你必须打断现在的番茄时间，那么就把当前的番茄时间作废，就算马上要响铃也是一样。&lt;/p&gt;
&lt;p&gt;14、应对被外部因素打断的方法：快速记录事情，推迟事情，并写进日程表，询问打断你的人是否同意。&lt;/p&gt;
&lt;p&gt;15、要做到我们不再被轻易打断，而是由我们来操控打断&lt;/p&gt;
&lt;p&gt;16、应对打断：每天抽出一个番茄时间来安排这些打断，让打断变成事件&lt;/p&gt;
&lt;p&gt;17、要做到成功的拖延打断，越迟越好，尽量减轻这些打断的紧急程度，增加这些打断的可控制性。把打断的时间缩短越小越好。&lt;/p&gt;
&lt;p&gt;18、每天结束是，把内部打断和外部打断都记录进档案中，观察分析它们，努力克服这些打断，使打断最小化。&lt;/p&gt;
&lt;p&gt;19、如果一项任务的估测值大于5到7个番茄数，那么就打散它。&lt;/p&gt;
&lt;p&gt;20、选出的任务的番茄总数，既可用番茄总数，不要超过自己今天所能完成的极限。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;21、在所有8个番茄时间之外再增加任务是没有意义的。如果完成了所有任务而可用番茄树还没用完，则需要从活动清单中跳出任务来填补没有完成的番茄树，直到完成为止。&lt;/p&gt;
&lt;p&gt;22、通过对任务进行番茄数的估测&lt;/p&gt;
&lt;p&gt;23、不是每个项目都是可以估测的，通过学习一些前沿的资料，然后再进行思路整理，再进行估测。&lt;/p&gt;
&lt;p&gt;24、每个番茄时间25分钟，不需要被改变。逐渐形成生物钟&lt;/p&gt;
&lt;p&gt;25、&lt;/p&gt;
&lt;p&gt;26、一轮即四个饭去欸时间。每轮的第一个番茄时间可以用来回顾之前的工作，每轮的最后一个番茄时间对这一轮中工作的总结。可以试着大声朗读，或复述给你的同伴听，那会使回顾和总结变得更加有效。有规律地回顾和总结能激发你的学习热情，促进你获得新的知识，温故而知新。&lt;/p&gt;
&lt;p&gt;27、如果没有空闲时间，我们是在把自身的能量消耗殆尽，创造力、想象力、好奇心都会被磨灭，就像引擎没有了燃料。&lt;/p&gt;
&lt;p&gt;28、作息时间表是对每日进程和结果的估测。一旦填好了工作计划表，今天的目标就明显了，要做多少事，要完成多少任务，我们会尽力去完成这些人物。如果时间用完了，我们还没有完成任务，我们会想哪里除了错误。&lt;/p&gt;
&lt;p&gt;29、要遵守作息时间表&lt;/p&gt;
&lt;p&gt;30、一份好的作息时间表，必须包含充足的空闲时间&lt;/p&gt;
&lt;h4 id=&quot;如果看累了，可以休息一下，不需要一次看完，要慢慢品！&quot;&gt;&lt;a href=&quot;#如果看累了，可以休息一下，不需要一次看完，要慢慢品！&quot; class=&quot;headerlink&quot; title=&quot;如果看累了，可以休息一下，不需要一次看完，要慢慢品！&quot;&gt;&lt;/a&gt;如果看累了，可以休息一下，不需要一次看完，要慢慢品！&lt;/h4&gt;&lt;p&gt;31、为了保证这种负荷的工作能够得到积极的结果，而不陷入上面提到的恶性循环，你不能连续超负荷超过5天。威这段时期制定一份特殊的作息时间表，并预留一定的恢复时间，以应对不可避免的工作效率下降。&lt;/p&gt;
&lt;p&gt;32、完美的作息时间表例子：&lt;/p&gt;
&lt;p&gt;33、最重要的是坚持，坚持记录，分析，反馈才能得到真正属于你自己的有效方案&lt;/p&gt;
&lt;p&gt;34、要清除地知道自己，怎样的安排对自己是最有效的。&lt;/p&gt;
&lt;p&gt;35、番茄例子：一个全天学习的学生:8:30–12:30和1:30–5:30;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;早上两轮，下午两轮;早上第一轮4个番茄；第二轮3个番茄;下午第三轮4个番茄；第四轮3个番茄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;早上第一轮第一个番茄用来整理和计划你今天要做的事情；接下来的3个番茄时间和第二轮的前两个番茄时间用来学习；第二轮的第三个番茄时间用来查看和回复邮件等处理打断的最好方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下午第三轮的第一个番茄时间，回顾早上学习的内容。第三轮后3个番茄用来学习；第四轮前两个番茄时间，复习今天学的内容，总结，整理，浏览最近几天内学习的东西。最后一个番茄时间，用来记录档案，分析档案，信息反馈。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;36、每个番茄时间后的休息时间不能少于3到5分钟，当你特别累的时候，至多可休息10分钟。超过5到10分钟也是不可取的，那会打乱番茄工作法的节奏，如果真的特别累，还是要等到一轮番茄时间结束后再延长休息时间，遮掩工会更佳合适。&lt;/p&gt;
&lt;p&gt;37、番茄工作法手机软件（xplabs开发的）；厨房带有静音功能的电子计时器；番茄工作法PC版软件aka soft-pomodoro(jtomato)&lt;/p&gt;
&lt;p&gt;38、番茄工作法强调，要把精力放在当前的番茄时间上，完成了，就跳到下一个番茄时间，你的注意力要放在当下，而不是过去或者将来的空想。&lt;/p&gt;
&lt;p&gt;39、当自己感到迷失，那就停下来，用一个番茄时间去思考问题，重新安排工作计划，制定作息时间表，然后再继续工作。&lt;/p&gt;
&lt;p&gt;40、机械的番茄计时器是最好的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;41、番茄工作法的好处之一是提高估测能力。&lt;/p&gt;
&lt;p&gt;42、强调：如果一项任务的估测值大于5到7个番茄时间，就必须打散它。&lt;/p&gt;
&lt;p&gt;43、如果自己觉得特别累，就减少每轮番茄的个数（比如每轮4个番茄减少到每轮3个），并且延长每轮之间的休息时长。你越是感到累或是烦躁，就越是需要停下来反思，休息，而不是不惜一切继续前进。&lt;/p&gt;
&lt;p&gt;44、不要去追求已经失去的时间，而是要努力做好当前的工作。&lt;/p&gt;
&lt;p&gt;45、遵守纪律是番茄工作法保持高效率的关键&lt;/p&gt;
&lt;p&gt;46、作息时间表分为工作时间和空闲时间，空闲时间我们就不再需要番茄工作法。&lt;/p&gt;
&lt;p&gt;47、休息时间：只能从事简单的事情。&lt;/p&gt;
&lt;p&gt;48、每天都要对记录的数据进行观察和分析&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其他学习笔记&lt;br&gt;学习《如何掌控自己的时间和生活》&lt;/p&gt;
&lt;p&gt;1、我们很有效率，但是没有目标;我们笨鸟先飞，但是不知所踪&lt;/p&gt;
&lt;p&gt;2、在如何应用时间这件事情上，做出正确的选择要比更快更好地完成手头的工作更加重要。&lt;/p&gt;
&lt;p&gt;3、每个人每个星期都只有168个小时&lt;/p&gt;
&lt;p&gt;4、有时候你必须做一些别人希望你做的事情。&lt;br&gt;学习《时间投资法》&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0523.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的那些最重要的发现是受到失败的启示而作出的。 —— 汉弗里·戴维    &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;每日给自己一句话：I didn’t allude to anything or anybody.(我并未影射任何人或任何事)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络专家认识论</title>
    <link href="williamliuwen.cn/2014/05/28/AWblog/2014/%E7%BD%91%E7%BB%9C%E4%B8%93%E5%AE%B6%E8%AE%A4%E8%AF%86%E8%AE%BA/"/>
    <id>williamliuwen.cn/2014/05/28/AWblog/2014/网络专家认识论/</id>
    <published>2014-05-28T01:50:45.000Z</published>
    <updated>2016-08-13T13:18:42.000Z</updated>
    
    <content type="html">&lt;p&gt;每日给自己一句话：在没有成功之前都是在做量的积累；&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;专家&quot;&gt;&lt;a href=&quot;#专家&quot; class=&quot;headerlink&quot; title=&quot;专家&quot;&gt;&lt;/a&gt;专家&lt;/h2&gt;&lt;h3 id=&quot;职称：&quot;&gt;&lt;a href=&quot;#职称：&quot; class=&quot;headerlink&quot; title=&quot;职称：&quot;&gt;&lt;/a&gt;职称：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;高级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作在大的网络公司、或研究所&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要是技术主管、项目经理、技术专家&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1、技术专家&quot;&gt;&lt;a href=&quot;#1、技术专家&quot; class=&quot;headerlink&quot; title=&quot;1、技术专家&quot;&gt;&lt;/a&gt;1、技术专家&lt;/h4&gt;&lt;h5 id=&quot;工作描述：&quot;&gt;&lt;a href=&quot;#工作描述：&quot; class=&quot;headerlink&quot; title=&quot;工作描述：&quot;&gt;&lt;/a&gt;工作描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;某一行业的专家、顾问、权威；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果的确非常喜爱技术工作，而不擅长和喜欢与人沟通，则可以完全专注于自身的领域，以发展成为行业资深专家为方向和目标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发展过程比较漫长，任何一个领域的顶尖技术人才都需要长期的行业经验的累积和个人孜孜不倦的投入；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优势是越老越吃香，当别人随着年龄的逐步增长而开始担心饭碗问题时，你则渐入佳境，开始进入职业发展的黄金时期。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;工作要求：&quot;&gt;&lt;a href=&quot;#工作要求：&quot; class=&quot;headerlink&quot; title=&quot;工作要求：&quot;&gt;&lt;/a&gt;工作要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全面的网络技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对新技术有深刻的认识，所以要求有极强的学习能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：&quot;&gt;&lt;a href=&quot;#就业前景：&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;待遇很高，技术人员到30岁后的发展目标之一&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2、项目经理&quot;&gt;&lt;a href=&quot;#2、项目经理&quot; class=&quot;headerlink&quot; title=&quot;2、项目经理&quot;&gt;&lt;/a&gt;2、项目经理&lt;/h4&gt;&lt;h5 id=&quot;工作内容：&quot;&gt;&lt;a href=&quot;#工作内容：&quot; class=&quot;headerlink&quot; title=&quot;工作内容：&quot;&gt;&lt;/a&gt;工作内容：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;融合技术和管理的复合性人才&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参与项目谈判&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目目标和项目财务指标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;划分工作内容并合理分配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指导网络工程师&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;控制工作的进度，按计划完成项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组织项目会议&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;职位要求：&quot;&gt;&lt;a href=&quot;#职位要求：&quot; class=&quot;headerlink&quot; title=&quot;职位要求：&quot;&gt;&lt;/a&gt;职位要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多年的网络工程师经验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;希望做管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要自己学习项目管理知识&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：-1&quot;&gt;&lt;a href=&quot;#就业前景：-1&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;技术人员到35岁后的发展目标之一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;待遇高，可晋升企业核心管理层&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3、技术主管&quot;&gt;&lt;a href=&quot;#3、技术主管&quot; class=&quot;headerlink&quot; title=&quot;3、技术主管&quot;&gt;&lt;/a&gt;3、技术主管&lt;/h4&gt;&lt;h5 id=&quot;工作任务描述：&quot;&gt;&lt;a href=&quot;#工作任务描述：&quot; class=&quot;headerlink&quot; title=&quot;工作任务描述：&quot;&gt;&lt;/a&gt;工作任务描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;带领技术团队创造更多的价值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在信息方面参与公司的规划和计划&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;职位要求：-1&quot;&gt;&lt;a href=&quot;#职位要求：-1&quot; class=&quot;headerlink&quot; title=&quot;职位要求：&quot;&gt;&lt;/a&gt;职位要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;技术全面；有管理能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：-2&quot;&gt;&lt;a href=&quot;#就业前景：-2&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;是网络工程师30岁后的发展方向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0528.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每日给自己一句话：在没有成功之前都是在做量的积累；&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络管理员认识论</title>
    <link href="williamliuwen.cn/2014/05/27/AWblog/2014/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98%E8%AE%A4%E8%AF%86%E8%AE%BA/"/>
    <id>williamliuwen.cn/2014/05/27/AWblog/2014/网络管理员认识论/</id>
    <published>2014-05-27T15:52:15.000Z</published>
    <updated>2016-08-13T13:18:34.000Z</updated>
    
    <content type="html">&lt;p&gt;每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;网络工程师里面的最低级别：&lt;/p&gt;
&lt;h4 id=&quot;网络管理员&quot;&gt;&lt;a href=&quot;#网络管理员&quot; class=&quot;headerlink&quot; title=&quot;网络管理员&quot;&gt;&lt;/a&gt;网络管理员&lt;/h4&gt;&lt;h4 id=&quot;职称：&quot;&gt;&lt;a href=&quot;#职称：&quot; class=&quot;headerlink&quot; title=&quot;职称：&quot;&gt;&lt;/a&gt;职称：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作在中小企业，涵盖网络基础设施管理、网络操作系统管理、网络应用系统管理、网络用户管理、网络安全保密管理、信息存储备份管理和网络机房管理等几大方向。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些管理涉及到多个领域，每个领域的管理又有各自特定的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;主要岗位：&quot;&gt;&lt;a href=&quot;#主要岗位：&quot; class=&quot;headerlink&quot; title=&quot;主要岗位：&quot;&gt;&lt;/a&gt;主要岗位：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;网络管理员（系统管理员）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;工作职责描述：&quot;&gt;&lt;a href=&quot;#工作职责描述：&quot; class=&quot;headerlink&quot; title=&quot;工作职责描述：&quot;&gt;&lt;/a&gt;工作职责描述：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;网络本身的管理；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络中操作/应用系统的管理(在大型企业、外资、合资企业中通常称之为“MIS（Manger Information System，信息系统管理员）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两者的区别主要是：网络管理员重在OSI下3层，系统管理员则主要在系统维护和公司信息系统管理上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;就业前景：&quot;&gt;&lt;a href=&quot;#就业前景：&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;是一个专业网络人员必经的初始阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;待遇：&quot;&gt;&lt;a href=&quot;#待遇：&quot; class=&quot;headerlink&quot; title=&quot;待遇：&quot;&gt;&lt;/a&gt;待遇：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1800元——3000元（视专业的掌握程度以及技术的熟练度而定）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0527.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;天作孽，犹可违；自作孽，不可逭。 —— 《尚书·太甲中》&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
