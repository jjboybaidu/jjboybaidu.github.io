<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>太阳在的地方</title>
  <subtitle>知我者谓我心忧，不知我者谓我何求。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="williamliuwen.cn/"/>
  <updated>2016-08-04T11:43:36.000Z</updated>
  <id>williamliuwen.cn/</id>
  
  <author>
    <name>刘 小汶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS人机交互</title>
    <link href="williamliuwen.cn/2016/08/04/iOS%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/"/>
    <id>williamliuwen.cn/2016/08/04/iOS人机交互/</id>
    <published>2016-08-04T11:36:27.000Z</published>
    <updated>2016-08-04T11:43:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;人机交互摘要&quot;&gt;&lt;a href=&quot;#人机交互摘要&quot; class=&quot;headerlink&quot; title=&quot;人机交互摘要&quot;&gt;&lt;/a&gt;人机交互摘要&lt;/h2&gt;&lt;p&gt;1）将重要内容和功能放到更重要的位置，以便用户可以更容易地关注主要任务&lt;br&gt;“一些可行的方法是，将主要元素放置在屏幕的上半部分，并靠近屏幕左侧（基于从左至右的阅读习惯）：&lt;br&gt;”&lt;/p&gt;
&lt;p&gt;2）给每个交互元素以足够的间距，以便用户对内容和控件进行操作&lt;br&gt;“可点击控件的点击区域不小于 44 x 44 点&lt;/p&gt;
&lt;p&gt;3）如果只有部分功能不可用，那在用户用到这些功能时提供解释界面或者提示&lt;/p&gt;
&lt;p&gt;4）如果所有的功能都不可用，就向用户展示一个界面去描述问题并建议用户如何纠正&lt;br&gt;“这能给用户一种反馈，让他们觉得你的 app 并没有出错。这也会赋予用户以控制感，让他们来决定是采取纠正措施并继续使用你的 app，还是切换到另一个 app。”&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;5）App 重启后要恢复其状态，以便用户可以从中断的地方继续使用，而不要让用户去记住如何返回之前所在的位置&lt;br&gt;“你可以前往「State Preservation and Restoration」了解更多关于高效重建和恢复 app 状态的方式。”&lt;/p&gt;
&lt;p&gt;6）显示一个和 app 首屏极其相似的启动画面&lt;br&gt;“显示一个和 app 首屏极其相似的启动画面。iOS 会在你的 app 启动的瞬间显示这个启动画面，这可以让用户感觉你的 app 非常快，并让你有足够的时间去加载内容。参阅「启动画面」（第 180 页）了解如何创建启动画面。”&lt;/p&gt;
&lt;p&gt;7）避免要求用户提供设置信息&lt;/p&gt;
&lt;p&gt;8）尽可能将登陆延后&lt;br&gt;“最好在用户没有登录时就可以通过导航来浏览你的 app 并使用部分功能。用户在在可以做点有用的事情前通常已经从那些强制他们登录的 app 中离开了。”&lt;/p&gt;
&lt;p&gt;9）尽可能避免在界面中出现不一致的样式&lt;br&gt;“通常来说，拥有相似功能的元素看上去也应该很像。用户常常会认为那些他们所看到的不一致背后必定富有深意，然后花时间去理解它们。”&lt;/p&gt;
&lt;p&gt;10）确保主要内容在默认尺寸下可以被阅读和理解&lt;br&gt;例如，用户不应需要滚动才读到重要文本，或者放大图片才能看到主要内容。&lt;/p&gt;
&lt;h2 id=&quot;导航栏样式&quot;&gt;&lt;a href=&quot;#导航栏样式&quot; class=&quot;headerlink&quot; title=&quot;导航栏样式&quot;&gt;&lt;/a&gt;导航栏样式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;导航栏样式原则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1）层级式：就是APP常用的界面跳转的样式；&lt;/p&gt;
&lt;p&gt;2）扁平式：就是底部标签栏之间的跳转的样式；&lt;/p&gt;
&lt;p&gt;3）内容/体验主导式：就是打游戏的时候，移动地图看不同的关数的样式；&lt;/p&gt;
&lt;h2 id=&quot;使用模态&quot;&gt;&lt;a href=&quot;#使用模态&quot; class=&quot;headerlink&quot; title=&quot;使用模态&quot;&gt;&lt;/a&gt;使用模态&lt;/h2&gt;&lt;p&gt;1）模态使用场景限制：&lt;br&gt;“非常需要吸引用户注意&lt;br&gt;必须完成自包含任务（或明确放弃），以避免让用户的数据处于不明确状态”&lt;/p&gt;
&lt;p&gt;2）“保持模态任务简短精炼。&lt;br&gt;你不会希望用户将模态视图看成是你 app 中的一个小程序。如果子任务过于复杂，用户在进入模态情境时会忽略他们的主要任务。在创建一个涉及层级视图的模态任务时需要尤为谨慎，因为用户会感到迷茫以及忘记如何原路返回。如果模态任务必须在多个视图中包含子任务，确保在层级之间给用户一个唯一、清晰的路径，并避免产生循环。如需了解使用模态视图的准则，请参阅「模态视图」（第 170 页）。&lt;/p&gt;
&lt;p&gt;3）始终提供一个明显而安全地退出模态任务的方式。&lt;br&gt;当用户退出模态视图时，他们通常会知道其任务会被结束。”&lt;/p&gt;
&lt;p&gt;4）“如果任务需要一系列多层级的模态视图，&lt;br&gt;请确保用户在轻点次顶层视图中的「完成」按钮时知道会发生什么。检查任务流程，以决定次级视图中的「完成」按钮是仅仅完成视图中的部分任务，还是完成整个任务。鉴于存在混淆的可能性，请尽可能避免在附属视图中使用「完成」按钮。&lt;/p&gt;
&lt;p&gt;5）使用警告框传达必要——且可操作——的信息。&lt;br&gt;警告框会中断用户的体验过程，并需要一次点击才能结束，因此让用户获知警告框出现的合理性是很重要的。如需了解更多信息，请参阅「警告框」（第 165 页）。&lt;/p&gt;
&lt;p&gt;6）尊重用户关于接收通知信息的设定。&lt;br&gt;在「设置」中，用户会设置希望以怎样的方式接收来自你的 app 的通知信息。请确保遵循这些设定，以免用户关闭来自你 app 的所有通知消息。”&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;人机交互摘要&quot;&gt;&lt;a href=&quot;#人机交互摘要&quot; class=&quot;headerlink&quot; title=&quot;人机交互摘要&quot;&gt;&lt;/a&gt;人机交互摘要&lt;/h2&gt;&lt;p&gt;1）将重要内容和功能放到更重要的位置，以便用户可以更容易地关注主要任务&lt;br&gt;“一些可行的方法是，将主要元素放置在屏幕的上半部分，并靠近屏幕左侧（基于从左至右的阅读习惯）：&lt;br&gt;”&lt;/p&gt;
&lt;p&gt;2）给每个交互元素以足够的间距，以便用户对内容和控件进行操作&lt;br&gt;“可点击控件的点击区域不小于 44 x 44 点&lt;/p&gt;
&lt;p&gt;3）如果只有部分功能不可用，那在用户用到这些功能时提供解释界面或者提示&lt;/p&gt;
&lt;p&gt;4）如果所有的功能都不可用，就向用户展示一个界面去描述问题并建议用户如何纠正&lt;br&gt;“这能给用户一种反馈，让他们觉得你的 app 并没有出错。这也会赋予用户以控制感，让他们来决定是采取纠正措施并继续使用你的 app，还是切换到另一个 app。”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS规范</title>
    <link href="williamliuwen.cn/2016/08/03/iOS%E8%A7%84%E8%8C%83/"/>
    <id>williamliuwen.cn/2016/08/03/iOS规范/</id>
    <published>2016-08-03T13:22:13.000Z</published>
    <updated>2016-08-04T11:43:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h2&gt;&lt;p&gt;1.iOS命名原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可读性高、可复用、易维护、可扩展&lt;/li&gt;
&lt;li&gt;防止命名冲突(通过加前缀来保证)&lt;/li&gt;
&lt;li&gt;每个模块都要加上自己的前缀, 前缀在编程接口中非常重要, 可以区分软件的功能范畴并防止不同文件或者类之间命名发生冲突, 比如相册模块(PhotoGallery)的代码都以PG作为前缀: PGAlbumViewController, PGDataManager.&lt;/li&gt;
&lt;li&gt;可扩展则是要求写代码时要考虑后面的扩展需求, 这个属于架构层面的东东, 利用对应的设计模式来保证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.iOS常量命令&lt;/p&gt;
&lt;p&gt;1）对于常量的命名最好在前面加上字母k作为标记. 如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static const NSTimeInterval kAnimationDuration = 0.3;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2）定义作为NSDictionary或者Notification等的Key值字符串时加上const关键字, 以防止被修改. 如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString *const UIApplicationDidEnterBackgroundNotification&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）若常量作用域超出编译单元(实现文件), 需要在类外可见时, 使用extern关键字, 并加上该类名作为前缀. 如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extern NSString *const PGThumbnailSize&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;3.iOS枚举命令&lt;/p&gt;
&lt;p&gt;枚举类型命名要加相关类名前缀并且枚举值命名要加枚举类型前缀.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef NS_ENUM(NSInteger, UIViewAnimationTransition) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIViewAnimationTransitionNone,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIViewAnimationTransitionFlipFromLeft,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIViewAnimationTransitionFlipFromRight,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIViewAnimationTransitionCurlUp,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIViewAnimationTransitionCurlDown,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.iOS变量和对象命名&lt;/p&gt;
&lt;p&gt;1）给一个对象命名时建议采用修饰+类型的方式&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;titleLabel    //表示标题的label,  是UILabel类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;confirmButton //表示确认的button, 是UIButton类型&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2）对于BOOL类型, 应加上is前缀&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)isEqualToString:(NSString *)aString&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）如果某方法返回非属性的 BOOL 值, 那么应根据其功能, 选用 has 或 is 当前缀, 如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)hasPrefix:(NSString *)aString&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4）如果某个命名已经很明确了, 为了简洁可以省去类型名. 比如scores, 很明显是个array了, 就不必命名成scoreArray了&lt;/p&gt;
&lt;p&gt;5.iOS命名常规错误&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UserFollowerTableViewController    // 不推荐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserFollowerListController         // OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserLikedTagListController         // 不推荐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TagUserLikedListController         // OK，把显示的对象放在第一位&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;6.iOS通知命名&lt;/p&gt;
&lt;p&gt;这里学习iOS的命名方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSApplicationDidBecomeActiveNotification&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSWindowDidMiniaturizeNotification&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSTextViewDidChangeSelectionNotification&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSColorPanelColorDidChangeNotification&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;7.类名、局部变量、类成员命名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类名采用大驼峰（UpperCamelCase）&lt;/li&gt;
&lt;li&gt;类成员、方法小驼峰（lowerCamelCase）&lt;/li&gt;
&lt;li&gt;局部变量大小写首选小驼峰，也可使用小写下划线的形式（snake_case）&lt;/li&gt;
&lt;li&gt;C函数的命名用大驼峰&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;8.命名规范–函数命名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1)如果方法表示让对象执行一个动作，使用动词打头来命名，注意不要使用do，does这种多余的关键字，动词本身的暗示就足够了;动词打头的方法表示让对象执行一个动作&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)invokeWithTarget:(id)target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)selectTabViewItem:(NSTabViewItem *)tabViewItem;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2)如果方法是为了获取对象的一个属性值，直接用属性名称来命名这个方法，注意不要添加get或者其他的动词前缀&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正确，使用属性名来命名方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (NSSize)cellSize;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;错误，添加了多余的动词前缀&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (NSSize)calcCellSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSSize)getCellSize;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3)对于有多个参数的方法，务必在每一个参数前都添加关键词，关键词应当清晰说明参数的作用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正确，保证每个参数都有关键词修饰&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)sendAction:(SEL)aSelector toObject:(id)anObject forAllCells:(BOOL)flag;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;错误，遗漏关键词&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)sendAction:(SEL)aSelector :(id)anObject :(BOOL)flag;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正确&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (id)viewWithTag:(NSInteger)aTag;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;错误，关键词的作用不清晰&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (id)taggedView:(int)aTag;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4)不要用and来连接两个参数，通常and用来表示方法执行了两个相对独立的操作（从设计上来说，这时候应该拆分成两个独立的方法）：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;错误，不要使用”and”来连接参数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (int)runModalForDirectory:(NSString *)path andFile:(NSString *)name andTypes:(NSArray *)fileTypes;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正确，使用”and”来表示两个相对独立的操作&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)openFile:(NSString *)fullPath withApplication:(NSString *)appName andDeactivate:(BOOL)flag;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;9.命名规范–分组命名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用英文，首字母大写，之后每个单词首字母都大写&lt;/li&gt;
&lt;li&gt;每个分组使用模块的名字&lt;/li&gt;
&lt;li&gt;使用的开源库统一放在“Library”分组下&lt;/li&gt;
&lt;li&gt;使用的公共组件统一放在“Common”分组下&lt;/li&gt;
&lt;li&gt;视图控制器及AppDelegate统一放在“Controllers”分组下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10.命名规范–图片命名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用英文，首字母大写，之后每个单词首字母都大写&lt;/li&gt;
&lt;li&gt;添加模块名作为前缀，避免冲突&lt;/li&gt;
&lt;li&gt;图片应该与类文件一样，按模块分组放置&lt;/li&gt;
&lt;li&gt;只要文件名叫做Icon.png，就会自动被当做是应用程序的图标&lt;/li&gt;
&lt;li&gt;一个应用程序可以准备多种规格的图标，详情可以查看苹果官方文档，ios7 doc set/user expreience/guides/app icons on iPad and iphone&lt;/li&gt;
&lt;li&gt;一个app在启动过程中会全屏显示叫做Default.png的图片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;11.命名规范–特殊类命名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是视图控制器的子类应添加后缀“ViewController”或者“Controller”&lt;/li&gt;
&lt;li&gt;如果是视图的子类应添加后缀“View”&lt;/li&gt;
&lt;li&gt;如果是按钮的子类应添加后缀“Button”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命名规范–补充命名&lt;/p&gt;
&lt;p&gt;常量（预定义，局部常量等）使用小写k开头的驼峰法&lt;br&gt;举例：kInvalidHandle , kWritePerm&lt;/p&gt;
&lt;p&gt;枚举类型命名首字母大写，之后每个单词首字母都大写，最后加“s”&lt;br&gt;枚举变量使用枚举类型去掉“s”作为前缀，每个单词首字母大写，中间不允许加下划线&lt;br&gt;举例：&lt;br&gt;typedef enum UIControlEvents{&lt;br&gt;UIControlEventTouchDown,&lt;br&gt;UIControlEventTouchUpInside&lt;br&gt;}UIControlEvents;&lt;/p&gt;
&lt;h2 id=&quot;编码规范&quot;&gt;&lt;a href=&quot;#编码规范&quot; class=&quot;headerlink&quot; title=&quot;编码规范&quot;&gt;&lt;/a&gt;编码规范&lt;/h2&gt;&lt;p&gt;1.编码规范–判断nil或者YES/NO&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (someObject) &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (!someObject) &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.编码规范–条件赋值&lt;/p&gt;
&lt;p&gt;如果是存在就赋值本身, 那就可以这样简写&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;result = object ? : [self createObject];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.编码规范–初始化方法&lt;/p&gt;
&lt;p&gt;初始化的时候，直接赋值的好处是：&lt;/p&gt;
&lt;p&gt;第一个好处还是简洁&lt;/p&gt;
&lt;p&gt;第二个好处是可以防止初始化进去nil值造成crash&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSArray *names = @[@&amp;quot;Brian&amp;quot;, @&amp;quot;Matt&amp;quot;, @&amp;quot;Chris&amp;quot;, @&amp;quot;Alex&amp;quot;, @&amp;quot;Steve&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary *productManagers = @&amp;#123;@&amp;quot;iPhone&amp;quot; : @&amp;quot;Kate&amp;quot;, @&amp;quot;iPad&amp;quot; : @&amp;quot;Kamal&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *shouldUseLiterals = @YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *buildingZIPCode = @10018;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.编码规范–定义属性&lt;/p&gt;
&lt;p&gt;1）建议定义属性的时候把所有的参数写全, 尤其是如果想定义成只读的(防止外面修改)那一定要加上readonly, 这也是代码安全性的一个习惯.&lt;/p&gt;
&lt;p&gt;2）如果是内部使用的属性, 那么就定义成私有的属性(定义到.m的class extension里面)&lt;br&gt;对于拥有Mutable子类型的对象(e.g. NSString, NSArray, NSDictionary)一定要定义成copy属性. Why? 示例: NSArray的array = NSMutableArray的mArray; 如果mArray在某个地方改变了, 那array也会跟着改变. So, make sense?&lt;/p&gt;
&lt;p&gt;3）尽量不要暴露mutable类型的对象在public interface, 建议在.h定义一个Inmutable类型的属性, 然后在.m的get函数里面返回一个内部定义的mutable变量. Why? For security as well!&lt;/p&gt;
&lt;p&gt;@property (nonatomic, readwrite, copy) NSString *name;&lt;/p&gt;
&lt;p&gt;5.编码规范–BOOL赋值&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BOOL isAdult = age &amp;gt; 18;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;6.编码规范–拒绝死值&lt;/p&gt;
&lt;p&gt;1）死值每次修改的时候容易被遗忘, 地方多了找起来就悲剧了. 而且定义成枚举或者static可以让错误发生在编译阶段. 另外仅仅看到一个数字, 完全不知道这个数字代表的意义. 纳尼?&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (car == Car.Nissan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const int adultAge = 18; if (age &amp;gt; adultAge) &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;7.编码规范–复杂的条件判断&lt;/p&gt;
&lt;p&gt;清晰明了, 每个函数只做一件事!&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if ([self canDeleteJob:job]) &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)canDeleteJob:(Job *)job&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL invalidJobState = job.JobState == JobState.New&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|| job.JobState == JobState.Submitted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|| job.JobState == JobState.Expired;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOOL invalidJob = job.JobTitle &amp;amp;&amp;amp; job.JobTitle.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return invalidJobState || invalidJob;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;8.编码规范–嵌套判断&lt;/p&gt;
&lt;p&gt;一旦发现某个条件不符合, 立即返回, 条理更清晰&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (!user.UserName) return NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (!user.Password) return NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (!user.Email) return NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return YES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;9.编码规范–参数过多&lt;/p&gt;
&lt;p&gt;当发现实现某一功能需要传递的参数太多时, 就预示着你应该聚合成一个model类了…这样代码更整洁, 也不容易因为参数太多导致出错&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user里面有userName、password、email&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)registerUser(User *user)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// to do...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;10.编码规范–把方法进行分类&lt;/p&gt;
&lt;p&gt;1）使用#pragma mark –来分类方法&lt;/p&gt;
&lt;p&gt;#pragma mark – Life Cycle//代表生命周期方法&lt;/p&gt;
&lt;p&gt;#pragma mark - Events//代表事件&lt;/p&gt;
&lt;p&gt;#pragma mark – Private Methods//代表私有方法&lt;/p&gt;
&lt;p&gt;#pragma mark - UITextFieldDelegate//代理&lt;/p&gt;
&lt;p&gt;#pragma mark - UITableViewDataSource//数据源&lt;/p&gt;
&lt;p&gt;#pragma mark - UITableViewDelegate//代理&lt;/p&gt;
&lt;p&gt;#pragma mark - Custom Delegates//自定义代理&lt;/p&gt;
&lt;p&gt;#pragma mark – Getters and Setters//getter和setter方法&lt;/p&gt;
&lt;p&gt;11.编码规范–注释符号&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                文件引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************************************************************************/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                 宏定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************************************************************************/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                 常量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************************************************************************/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                类型定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************************************************************************/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                全局变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************************************************************************/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/***************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                 原型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************************************************************************/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/ ***************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                类特性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************************************************************************/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/ ***************************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                                类的实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************************************************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块代码注释符号&lt;br&gt;1）块注释风格1&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/////////////////////////////////////&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// @name UIButton控件生成相关API&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/////////////////////////////////////&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2）块注释风格2&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 块功能说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）块注释风格3&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 块功能说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用#program mark -  注释内容&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;#program mark 是每个ios程序员都必须会用的技巧，通过#program mark 把代码分为个个部分，良好的注释是好代码的开始&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注释原则&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码中尽量少注释，让代码能自我描述。不过当需要注释的时候，能需要清除的解释某个代码块的含义和作用。注释应当保持最新，如果不必要请删除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;#pragma clang 使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1）取消xcode编译器内对于启用方法的警告&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic push&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic ignored &amp;quot;-Wdeprecated-declarations&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// CODE:这段中出现使用所有的弃用方法都不会产生告警&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic pop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2）取消对未使用变量的警告，使用方法和上面相同，必须成对出现#pragma clang&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//方法1：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;diagnostic ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic ignored &amp;quot;-Wunused-variable&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//方法2：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma unused (foo)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）忽略内存泄露告警&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic push&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic ignored &amp;quot;-Warc-performSelector-leaks&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[someController performSelector: NSSelectorFromString(@&amp;quot;someMethod&amp;quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic pop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;手动产生一条警告&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#warning :手动产生一条告警&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;手动产生一条错误&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#error : 手动产生一条错误&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;12.编码规范–花括号空格&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)methodName:(NSString *)string &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;↑空格                              ↑空格，推荐花括号在一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;空格↑  ↑空格，花括号不要另起一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要换行↑ ↑空格，花括号不要另起一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;13.编码规范–编码注意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个文件方法数不应超过30个&lt;/li&gt;
&lt;li&gt;不要按类别排序（如把IBAction放在一块），应按任务把相关的组合在一起&lt;/li&gt;
&lt;li&gt;禁止出现超过两层循环的代码，用函数或block替代&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;14.编码规范–编码例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;糟糕&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (Task *)creatTaskWithPath:(NSString *)path &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task *aTask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ([path isURL]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ([fileManager isWritableFileAtPath:path]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (![taskManager hasTaskWithPath:path]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aTask = [[Task alloc] initWithPath:path];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return aTask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*建议&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (Task *)creatTaskWithPath:(NSString *)path &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (![path isURL]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (![fileManager isWritableFileAtPath:path]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ([taskManager hasTaskWithPath:path]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task *aTask = [[Task alloc] initWithPath:path];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return aTask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;15.编码规范–编码注释适当使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量让代码可以自表述，而不是依赖注释。&lt;/li&gt;
&lt;li&gt;注释应该表达那些代码没有表达以及无法表达的东西。&lt;/li&gt;
&lt;li&gt;如果一段注释被用于解释一些本应该由这段代码自己表达的东西，我们就应该将这段注释看成一个改变代码结构或编码惯例直至代码可以自我表达的信号。&lt;/li&gt;
&lt;li&gt;我们重命名那些糟糕的方法和类名，而不是去修补。我们选择将长函数中的一些代码段抽取出来形成一些小函数，这些小函数的名字可以表述原代码段的意图，而不是对这些代码段进行注释。&lt;/li&gt;
&lt;li&gt;尽可能的通过代码进行表达。你通过代码所能表达的和你想要表达的所有事情之间的差额将为注释提供了一个合理的候选使用场合。对那些代码无法表达的东西进行注释，而不要仅简单地注释那些代码没有表达的东西。&lt;/li&gt;
&lt;li&gt;方法内部禁止使用块注释。除非要临时注释大段代码，一般情况总应使用行注释。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;16.编码规范–参数分行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正确使用：如果第一段名称过短，后续名称可以以Tab的长度（4个空格）为单位进行缩进&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)short:(GTMFoo *)theFoo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;longKeyword:(NSRect)theRect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;evenLongerKeyword:(float)theInterval&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error:(NSError **)theError &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;错误使用：要么写在一行，要么全部分行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[myObject doFooWith:arg1 name:arg2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error:arg3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myObject doFooWith:arg1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name:arg2 error:arg3];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;17.编码规范–冒号两边&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正确，在语法糖的”[]”或者”{}”两端留有空格&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSArray *array = @[ [foo description], @&amp;quot;Another String&amp;quot;, [bar description] ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary *dict = @&amp;#123; NSForegroundColorAttributeName : [NSColor redColor] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造字典时，字典的Key和Value与中间的冒号:都要留有一个空格&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正确，冒号’:’前后留有一个空格&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary *option1 = @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSFontAttributeName : [NSFont fontWithName:@&amp;quot;Helvetica-Bold&amp;quot; size:12],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSForegroundColorAttributeName : fontColor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正确，按照Value来对齐&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary *option2 = @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSFontAttributeName :            [NSFont fontWithName:@&amp;quot;Arial&amp;quot; size:12],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSForegroundColorAttributeName : fontColor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;错误，冒号前应该有一个空格&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary *wrong = @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AKey:       @&amp;quot;b&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BLongerKey: @&amp;quot;c&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;错误，每一个元素要么单独成为一行，要么全部写在一行内&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary *alsoWrong= @&amp;#123; AKey : @&amp;quot;a&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BLongerKey : @&amp;quot;b&amp;quot; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;错误，在冒号前只能有一个空格，冒号后才可以考虑按照Value对齐&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary *stillWrong = @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AKey       : @&amp;quot;b&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BLongerKey : @&amp;quot;c&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;18.编码规范–程序布局&lt;/p&gt;
&lt;p&gt;1）程序布局目的：程序布局的目的是显示出程序良好的逻辑结构，提高程序的准确性、连续性、可读性、可维护性。更重要的是，统一的程序布局和编程风格，有助于提高整个项目的开发质量，提高开发效率，降低开发成本。同时，对于普通程序员来说，养成良好的编程习惯有助于提高自己的编程水平，提高编程效率。因此，统一的、良好的程序布局和编程风格不仅仅是个人主观美学上的或是形式上的问题，而且会涉及到产品质量，涉及到个人编程能力的提高，必须引起大家重视。&lt;/p&gt;
&lt;p&gt;2）布局中的空格：每个方法或者功能块之间为了结构清晰，应当有且只有一行空格,如下示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface SomeClass:NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (noatomic, strong) UIView *aView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)someMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation SomeClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setAView:(NSInteger )aview &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)someMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）布局中的Private Methods块：正常情况下ViewController里面不应该写&lt;br&gt;不是delegate方法的，不是event response方法的，不是life cycle方法的，就是private method了。对的，正常情况下ViewController里面一般是不会存在private methods的，这个private methods一般是用于日期换算、图片裁剪啥的这种小功能。这种小功能要么把它写成一个category，要么把他做成一个模块，哪怕这个模块只有一个函数也行。&lt;/p&gt;
&lt;p&gt;ViewController基本上是大部分业务的载体，本身代码已经相当复杂，所以跟业务关联不大的东西能不放在ViewController里面就不要放。另外一点，这个private method的功能这时候只是你用得到，但是将来说不定别的地方也会用到，一开始就独立出来，有利于将来的代码复用。&lt;/p&gt;
&lt;p&gt;4）布局中的初始化方法放哪里？&lt;/p&gt;
&lt;p&gt;属性初始化放哪最好？建议在Getter中初始化&lt;/p&gt;
&lt;p&gt;我看到很多APP，甚至我公司的项目，很多开发工程师，初始化属性的位置比较随意，有单独添加一个初始化方法类似setupView的，有在init初始化的，各种情况都有，我其实挺崩溃的，首先初始化方式不一致，其次这样做非常可能破坏了每个方法功能的单一性（每个方法只做一件事）。我比较习惯一个对象的”私有”属性写在extension里面，然后这些属性的初始化全部放在getter里面做，在init和dealloc之外，是不会出现任何类似_property这样的写法的。就是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface CustomObject()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic, strong) UILabel *label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - getters and setters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UILabel *)label &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (_label == nil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_label = [[UILabel alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_label.text = @&amp;quot;1234&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_label.font = [UIFont systemFontOfSize:12];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;... ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return _label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - life cycle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.view addSubview:self.label];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewWillAppear:(BOOL)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[super viewWillAppear:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.label.frame = CGRectMake(1, 2, 3, 4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5）布局中的Getters and Setters放在最底部&lt;/p&gt;
&lt;p&gt;一个view可能会有非常多的view和其他属性,如果getters and setters放在前面，就会导致在implementation代码顶部有大量的初始化代码，这就导致主要的逻辑代码挪到后面去了，其他人阅读代码是不太方便的。&lt;/p&gt;
&lt;p&gt;19.编码规范–表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if语句&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;表达式大括号和其他大括号(if/else/switch/while 等.)总是在同一行语句打开但在新行中关闭。如果没有else 并且括号内只有一行语句，可以和if语句同行，并且不需要括号。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (user.isHappy) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Do something&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Do something else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (somethingIsBad) return something;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Switch语句&lt;blockquote&gt;
&lt;p&gt;大括号在case语句中并不是必须的，除非编译器强制要求。当一个case语句包含多行代码时，大括号应该加上。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;switch (condition) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case 2: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Multi-line example using braces&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case 3:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当在switch使用枚举类型时，’default’是不需要的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch (menuType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case RWTLeftMenuTopItemMain:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case RWTLeftMenuTopItemShows:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case RWTLeftMenuTopItemSchedule:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;headerlink&quot; title=&quot;参考链接&quot;&gt;&lt;/a&gt;参考链接&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/414bb5a53139&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/414bb5a53139&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h2&gt;&lt;p&gt;1.iOS命名原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可读性高、可复用、易维护、可扩展&lt;/li&gt;
&lt;li&gt;防止命名冲突(通过加前缀来保证)&lt;/li&gt;
&lt;li&gt;每个模块都要加上自己的前缀, 前缀在编程接口中非常重要, 可以区分软件的功能范畴并防止不同文件或者类之间命名发生冲突, 比如相册模块(PhotoGallery)的代码都以PG作为前缀: PGAlbumViewController, PGDataManager.&lt;/li&gt;
&lt;li&gt;可扩展则是要求写代码时要考虑后面的扩展需求, 这个属于架构层面的东东, 利用对应的设计模式来保证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.iOS常量命令&lt;/p&gt;
&lt;p&gt;1）对于常量的命名最好在前面加上字母k作为标记. 如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static const NSTimeInterval kAnimationDuration = 0.3;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2）定义作为NSDictionary或者Notification等的Key值字符串时加上const关键字, 以防止被修改. 如:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString *const UIApplicationDidEnterBackgroundNotification&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3）若常量作用域超出编译单元(实现文件), 需要在类外可见时, 使用extern关键字, 并加上该类名作为前缀. 如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extern NSString *const PGThumbnailSize&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS报错</title>
    <link href="williamliuwen.cn/2016/08/03/iOS%E6%8A%A5%E9%94%99/"/>
    <id>williamliuwen.cn/2016/08/03/iOS报错/</id>
    <published>2016-08-03T13:21:40.000Z</published>
    <updated>2016-08-03T13:21:40.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS最佳实践</title>
    <link href="williamliuwen.cn/2016/08/03/iOS%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>williamliuwen.cn/2016/08/03/iOS最佳实践/</id>
    <published>2016-08-03T13:19:56.000Z</published>
    <updated>2016-08-03T13:19:56.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-Thread</title>
    <link href="williamliuwen.cn/2016/08/02/iOS-Thread/"/>
    <id>williamliuwen.cn/2016/08/02/iOS-Thread/</id>
    <published>2016-08-02T08:52:50.000Z</published>
    <updated>2016-08-04T11:48:19.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Thread方案&quot;&gt;&lt;a href=&quot;#Thread方案&quot; class=&quot;headerlink&quot; title=&quot;Thread方案&quot;&gt;&lt;/a&gt;Thread方案&lt;/h2&gt;&lt;p&gt;1.NSOperation&lt;/p&gt;
&lt;p&gt;2.GCD&lt;/p&gt;
&lt;p&gt;3.NSThread&lt;/p&gt;
&lt;p&gt;4.Thread须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.xxx&lt;/li&gt;
&lt;li&gt;2.xxx&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-NSThread&quot;&gt;&lt;a href=&quot;#Thread-NSThread&quot; class=&quot;headerlink&quot; title=&quot;Thread - NSThread&quot;&gt;&lt;/a&gt;Thread - NSThread&lt;/h2&gt;&lt;p&gt;1.NSThread须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）NSThread使用的优点和局限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.NSThread使用注意？&lt;/p&gt;
&lt;p&gt;3.NSThread常用属性和方法？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-GCD&quot;&gt;&lt;a href=&quot;#Thread-GCD&quot; class=&quot;headerlink&quot; title=&quot;Thread - GCD&quot;&gt;&lt;/a&gt;Thread - GCD&lt;/h2&gt;&lt;h3 id=&quot;1-GCD须知？&quot;&gt;&lt;a href=&quot;#1-GCD须知？&quot; class=&quot;headerlink&quot; title=&quot;1.GCD须知？&quot;&gt;&lt;/a&gt;1.GCD须知？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1）GCD使用的优点和局限&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.GCD是苹果公司为多核的并行运算提出的解决方案&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.GCD会自动利用更多的CPU内核（比如双核、四核）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.GCD的高级功能：监视进程或者监视文件夹内文件的变化之类的比较合适。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;2）GCD 全称是Grand Central Dispatch，可译为“牛逼的中枢调度器”&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;GCD-串行、并行、异步、同步&quot;&gt;&lt;a href=&quot;#GCD-串行、并行、异步、同步&quot; class=&quot;headerlink&quot; title=&quot;GCD - 串行、并行、异步、同步&quot;&gt;&lt;/a&gt;GCD - 串行、并行、异步、同步&lt;/h5&gt;&lt;p&gt;1.什么是串行？&lt;/p&gt;
&lt;p&gt;串行就是一个接一个执行，串行是任务A执行完了任务B才能执行, 它们俩只能顺序执行&lt;/p&gt;
&lt;p&gt;2.什么是并行？&lt;/p&gt;
&lt;p&gt;并行就是多个可以一起执行，并行则是任务A和任务B可以同时执行&lt;/p&gt;
&lt;p&gt;3.什么是同步（ dispatch_sync ）？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1)同步就是，比如用来下载图片的函数A，同步函数只有在image下载结束之后才返回，下载的这段时间函数A只能搬个小板凳在那儿坐等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2)只能在当前线程中执行任务，不具备开启新线程的能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.什么是异步（ dispatch_async）？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1)异步，异步函数, 立即返回,图片会去下载 但函数A不会去等它完成，因此异步函数不会堵塞当前线程去执行下一个函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2)可以在新的线程中执行任务，具备开启新线程的能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.串行、并行、异步、同步与线程的关系？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步（ dispatch_sync）不会开启新线程，暂停执行所有不以block块任务为第一任务的队列，阻塞&lt;/li&gt;
&lt;li&gt;异步（ dispatch_async）不一定会开启新线程，这个跟队列有关，当前线程会直接往下执行，它不会阻塞当前线程&lt;/li&gt;
&lt;li&gt;同步执行和异步执行，他们之间的区别主要在于会不会阻塞当前线程,同步会让系统判定暂停执行所有不以block块任务为第一任务的队列（即如果block块任务不在队列头，那么block块任务所在的队列也会暂停执行），且同步一定不会开启新线程，因为GCD觉得既然其它队列暂停执行，block块任务就可以在当前线程执行了，没有必要开启新线程。而异步则系统不会进行判定，但是不一定会开启新线程，这个跟队列有关，如果是新创建的队列，那么GCD就会开启新线程，如果加入已有的队列，那么就会在队列所在的线程中执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;GCD-队列、主队列、全局队列、自定义队列、任务、串行队列、并发队列&quot;&gt;&lt;a href=&quot;#GCD-队列、主队列、全局队列、自定义队列、任务、串行队列、并发队列&quot; class=&quot;headerlink&quot; title=&quot;GCD - 队列、主队列、全局队列、自定义队列、任务、串行队列、并发队列&quot;&gt;&lt;/a&gt;GCD - 队列、主队列、全局队列、自定义队列、任务、串行队列、并发队列&lt;/h5&gt;&lt;p&gt;1.队列与任务关系?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）队列是用来放置任务的，一个队列可以有很多任务，同时也会有很多队列。&lt;/li&gt;
&lt;li&gt;2）所以操作任务的一般步骤是：第一步先确定想做的事情，就是定制任务；第二步是将任务添加到队列中，GCD会自动将队列中的任务取出，放到对应的线程中执行；注意：任务的取出遵循队列的FIFO原则：先进先出，后进后出；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.任务是什么？&lt;/p&gt;
&lt;p&gt;任务就是想要做的事，表示执行什么操作&lt;/p&gt;
&lt;p&gt;3.队列是什么？&lt;/p&gt;
&lt;p&gt;用来存放任务&lt;/p&gt;
&lt;p&gt;4.并发队列（Concurrent Dispatch Queue）是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）可以让多个任务并发（同时）执行（自动开启多个线程同时执行任务）&lt;/li&gt;
&lt;li&gt;2）并发功能只有在异步（dispatch_async）函数下才有效&lt;/li&gt;
&lt;li&gt;3）全局队列就是并发队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.串行队列（Serial Dispatch Queue）是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）让任务一个接着一个地执行（一个任务执行完毕后，再执行下一个任务）&lt;/li&gt;
&lt;li&gt;2）串行和并行是针对同一个队列中的任务而言的，当使用串行，那么队列里的那么队列里的任务最多只能使用一个线程运行，即同一时刻只有一个任务在执行，如果是并行，那么系统会根据队列里的任务自动分配线程执行，最大线程数根据参数设定。&lt;/li&gt;
&lt;li&gt;3）主队列就是串行队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;6.自定义队列（Serial Dispatch Queue）是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）自定义队列可以是串行队列，也可以是并行队列&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-GCD使用注意？&quot;&gt;&lt;a href=&quot;#2-GCD使用注意？&quot; class=&quot;headerlink&quot; title=&quot;2.GCD使用注意？&quot;&gt;&lt;/a&gt;2.GCD使用注意？&lt;/h3&gt;&lt;h3 id=&quot;3-GCD常用属性和方法？&quot;&gt;&lt;a href=&quot;#3-GCD常用属性和方法？&quot; class=&quot;headerlink&quot; title=&quot;3.GCD常用属性和方法？&quot;&gt;&lt;/a&gt;3.GCD常用属性和方法？&lt;/h3&gt;&lt;p&gt;1.dispatch_sync// 同步执行&lt;/p&gt;
&lt;p&gt;2.dispatch_async// 异步执行&lt;/p&gt;
&lt;p&gt;3.dispatch_once_t// 保证某段代码在程序运行过程中只被执行1次&lt;/p&gt;
&lt;p&gt;4.dispatch_after// 延时&lt;/p&gt;
&lt;p&gt;5.dispatch_group_async// 组异步&lt;/p&gt;
&lt;p&gt;6.dispatch_suspend// 挂起&lt;/p&gt;
&lt;p&gt;7.dispatch_resume// 继续&lt;/p&gt;
&lt;p&gt;8.dispatch_barrier_async//  作用是在并行队列中，等待前面的队列执行完成后在继续往下执行&lt;/p&gt;
&lt;p&gt;9.dispatch_queue_t// 队列&lt;/p&gt;
&lt;p&gt;10.dispatch_apply&lt;/p&gt;
&lt;p&gt;11.[NSThread sleepForTimeInterval:1.0]; //线程休眠,等同于sleep(1)&lt;/p&gt;
&lt;p&gt;12.dispatch_queue_t queue = dispatch_get_main_queue(); // 创建主队列&lt;/p&gt;
&lt;h3 id=&quot;4-GCD-Dispatch-Source函数&quot;&gt;&lt;a href=&quot;#4-GCD-Dispatch-Source函数&quot; class=&quot;headerlink&quot; title=&quot;4.GCD - Dispatch Source函数&quot;&gt;&lt;/a&gt;4.GCD - Dispatch Source函数&lt;/h3&gt;&lt;p&gt;1.Dispatch Source函数须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）Source 可以理解为产生事件的地方，Source 产生事件，然后 Source 的回调函数负责 处理这些事件。&lt;/li&gt;
&lt;li&gt;2）iOS 中有两种 Source，一种是 Run Loop Source ,一种是 Dispatch Source。&lt;/li&gt;
&lt;li&gt;3）在 Run Loop 中， Run Loop Source 产生事件，之后唤醒 Run Loop， Run Loop 便执行该 Source 的回调函数。&lt;/li&gt;
&lt;li&gt;4）Dispatch Source 也会产生一些特定的事件，当这些事件发生的时候，其回调的 block （响应句柄）会自动加入到 对应的 dispatch queue 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.Dispatch Source 种类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_TIMER             定时器&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_SIGNAL            接收到 UNIX 信号&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_READ              文件可读&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_WRITE             文件可写&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_VNODE             文件系统有变更&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_PROC              与进程相关的事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_MACH_SEND Mach    端口发送事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_MACH_RECV Mach    端口接收事件&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_DATA_ADD          用户自定义的事件－变量相加&lt;/li&gt;
&lt;li&gt;DISPATCH_SOURCE_TYPE_DATA_OR           用户自定义的事件－变量相或&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.选择Dispatch Source还是dispatch_async？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）Dispatch Source优势是可以利用联结dispatch_source_merge_data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.Dispatch Source常用属性和方法？&lt;/p&gt;
&lt;p&gt;dispatch_source_create//创建&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-NSOperation&quot;&gt;&lt;a href=&quot;#Thread-NSOperation&quot; class=&quot;headerlink&quot; title=&quot;Thread - NSOperation&quot;&gt;&lt;/a&gt;Thread - NSOperation&lt;/h2&gt;&lt;h3 id=&quot;1-NSOperation须知？&quot;&gt;&lt;a href=&quot;#1-NSOperation须知？&quot; class=&quot;headerlink&quot; title=&quot;1.NSOperation须知？&quot;&gt;&lt;/a&gt;1.NSOperation须知？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1）NSOperation使用的优点和局限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-NSOperation使用注意？&quot;&gt;&lt;a href=&quot;#2-NSOperation使用注意？&quot; class=&quot;headerlink&quot; title=&quot;2.NSOperation使用注意？&quot;&gt;&lt;/a&gt;2.NSOperation使用注意？&lt;/h3&gt;&lt;p&gt;1.为什么在并发情况下需要自己来设定isExecuting和isFinished这两个状态量呢?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1)为什么在并发情况下需要自己来设定isExecuting和isFinished这两个状态量呢?&lt;/li&gt;
&lt;li&gt;2)因为在并发情况下系统不知道operation什么时候finished, operation里面的task一般来说是异步执行的&lt;/li&gt;
&lt;li&gt;3)也就是start函数返回了operation不一定就是finish了, 这个你自己来控制, 你什么时候将isFinished置为YES(发送相应的KVO消息), operation就什么时候完成了&lt;/li&gt;
&lt;li&gt;4)修改的方法：willChangeValueForKey  /  didChangeValueForKey&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-NSOperation常用属性和方法？&quot;&gt;&lt;a href=&quot;#3-NSOperation常用属性和方法？&quot; class=&quot;headerlink&quot; title=&quot;3.NSOperation常用属性和方法？&quot;&gt;&lt;/a&gt;3.NSOperation常用属性和方法？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;-(void)start;//启动任务,默认在当前队列同步执行；当实现了start方法时，默认会执行start方法，而不执行main方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)main;//main函数执行完成后, isExecuting会被置为NO, 而isFinished则被置为YES.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addDependency:(NSOperation *)op;//依赖可以跨队列依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)removeDependency:(NSOperation *)op;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)cancel;//取消任务，GCD没有这个功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)waitUntilFinished ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addExecutionBlock:(void (^)(void))block;//参考《NSOperation【子类1：NSBlockOperation】》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(nullable instancetype)initWithTarget:(id)target selector:(SEL)sel object:(nullable id)arg;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(instancetype)initWithInvocation:(NSInvocation *)inv NS_DESIGNATED_INITIALIZER;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addOperation:(NSOperation *)op;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addOperations:(NSArray&lt;nsoperation *=&quot;&quot;&gt; *)ops waitUntilFinished:(BOOL)wait ;&lt;/nsoperation&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)addOperationWithBlock:(void (^)(void))block ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)cancelAllOperations;//取消队列中所有的任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)waitUntilAllOperationsAreFinished;//阻塞当前线程直到此队列中的所有任务执行完毕&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+(nullable NSOperationQueue *)currentQueue ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+(NSOperationQueue *)mainQueue ;//获取主队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+(instancetype)blockOperationWithBlock:(void (^)(void))block;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property NSInteger maxConcurrentOperationCount;//最大并发数;用来设置最多可以让多少个任务同时执行;为 1 时为串行；主对列默认是串行队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (readonly) NSUInteger operationCount;//获取队列的任务数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (readonly, getter=isCancelled) BOOL cancelled;//取消；用KVO可以方便的监测NSOperation的状态(isExecuted, isFinished, isCancelled)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (readonly, getter=isExecuting) BOOL executing;//正在执行；因为都起了别名，所以可以通过 isExecuting 来 getter 属性值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (readonly, getter=isFinished) BOOL finished;//完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property (getter=isSuspended) BOOL suspended;//暂停;[queue setSuspended:YES];是重写 set 方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;NSOperationQueuePriority&quot;&gt;&lt;a href=&quot;#NSOperationQueuePriority&quot; class=&quot;headerlink&quot; title=&quot;NSOperationQueuePriority&quot;&gt;&lt;/a&gt;NSOperationQueuePriority&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;NSOperationQueuePriorityVeryLow = -8L,&lt;/li&gt;
&lt;li&gt;NSOperationQueuePriorityLow = -4L,&lt;/li&gt;
&lt;li&gt;NSOperationQueuePriorityNormal = 0,&lt;/li&gt;
&lt;li&gt;NSOperationQueuePriorityHigh = 4,&lt;/li&gt;
&lt;li&gt;NSOperationQueuePriorityVeryHigh = 8&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;参考连接&quot;&gt;&lt;a href=&quot;#参考连接&quot; class=&quot;headerlink&quot; title=&quot;参考连接&quot;&gt;&lt;/a&gt;参考连接&lt;/h4&gt;&lt;p&gt;1.&lt;a href=&quot;http://www.jianshu.com/p/c56b614db49d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/c56b614db49d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://alex1212112.github.io/blog/2015/11/24/dispatch-source/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://alex1212112.github.io/blog/2015/11/24/dispatch-source/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Thread方案&quot;&gt;&lt;a href=&quot;#Thread方案&quot; class=&quot;headerlink&quot; title=&quot;Thread方案&quot;&gt;&lt;/a&gt;Thread方案&lt;/h2&gt;&lt;p&gt;1.NSOperation&lt;/p&gt;
&lt;p&gt;2.GCD&lt;/p&gt;
&lt;p&gt;3.NSThread&lt;/p&gt;
&lt;p&gt;4.Thread须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.xxx&lt;/li&gt;
&lt;li&gt;2.xxx&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-NSThread&quot;&gt;&lt;a href=&quot;#Thread-NSThread&quot; class=&quot;headerlink&quot; title=&quot;Thread - NSThread&quot;&gt;&lt;/a&gt;Thread - NSThread&lt;/h2&gt;&lt;p&gt;1.NSThread须知？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）NSThread使用的优点和局限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.NSThread使用注意？&lt;/p&gt;
&lt;p&gt;3.NSThread常用属性和方法？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Thread-GCD&quot;&gt;&lt;a href=&quot;#Thread-GCD&quot; class=&quot;headerlink&quot; title=&quot;Thread - GCD&quot;&gt;&lt;/a&gt;Thread - GCD&lt;/h2&gt;&lt;h3 id=&quot;1-GCD须知？&quot;&gt;&lt;a href=&quot;#1-GCD须知？&quot; class=&quot;headerlink&quot; title=&quot;1.GCD须知？&quot;&gt;&lt;/a&gt;1.GCD须知？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1）GCD使用的优点和局限&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.GCD是苹果公司为多核的并行运算提出的解决方案&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.GCD会自动利用更多的CPU内核（比如双核、四核）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.GCD的高级功能：监视进程或者监视文件夹内文件的变化之类的比较合适。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS-Map</title>
    <link href="williamliuwen.cn/2016/08/01/iOS-Map/"/>
    <id>williamliuwen.cn/2016/08/01/iOS-Map/</id>
    <published>2016-08-01T14:31:01.000Z</published>
    <updated>2016-08-01T14:31:01.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS Location</title>
    <link href="williamliuwen.cn/2016/07/31/iOS-Location/"/>
    <id>williamliuwen.cn/2016/07/31/iOS-Location/</id>
    <published>2016-07-31T03:07:55.000Z</published>
    <updated>2016-08-04T11:43:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-Location常识？&quot;&gt;&lt;a href=&quot;#1-Location常识？&quot; class=&quot;headerlink&quot; title=&quot;1.Location常识？&quot;&gt;&lt;/a&gt;1.Location常识？&lt;/h2&gt;&lt;p&gt;1)基于GPS/基站/wifi定位&lt;/p&gt;
&lt;p&gt;3种区别是：iOS不像Android系统在定位服务编程时，可以指定采用哪种途径进行定位。iOS的API把底层这些细节屏蔽掉了，开发人员和用户并不知道现在设备是采用哪种方式进行定位的，iOS系统会根据设备的情况和周围的环境，采用一套最佳的解决方案。这个方案是这样的，如果能够接收GPS信息，那么设备优先采用GPS定位，否则采用Wifi或蜂窝基站定位，在Wifi和蜂窝基站之间优先使用Wifi，如果无法连接Wifi才使用蜂窝基站定位。总体来说GPS定位优点是准确、覆盖面广阔，缺点是不能被遮挡（例如：在建筑物里面收不到GPS卫星信号）、GPS开启后比较费电。蜂窝基站不仅误差比较大，而且会耗费用户流量费。而Wifi定位是最经济实惠的。&lt;/p&gt;
&lt;p&gt;2)如果使用基站进行定位,必须要求设备有电话模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2.1 当app被完全关闭时,也可以接收到位置通知,并让app进入到后台处理 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.2 定位精度相比于上面,精度不大,所以耗电小,而且定位更新频率依据基站密度而定&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3)必须开启手机位置服务&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;4)位置更新的评估标准有：高精度低频率、高精度高频率、低精度低频率、低精度高频率&lt;/p&gt;
&lt;p&gt;5)LBS : Location Based Service（基于定位的服务）&lt;/p&gt;
&lt;p&gt;6)南北走向的是经线（ longitude），东西走向的是纬线（ latitude），例如北京的经度是119度，纬度是40度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本初子午线：穿过英国伦敦格林文治天文台&lt;/li&gt;
&lt;li&gt;往东边（右边）走，是东经（E）&lt;/li&gt;
&lt;li&gt;往西边（左边）走，是西经（W）&lt;/li&gt;
&lt;li&gt;东西经各180°，总共360°&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;赤道：零度维度&lt;/li&gt;
&lt;li&gt;往北边（上边）走，是北纬（N）&lt;/li&gt;
&lt;li&gt;往南边（下边）走，是南纬（S）&lt;/li&gt;
&lt;li&gt;南北纬各90°，总共180°&lt;/li&gt;
&lt;li&gt;提示：横跨经度\纬度越大（1° ≈ 111km），表示的范围就越大，在地图上看到的东西就越小&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;中国的经纬度范围&lt;/li&gt;
&lt;li&gt;纬度范围：N 3°51′ ~  N 53°33′&lt;/li&gt;
&lt;li&gt;经度范围：E 73°33′ ~  E 135°05′&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;7）火星坐标（GCJ-02）与地球坐标系 (WGS-84)？&lt;/p&gt;
&lt;p&gt;标准地球坐标即GPS设备获得的坐标，该坐标需要经过国家测绘局进行加密后形成火星坐标（GCJ-02），我们用的google坐标和高德地图坐标也就是火星坐标，它们都是加了偏移坐标的；&lt;/p&gt;
&lt;p&gt;GPS模块获取到的坐标是WGS84坐标系的&lt;/p&gt;
&lt;p&gt;中国政府出于种种目的的考虑，不允许中国的地图使用国际通用的WGS84坐标系，而非要加上一些偏移，这样的坐标系就俗称“火星坐标系”；简单来说就是加了偏移的坐标就是火星坐标&lt;/p&gt;
&lt;p&gt;使用火星坐标常见错误：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如在使用百度地图API的时候，因为百度地图是在火星坐标的基础上再进行一次加密，形成了百度地图上的坐标，因此，直接将标准地球坐标显示在百度地图上是会有几百米的偏差的。按照此原理，标准GPS坐标经过两步的转换可得到百度坐标。在实际开发中要注意这点。&lt;/li&gt;
&lt;li&gt;地图上几百米偏差出现的原因是：Google地图采用的也是加偏移过的火星坐标系，但GPS模块传给它的坐标却没有加偏移，于是就出现几百米的偏差了&lt;/li&gt;
&lt;li&gt;因为我们的地图应用无法使用标准的地球坐标，所以我们应该想办法把标准的地球坐标转换为火星坐标&lt;/li&gt;
&lt;li&gt;这也就是我们如果在开发需要地图应用的时候，需要经常使用第三方的API，必须百度地图，高德地图，谷歌地图的原因了，因为它们已经帮我们把标准的地球坐标通过它们自己的算法转换成了火星坐标了，而如果我们自己去写的话，那真的是一个大的工程；&lt;/li&gt;
&lt;li&gt;火星坐标的存在可以保护用户的位置隐私。&lt;/li&gt;
&lt;li&gt;原则上，根据我们的法律，都不允许分享任何带有经纬度的坐标系统，不管你是真实的WGS84坐标还是加密后的火星坐标。 &lt;/li&gt;
&lt;li&gt;如果你不是做导航软件、地图软件的公司，那么你就无法获得国测局的保密插件，如果你是用户，得到了火星坐标，那么也是无法逆转回地球坐标的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-Location使用的框架？&quot;&gt;&lt;a href=&quot;#2-Location使用的框架？&quot; class=&quot;headerlink&quot; title=&quot;2.Location使用的框架？&quot;&gt;&lt;/a&gt;2.Location使用的框架？&lt;/h2&gt;&lt;p&gt;1)Core Locatin Framework API&lt;/p&gt;
&lt;p&gt;2)CoreLocation框架中所有数据类型的前缀都是CL&lt;/p&gt;
&lt;p&gt;3)CoreLocation中使用CLLocationManager对象来做用户定位&lt;/p&gt;
&lt;h2 id=&quot;3-Location注意点？&quot;&gt;&lt;a href=&quot;#3-Location注意点？&quot; class=&quot;headerlink&quot; title=&quot;3.Location注意点？&quot;&gt;&lt;/a&gt;3.Location注意点？&lt;/h2&gt;&lt;p&gt;1).对iOS9+，需要加allowsBackgroundLocationUpdates = YES&lt;/p&gt;
&lt;p&gt;2).后台位置更新会用到的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;UIApplication:beginBackgroundTaskWithExpirationHandler:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UIApplication:backgroundTimeRemaining&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3).后台运行位置判断精度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if(newLocation.horizontalAccuracy &amp;gt; 100) return; //精度&amp;gt; 100米&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4).后台运行位置更新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在处理位置数据的时候尽量减少工作量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-Location遇到的问题？&quot;&gt;&lt;a href=&quot;#4-Location遇到的问题？&quot; class=&quot;headerlink&quot; title=&quot;4.Location遇到的问题？&quot;&gt;&lt;/a&gt;4.Location遇到的问题？&lt;/h2&gt;&lt;p&gt;1).后台位置更新需要更多的时间处理位置数据使用的方法是？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If an iOS app needs more time to process the location data, it can request more background execution time using beginBackgroundTaskWithName:expirationHandler:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2).位置更新后台运行资源紧张问题?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果使用startUpdatingLocation，当有更新时遇到资源紧张，则会被延迟调用委托。如果对于实时性要求高的可能不适合这个，很难控制用户机器性能状况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3).APP挂了，怎么重新运行位置更新?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 region monitoring 或者 使用 significant-change location service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4).后台运行位置离上次更新时间?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSTimeInterval howRecent = [newLocation.timestamp timeIntervalSinceNow];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if(howRecent &amp;lt; -10) return ； //离上次更新的时间少于10秒&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-Location两种服务&quot;&gt;&lt;a href=&quot;#5-Location两种服务&quot; class=&quot;headerlink&quot; title=&quot;5.Location两种服务?&quot;&gt;&lt;/a&gt;5.Location两种服务?&lt;/h2&gt;&lt;h4 id=&quot;标准位置服务-Standard-Location-Service&quot;&gt;&lt;a href=&quot;#标准位置服务-Standard-Location-Service&quot; class=&quot;headerlink&quot; title=&quot;标准位置服务 Standard Location Service&quot;&gt;&lt;/a&gt;标准位置服务 Standard Location Service&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1).可以提供持续的位置更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2).可以提供最精确的位置更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3).如果被用户手动关闭，就不会再被唤醒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4).定位基于gps/基站/wifi定位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5).使用场景：定位及时,精度较高,并且运行时间较短;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;显著的位置变化定位服务-significant-change-location-service&quot;&gt;&lt;a href=&quot;#显著的位置变化定位服务-significant-change-location-service&quot; class=&quot;headerlink&quot; title=&quot;显著的位置变化定位服务 significant-change location service&quot;&gt;&lt;/a&gt;显著的位置变化定位服务 significant-change location service&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1).提供至少15分钟一次的位置更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2).无法提供精确的位置更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3).可以重新启动位置更新服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4).使用基站定位的，所以设备一定要有电话模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5).不管是在后台还是用户手动关闭APP都会被唤醒调用委托,只有3种方法关闭1）用户关闭定位服务（2）用户关闭对该app的定位服务（3）设备处于飞行模式或者无法开启必要的硬件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;6).startMonitoringSignificantLocationChanges什么时候更新呢？是在更换基站的时候更新。所以更新频率与基站密度有关。市区更新频率较郊区高。所以很多同学说没有更新是因为还在同一组基站范围内。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;7).使用场景：长时间监控用户位置,用户移动速度比较快(例如打车软件)，为什么打车软件适用呢，说明一下，因为坐车使用APP的话，移动的速度快，距离变化非常明显，所以使用这种方式。这种方式适用长时间监控，但长时间监控不能保持实时监控，就会导致后台不会时刻运行位置更新服务，而是在使用的时候才会调用，这个是由苹果系统控制，iOS开发者无法控制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-Location省电最佳实践&quot;&gt;&lt;a href=&quot;#6-Location省电最佳实践&quot; class=&quot;headerlink&quot; title=&quot;6.Location省电最佳实践&quot;&gt;&lt;/a&gt;6.Location省电最佳实践&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.pausesLocationUpdatesAutomatically 设置为YES&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.activityType 设置这个属性，例如设置为 CLActivityTypeAutomotiveNavigation :&lt;br&gt;causes the location manager to pause events only when the user does not move a significant distance over a period of time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1）allowDeferredLocationUpdatesUntilTraveled:timeout:允许延迟更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2）结合 locationManager:didFinishDeferredUpdatesWithError:使用， 当 stopped deferring the delivery of location updates的时候调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3）停止延迟更新的方法：disallowDeferredLocationUpdates &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Delegate method from the CLLocationManagerDelegate protocol.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)locationManager:(CLLocationManager *)manager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;didUpdateLocations:(NSArray *)locations &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Add the new locations to the hike&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self.hike addLocations:locations];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;参数locations是位置变化的聚拢，它按照时间变化的顺序存放。如果想获得当前设备的位置，可以使用第①行的[locations lastObject]语句获得聚拢中最后一个元素，它就是设备当前位置了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLLocation封装了位置、高度等信息。在上面代码中我们使用了它的两个属性：altitude和coordinate，altitude属性是高度值，coordinate是封装了经度和纬度的结构体CLLocationCoordinate2D&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLLocationCoordinate2D;其中latitude为经度信息，longitude为纬度信息，它们都是CLLocationDegrees类型，CLLocationDegrees是使用typedef定义的double类型。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Defer updates until the user hikes a certain distance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// or when a certain amount of time has passed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (!self.deferringUpdates) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLLocationDistance distance = self.hike.goal - self.hike.distance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSTimeInterval time = [self.nextAudible timeIntervalSinceNow];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[locationManager allowDeferredLocationUpdatesUntilTraveled:distance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeout:time];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.deferringUpdates = YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;7-Location常用属性和方法？&quot;&gt;&lt;a href=&quot;#7-Location常用属性和方法？&quot; class=&quot;headerlink&quot; title=&quot;7.Location常用属性和方法？&quot;&gt;&lt;/a&gt;7.Location常用属性和方法？&lt;/h2&gt;&lt;h4 id=&quot;activityType：&quot;&gt;&lt;a href=&quot;#activityType：&quot; class=&quot;headerlink&quot; title=&quot;activityType：&quot;&gt;&lt;/a&gt;activityType：&lt;/h4&gt;&lt;p&gt;设置定位数据的用途&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CLActivityTypeOther（定位数据作为普通用途）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CLActivityTypeFitness（定位数据作为步行导航使用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CLActivityTypeOtherNavigation（定位数据作为其他导航使用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CLActivityTypeAutomotiveNavigation（定位数据作为车辆导航使用）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;distanceFilter：&quot;&gt;&lt;a href=&quot;#distanceFilter：&quot; class=&quot;headerlink&quot; title=&quot;distanceFilter：&quot;&gt;&lt;/a&gt;distanceFilter：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置CLLocationManager的自动过滤距离。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也就是说，只有当设备在水平方向的位置改变超过该数值（以米为单位）指定的距离时才会生成一次位置改变的信号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每隔多少米定位一次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码: self.locationM.distanceFilter = 100;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;功能：只有当最新的位置与上一次获取的位置之间的距离, 大于这个值时, 才会通过代理告诉外界.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;pausesLocationUpdatesAutomatically：&quot;&gt;&lt;a href=&quot;#pausesLocationUpdatesAutomatically：&quot; class=&quot;headerlink&quot; title=&quot;pausesLocationUpdatesAutomatically：&quot;&gt;&lt;/a&gt;pausesLocationUpdatesAutomatically：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;设置iOS设备是否可暂停定位来节省电池的电量。如果该属性设为“YES”，则当iOS设备不再需要定位数据时，iOS设备可以自动暂停定位。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;desiredAccuracy&quot;&gt;&lt;a href=&quot;#desiredAccuracy&quot; class=&quot;headerlink&quot; title=&quot;desiredAccuracy&quot;&gt;&lt;/a&gt;desiredAccuracy&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置定位精确度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代   码: self.locationM.desiredAccuracy = kCLLocationAccuracyBest;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;功   能: 通过设置此属性, 获取不同精确度的位置信息;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意事项: 精确度越高，越耗电，定位所需时间越长&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1) kCLLocationAccuracyBestForNavigation    最适合导航&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;2) kCLLocationAccuracyBest    精度最好的&lt;/li&gt;
&lt;li&gt;3) kCLLocationAccuracyNearestTenMeters    附近10米&lt;/li&gt;
&lt;li&gt;4) kCLLocationAccuracyHundredMeters    附近100米&lt;/li&gt;
&lt;li&gt;5) kCLLocationAccuracyKilometer    附近1000米&lt;/li&gt;
&lt;li&gt;&lt;p&gt;6) kCLLocationAccuracyThreeKilometers    附近3000米&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;精度越高请求获得位置信息的时间就越短，这就意味着设备越耗电。因此一个应用应该选择适合它的精度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你的应用是一个车载导航应用，kCLLocationAccuracyBestForNavigation是比较好的选择，你可以使用汽车上的电瓶为设备供电。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你的应用为徒步旅行者供给的导航应用，kCLLocationAccuracyHundredMeters是一个不错的选择。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;CLLocation&quot;&gt;&lt;a href=&quot;#CLLocation&quot; class=&quot;headerlink&quot; title=&quot;CLLocation&quot;&gt;&lt;/a&gt;CLLocation&lt;/h4&gt;&lt;p&gt;CLLocation类代表一个位置信息，其中还包括了方向和速度。比如我在长安街188号以5公里/小时的速度往西走。CLLocation具有下面的属性和方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@property  CLLocationCoordinate2D coordinate; //以经度和纬度表示的位置信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property CLLocationDistance altitude;  //海拔&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property CLLocationAccuracy horizontalAccuracy; //水平精度（如：精确到米）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property CLLocationAccuracy verticalAccuracy; //垂直精度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property CLLocationDirection course; //方向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property CLLocationSpeed speed; //速度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-（NSDate*）timeStamp;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(CLLocationDistance)distanceFromLocation:(CLLocation*)location;//两个位置之间的距离&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&quot;CLLocationManager&quot;&gt;&lt;a href=&quot;#CLLocationManager&quot; class=&quot;headerlink&quot; title=&quot;CLLocationManager&quot;&gt;&lt;/a&gt;CLLocationManager&lt;/h4&gt;&lt;p&gt;CLLocationManager类管理和提供位置服务,CLLocationManager是定位服务管理类它能够给我们供给获得设备的位置信息和高度信息，也可以监控设备进入或离开某个区域，它还可以帮助获得设备的运行方向等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@property CLLocation *location; //位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property id&lt;cllocationmanagerdelegate&gt; delegate;&lt;/cllocationmanagerdelegate&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property CLLocationDistance distanceFilter; //距离过滤，比如：500以内&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@property CLlocationAccuracy verticalAccuracy; //垂直精度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void) startUpdatingLocation; //开始更新位置（比如：你在往某个地方走）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)stopUpdatingLocation; //停止更新位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)startUpdatingHeading; //开始更新方向（比如：你改往东走）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)stopUpdatingHeading; //停止更新方向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CLLocationManagerDelegate是一个委托类。你的应用程序需要使用这个委托类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)locationManager:(CLLocationManager&lt;em&gt;)manager didUpdateToLocation:(CLLocation&lt;/em&gt;)newLocation fromLocation:(CLLocation*)oldLocation;//当用户改变位置的时候回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)locationManager:(CLLocationManager&lt;em&gt;)manager didUpdateHeading:(CLLHeading&lt;/em&gt;)newHeading;//当用户改变方向的时候回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-(void)locationManager: (CLLocationManager &lt;em&gt;)manager didFailLoadWithError:(NSError &lt;/em&gt;)error;//当iPhone无法获得当前位置的信息时回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;locationManagerDidPauseLocationUpdates://当停止位置更新回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;locationManagerDidResumeLocationUpdates: //当继续位置更新回调&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-Location地理编码？&quot;&gt;&lt;a href=&quot;#8-Location地理编码？&quot; class=&quot;headerlink&quot; title=&quot;8.Location地理编码？&quot;&gt;&lt;/a&gt;8.Location地理编码？&lt;/h2&gt;&lt;p&gt;1）.CLGeocoder：地理编码器，其中Geo是地理的英文单词Geography的简写。&lt;/p&gt;
&lt;p&gt;2）.使用CLGeocoder可以完成“地理编码”和“反地理编码”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;地理编码：根据给定的地名，获得具体的位置信息（比如经纬度、地址的全称等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;反地理编码：根据给定的经纬度，获得具体的位置信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3）.CLGeocoder常用属性和方法？&lt;/p&gt;
&lt;p&gt;@property (nonatomic, readonly, getter=isGeocoding) BOOL geocoding;&lt;/p&gt;
&lt;p&gt;-(void)reverseGeocodeLocation:(CLLocation *)location completionHandler:(CLGeocodeCompletionHandler)completionHandler;// reverse geocode requests反地理编码&lt;/p&gt;
&lt;p&gt;-(void)geocodeAddressDictionary:(NSDictionary *)addressDictionary completionHandler:(CLGeocodeCompletionHandler)completionHandler;&lt;/p&gt;
&lt;p&gt;-(void)geocodeAddressString:(NSString *)addressString completionHandler:(CLGeocodeCompletionHandler)completionHandler;//地理编码&lt;/p&gt;
&lt;p&gt;-(void)geocodeAddressString:(NSString &lt;em&gt;)addressString inRegion:(nullable CLRegion &lt;/em&gt;)region completionHandler:(CLGeocodeCompletionHandler)completionHandler;&lt;/p&gt;
&lt;p&gt;-(void)cancelGeocode;&lt;/p&gt;
&lt;p&gt;4）.CLGeocodeCompletionHandler方法&lt;/p&gt;
&lt;p&gt;当地理\反地理编码完成时，就会调用CLGeocodeCompletionHandler，这是一个block，里面与两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;error ：当编码出错时（比如编码不出具体的信息）有值&lt;/li&gt;
&lt;li&gt;placemarks ：里面装着CLPlacemark对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说明：CLPlacemark的字面意思是地标，封装详细的地址位置信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地理位置 　　　　@property (nonatomic, readonly) CLLocation *location;　　&lt;/li&gt;
&lt;li&gt;区域　　　　　　 @property (nonatomic, readonly) CLRegion *region;&lt;/li&gt;
&lt;li&gt;详细的地址信息   @property (nonatomic, readonly) NSDictionary *addressDictionary;&lt;/li&gt;
&lt;li&gt;地址名称　　　　@property (nonatomic, readonly) NSString *name;&lt;/li&gt;
&lt;li&gt;城市　　　　　　@property (nonatomic, readonly) NSString *locality;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;本文参考链接&quot;&gt;&lt;a href=&quot;#本文参考链接&quot; class=&quot;headerlink&quot; title=&quot;本文参考链接&quot;&gt;&lt;/a&gt;本文参考链接&lt;/h5&gt;&lt;p&gt;1.&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/LocationAwarenessPG/CoreLocation/CoreLocation.html#//apple_ref/doc/uid/TP40009497-CH2-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/LocationAwarenessPG/CoreLocation/CoreLocation.html#//apple_ref/doc/uid/TP40009497-CH2-SW1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;http://stackoverflow.com/questions/19042894/periodic-ios-background-location-updates&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/19042894/periodic-ios-background-location-updates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;http://www.cnblogs.com/wendingding/p/3901527.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wendingding/p/3901527.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;http://blog.csdn.net/xiaobaismiley/article/details/37576303&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/xiaobaismiley/article/details/37576303&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5.&lt;a href=&quot;http://blog.csdn.net/coolypf/article/details/8569813&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/coolypf/article/details/8569813&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6.&lt;a href=&quot;https://www.keakon.net/2011/07/02/WGS84%E5%9D%90%E6%A0%87%E8%BD%AC%E7%81%AB%E6%98%9F%E5%9D%90%E6%A0%87%EF%BC%88iOS%E7%AF%87%EF%BC%89&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.keakon.net/2011/07/02/WGS84%E5%9D%90%E6%A0%87%E8%BD%AC%E7%81%AB%E6%98%9F%E5%9D%90%E6%A0%87%EF%BC%88iOS%E7%AF%87%EF%BC%89&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7.&lt;a href=&quot;http://blog.csdn.net/giswens/article/details/8775183&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/giswens/article/details/8775183&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;8.&lt;a href=&quot;http://blog.csdn.net/giswens/article/details/8775121&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/giswens/article/details/8775121&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Location常识？&quot;&gt;&lt;a href=&quot;#1-Location常识？&quot; class=&quot;headerlink&quot; title=&quot;1.Location常识？&quot;&gt;&lt;/a&gt;1.Location常识？&lt;/h2&gt;&lt;p&gt;1)基于GPS/基站/wifi定位&lt;/p&gt;
&lt;p&gt;3种区别是：iOS不像Android系统在定位服务编程时，可以指定采用哪种途径进行定位。iOS的API把底层这些细节屏蔽掉了，开发人员和用户并不知道现在设备是采用哪种方式进行定位的，iOS系统会根据设备的情况和周围的环境，采用一套最佳的解决方案。这个方案是这样的，如果能够接收GPS信息，那么设备优先采用GPS定位，否则采用Wifi或蜂窝基站定位，在Wifi和蜂窝基站之间优先使用Wifi，如果无法连接Wifi才使用蜂窝基站定位。总体来说GPS定位优点是准确、覆盖面广阔，缺点是不能被遮挡（例如：在建筑物里面收不到GPS卫星信号）、GPS开启后比较费电。蜂窝基站不仅误差比较大，而且会耗费用户流量费。而Wifi定位是最经济实惠的。&lt;/p&gt;
&lt;p&gt;2)如果使用基站进行定位,必须要求设备有电话模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2.1 当app被完全关闭时,也可以接收到位置通知,并让app进入到后台处理 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.2 定位精度相比于上面,精度不大,所以耗电小,而且定位更新频率依据基站密度而定&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3)必须开启手机位置服务&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo 部署</title>
    <link href="williamliuwen.cn/2016/07/23/hexo-%E9%83%A8%E7%BD%B2/"/>
    <id>williamliuwen.cn/2016/07/23/hexo-部署/</id>
    <published>2016-07-23T02:53:57.000Z</published>
    <updated>2016-07-23T03:45:32.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;部署hexo前提准备&quot;&gt;&lt;a href=&quot;#部署hexo前提准备&quot; class=&quot;headerlink&quot; title=&quot;部署hexo前提准备&quot;&gt;&lt;/a&gt;部署hexo前提准备&lt;/h4&gt;&lt;p&gt;1.到node.js 网站 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org/en/&lt;/a&gt;  下载node.js 直接安装，安装完，查看版本 ，node -v&lt;/p&gt;
&lt;p&gt;2.到homebrew 网站  &lt;a href=&quot;http://brew.sh/index_zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://brew.sh/index_zh-cn.html&lt;/a&gt; 使用下面的命令安装,如果安装失败，使用sudo&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;开始部署hexo&quot;&gt;&lt;a href=&quot;#开始部署hexo&quot; class=&quot;headerlink&quot; title=&quot;开始部署hexo&quot;&gt;&lt;/a&gt;开始部署hexo&lt;/h4&gt;&lt;p&gt;1.使用下面的命令，一条一条来，如果不行，用sudo&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.直接访问本地部署好的hexo&lt;/p&gt;
&lt;h4 id=&quot;利用hexo发布文章&quot;&gt;&lt;a href=&quot;#利用hexo发布文章&quot; class=&quot;headerlink&quot; title=&quot;利用hexo发布文章&quot;&gt;&lt;/a&gt;利用hexo发布文章&lt;/h4&gt;&lt;p&gt;1.新建文章，先进入hexo文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new &amp;quot;新文章&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.写好文章后，生成静态文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.生成静态文件后，上传到github&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;hexo技巧&quot;&gt;&lt;a href=&quot;#hexo技巧&quot; class=&quot;headerlink&quot; title=&quot;hexo技巧&quot;&gt;&lt;/a&gt;hexo技巧&lt;/h4&gt;&lt;p&gt;1.因为hexo生成的静态文件是放在public文件夹下面的，如果你部署github的时候，使用的git destop版本来上传代码的话，你可以clone你的git下来的时候，clone到hexo文件下，且改名为public，那么下次hexo生成静态文件的时候就会直接生成到clone下来的git文件夹里面，那你用git desktop上传代码的时候，就可以直接commit上传了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;部署hexo前提准备&quot;&gt;&lt;a href=&quot;#部署hexo前提准备&quot; class=&quot;headerlink&quot; title=&quot;部署hexo前提准备&quot;&gt;&lt;/a&gt;部署hexo前提准备&lt;/h4&gt;&lt;p&gt;1.到node.js 网站 &lt;a href=&quot;https://nodejs.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NSRunLoop</title>
    <link href="williamliuwen.cn/2016/07/23/NSRunLoop/"/>
    <id>williamliuwen.cn/2016/07/23/NSRunLoop/</id>
    <published>2016-07-23T00:35:55.000Z</published>
    <updated>2016-08-04T11:44:37.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;h4 id=&quot;运行循环本质&quot;&gt;&lt;a href=&quot;#运行循环本质&quot; class=&quot;headerlink&quot; title=&quot;运行循环本质&quot;&gt;&lt;/a&gt;运行循环本质&lt;/h4&gt;&lt;p&gt;1.从字面上看，就是运行循环跑圈&lt;/p&gt;
&lt;p&gt;2.其实它内部就是do-while循环，在这个循环内部不断地处理各种任务（比如Source、Timer、Observer）&lt;/p&gt;
&lt;p&gt;3.循环体的开始需要检测是否有需要处理的事件，如果有则去处&amp;gt; - 理，如果没有则进入睡眠以节省CPU时间&lt;/p&gt;
&lt;h4 id=&quot;FIXME-0-运行循环-概念性的东西有？&quot;&gt;&lt;a href=&quot;#FIXME-0-运行循环-概念性的东西有？&quot; class=&quot;headerlink&quot; title=&quot;FIXME:0.运行循环 概念性的东西有？&quot;&gt;&lt;/a&gt;FIXME:0.运行循环 概念性的东西有？&lt;/h4&gt;&lt;p&gt;概念1【输入源==事件源】&lt;br&gt;具体查看《RunLoop【输入源】》&lt;/p&gt;
&lt;p&gt;概念2【模式】&lt;br&gt;具体查看《RunLoop【模式】》&lt;/p&gt;
&lt;p&gt;概念3【观察者Observer】&lt;br&gt;具体查看《RunLoop【观察者】》&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;FIXME-1-运行循环-为什么要使用运行循环&quot;&gt;&lt;a href=&quot;#FIXME-1-运行循环-为什么要使用运行循环&quot; class=&quot;headerlink&quot; title=&quot;FIXME:1.运行循环 为什么要使用运行循环&quot;&gt;&lt;/a&gt;FIXME:1.运行循环 为什么要使用运行循环&lt;/h4&gt;&lt;p&gt;1.我们思考一下：程序为什么可以处理用户的各种事件，而且可以保证程序不退出？答案：就是因为程序里面有个系统的默认运行循环，所以能保证程序不退出，并且处理用户的各种事件&lt;/p&gt;
&lt;p&gt;2.想要了解为什么要使用运行循环，我们可以从使用运行循环的目的来了解，使用了运行循环我们可以：&lt;br&gt;a. 保证程序不退出 ;&lt;br&gt;b. 负责处理输入事件;&lt;br&gt;c. 如果没有事件发生，会让程序进入休眠状态。&lt;br&gt;从上面可以得出结论，为什么要使用运行循环，因为这是一个APP的基本，没有运行循环，就没有APP的正常运行。&lt;/p&gt;
&lt;p&gt;3.通过上面的了解我们可以总结运行循环的优点：有事情就做事情，没事情就休息；优点：节省CPU资源、提高程序性能；&lt;/p&gt;
&lt;h4 id=&quot;FIXME-2-运行循环-程序里哪里存在运行循环&quot;&gt;&lt;a href=&quot;#FIXME-2-运行循环-程序里哪里存在运行循环&quot; class=&quot;headerlink&quot; title=&quot;FIXME:2.运行循环 程序里哪里存在运行循环&quot;&gt;&lt;/a&gt;FIXME:2.运行循环 程序里哪里存在运行循环&lt;/h4&gt;&lt;p&gt;1.【系统默认 运行循环】系统默认就是一个运行循环，可以保证程序不死掉；系统默认运行循环在主线程&lt;/p&gt;
&lt;h4 id=&quot;FIXME-3-运行循环-与线程的关系&quot;&gt;&lt;a href=&quot;#FIXME-3-运行循环-与线程的关系&quot; class=&quot;headerlink&quot; title=&quot;FIXME:3.运行循环 与线程的关系&quot;&gt;&lt;/a&gt;FIXME:3.运行循环 与线程的关系&lt;/h4&gt;&lt;p&gt;1.每一个线程内部都有一个消息循环。只有主线程的消息循环默认开启,子线程的消息循环默认不开启，一个运行循环对应着一条唯一的线程，如何让子线程不死 ，给这条子线程开启一个运行循环，子线程的runloop需要手动创建,需要手动开启&lt;/p&gt;
&lt;p&gt;2.线程在执行中的休眠和激活就是由RunLoop对象进行管理的&lt;/p&gt;
&lt;p&gt;3.RunLoop是用来管理线程的&lt;/p&gt;
&lt;p&gt;4.每一个线程都有一个RunLoop对象。可以通过具体的方法去获得&lt;/p&gt;
&lt;p&gt;5.但是需要注意：虽然每一个线程都可以获取RunLoop对象，但是并不是每一个线程中都有实例对象，我们可以这样理解：如果我们不获取RunLoop，这个RunLoop就不存在，我们获取时，如果不存在，就会去创建。在主线程中，这个MainRunLoop是默认创建并运行激活的&lt;/p&gt;
&lt;p&gt;6.每条线程都有唯一的一个与之对应的RunLoop对象&lt;/p&gt;
&lt;h4 id=&quot;FIXME-4-运行循环-生命周期&quot;&gt;&lt;a href=&quot;#FIXME-4-运行循环-生命周期&quot; class=&quot;headerlink&quot; title=&quot;FIXME:4.运行循环 生命周期&quot;&gt;&lt;/a&gt;FIXME:4.运行循环 生命周期&lt;/h4&gt;&lt;p&gt;1.运行循环的生命周期：在第一次获取时创建，在线程结束时销毁&lt;/p&gt;
&lt;h4 id=&quot;FIXME-5-运行循环-基本运行流程&quot;&gt;&lt;a href=&quot;#FIXME-5-运行循环-基本运行流程&quot; class=&quot;headerlink&quot; title=&quot;FIXME:5.运行循环 基本运行流程&quot;&gt;&lt;/a&gt;FIXME:5.运行循环 基本运行流程&lt;/h4&gt;&lt;p&gt;1.创建消息（即输入源）；&lt;/p&gt;
&lt;p&gt;2.指定该事件（源）在循环中运行的模式，并加入循环；&lt;/p&gt;
&lt;p&gt;3.当事件的模式与消息循环的模式匹配的时候，消息才会运行。&lt;/p&gt;
&lt;p&gt;4.运行逻辑总结：一个线程对应一个runLoop,主线程的runloop是程序一启动,默认就创建一个runloop,创建好了之后就会给它添加一些默认的模式,每个模式里面会有很多的 source /timer/observer ,添加好这些模式后,observer就会监听主线程的runloop,进入runloop后,就开始处理事件,先处理timer,再处理source0,source0处理完之后再处理source1,当把这些所有的事件反复的处理完之后,如果没有事件了,那么runloop就会进入睡眠状态,当用户又触发了新的事件,就会唤醒runloop,唤醒runloop后回到第二步,重新处理新的timer,新的source0,新的source1,处理完后就睡眠,一直反复,当我们把程序关闭或者强退,这个时候observer就会监听都runloop退出了.&lt;/p&gt;
&lt;h4 id=&quot;FIXME-6-运行循环-API&quot;&gt;&lt;a href=&quot;#FIXME-6-运行循环-API&quot; class=&quot;headerlink&quot; title=&quot;FIXME:6.运行循环 API&quot;&gt;&lt;/a&gt;FIXME:6.运行循环 API&lt;/h4&gt;&lt;p&gt;1.NSRunloop&lt;/p&gt;
&lt;p&gt;2.CFRunLoopRef&lt;/p&gt;
&lt;p&gt;3.两种API的区别1：NSRunloop线程不安全，CFRunLoopRef线程安全；NSRunLoop是Cocoa框架中的类，与之对应的是在Core Fundation中有一个CFRunLoopRef类。这两者的区别是前者不是线程安全的，而CFRunLoopRef是线程安全的。所以：NSRunloop不能调用其他线程的方法.The NSRunLoop class is generally not considered to be thread-safe and its methods should only be called within the context of the current thread. You should never try to call the methods of an NSRunLoop object running in a different thread, as doing so might cause unexpected results.&lt;/p&gt;
&lt;p&gt;4.两种API的区别2：CFRunLoopRef创建一个timer必须添加到runloop 才会执行,添加的时候要指定模式 defaurce模式 ,不对程序做任何操作 timer就会后台运行 ,当我进行操作的时候runloop模式就会从默认模式切换到其他模式,假如说我操作scrollerView 它就会从default模式切换到tracking模式。而roonloop 同一时刻只能执行一种模式.&lt;/p&gt;
&lt;p&gt;5.NSRunLoop是基于CFRunLoopRef的一层OC包装，提供了面向对象的 API，但是这些 API 不是线程安全的。所以要了解RunLoop内部结构，需要多研究CFRunLoopRef层面的API（Core Foundation层面）&lt;/p&gt;
&lt;h4 id=&quot;FIXME-7-运行循环-启动&quot;&gt;&lt;a href=&quot;#FIXME-7-运行循环-启动&quot; class=&quot;headerlink&quot; title=&quot;FIXME:7.运行循环 启动&quot;&gt;&lt;/a&gt;FIXME:7.运行循环 启动&lt;/h4&gt;&lt;p&gt;启动的三种方式：&lt;/p&gt;
&lt;p&gt;1.无条件的—-无条件的进入Runloop是最简单的方法，但也最不推荐使用的。因为这样会使你的线程处在一个永久的循环中，这会让你对Runloop本身的控制很少。你可以添加或删除输入源和定时器，但是退出Runloop的唯一方法是杀死它。没有任何办法可以让这Runloop运行在自定义模式下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] run];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.设置超时时间—-替代无条件进入Runloop更好的办法是用预设超时时间来运行Runloop，这样Runloop运作直到某一事件到达或者规定的时间已经到期。如果是事件到达，消息会被传递给相应的处理程序来处理，然后Runloop退出。你可以重新启动Runloop来等待下一事件。如果是规定时间到期了，你只需简单的重启Runloop或使用此段时间来做任何的其他工作。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]]; 2 秒钟之后结束&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.特定的模式—-除了超时机制，你也可以使用特定的模式来运行你的Runloop。模式和超时不是互斥的，他们可以在启动RunLoop的时候同时使用。模式限制了可以传递事件给Runloop的输入源的类型。暂停当前处理的流程，转而处理其他输入源，当date设置为&lt;a href=&quot;将来，基本不会到达的时间&quot;&gt;NSDate distantFuture&lt;/a&gt;，所以除非处理其他输入源结束，否则永不退出处理暂停的当前处理的流程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;FIXME-8-运行循环-结束&quot;&gt;&lt;a href=&quot;#FIXME-8-运行循环-结束&quot; class=&quot;headerlink&quot; title=&quot;FIXME:8.运行循环 结束&quot;&gt;&lt;/a&gt;FIXME:8.运行循环 结束&lt;/h4&gt;&lt;p&gt;结束的三种方式：&lt;/p&gt;
&lt;p&gt;1.给RunLoop设置超时时间&lt;/p&gt;
&lt;p&gt;2.通知RunLoop停止—-如果可以配置的话，推荐使用第一种方法。指定一个超时时间可以使RunLoop退出前完成所有正常操作，包括发送消息给RunLoop观察者。&lt;/p&gt;
&lt;p&gt;3.使用CFRunLoopStop来显式的停止RunLoop和使用超时时间产生的结果相似。RunLoop把所有剩余的通知发送出去再退出。与设置超时的不同的是你可以在无条件启动的RunLoop里面使用该技术。&lt;/p&gt;
&lt;h4 id=&quot;FIXME-9-运行循环-添加输入源&quot;&gt;&lt;a href=&quot;#FIXME-9-运行循环-添加输入源&quot; class=&quot;headerlink&quot; title=&quot;FIXME:9.运行循环 添加输入源&quot;&gt;&lt;/a&gt;FIXME:9.运行循环 添加输入源&lt;/h4&gt;&lt;p&gt;具体查看《NSRunLoop【例子&lt;em&gt;输入源&lt;/em&gt;】》&lt;/p&gt;
&lt;h4 id=&quot;FIXME-10-运行循环-移除输入源&quot;&gt;&lt;a href=&quot;#FIXME-10-运行循环-移除输入源&quot; class=&quot;headerlink&quot; title=&quot;FIXME:10.运行循环 移除输入源&quot;&gt;&lt;/a&gt;FIXME:10.运行循环 移除输入源&lt;/h4&gt;&lt;p&gt;1.输入源被注册到RunLoop中时会有方法进行remove。但是定时器没有remove，但是它的invalidate方法可以将其从RunLoop中移除。invalidate是重要的也是唯一的将定时器从RunLoop中注销的方法，所以如果我们创建了定时器，就一定要再不适用的时候调用invalidate方法。&lt;/p&gt;
&lt;p&gt;2.自动释放池,什么时候创建和释放 ?&lt;br&gt;(1)第一次创建:是在runloop进入的时候创建 对应的状态 = KCFRunLoopEntry&lt;br&gt;(2)最后一个退出,是在runloop退出的时候 对应的状态 = KCFRunLoopExit&lt;br&gt;(3)其他的创建和释放&lt;br&gt;每次睡觉的时候会释放前自动释放池,再创建一个新的&lt;br&gt;即将进入睡眠的时候,先释放上一次创建的自动释放池,然后再创建一个新的释放池&lt;/p&gt;
&lt;h4 id=&quot;FIXME-11-运行循环-能运行的关键&quot;&gt;&lt;a href=&quot;#FIXME-11-运行循环-能运行的关键&quot; class=&quot;headerlink&quot; title=&quot;FIXME:11.运行循环 能运行的关键&quot;&gt;&lt;/a&gt;FIXME:11.运行循环 能运行的关键&lt;/h4&gt;&lt;p&gt;1.每次运行一个RunLoop，你指定（显式或隐式）RunLoop的运行模式。当相应的模式传递给RunLoop时，只有与该模式对应的Input Source才被监控并允许RunLoop对事件进行处理（与此类似，也只有与该模式对应的Observers才会被通知）&lt;/p&gt;
&lt;p&gt;2.上面的对应关系是：&lt;/p&gt;
&lt;p&gt;RunLoop—-模式—-&lt;br&gt;模式—-Input Sources&lt;br&gt;模式—-Observers&lt;/p&gt;
&lt;h4 id=&quot;FIXME-12-运行循环-可以对运行循环做的操作&quot;&gt;&lt;a href=&quot;#FIXME-12-运行循环-可以对运行循环做的操作&quot; class=&quot;headerlink&quot; title=&quot;FIXME:12.运行循环 可以对运行循环做的操作&quot;&gt;&lt;/a&gt;FIXME:12.运行循环 可以对运行循环做的操作&lt;/h4&gt;&lt;p&gt;1.添加输入源；添加定时源；添加观察者；&lt;/p&gt;
&lt;h4 id=&quot;FIXME-13-运行循环-获得RunLoop对象&quot;&gt;&lt;a href=&quot;#FIXME-13-运行循环-获得RunLoop对象&quot; class=&quot;headerlink&quot; title=&quot;FIXME:13.运行循环 获得RunLoop对象&quot;&gt;&lt;/a&gt;FIXME:13.运行循环 获得RunLoop对象&lt;/h4&gt;&lt;p&gt;Foundation&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[NSRunLoop currentRunLoop];   // 获得当前线程的RunLoop对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[NSRunLoop mainRunLoop];      // 获得主线程的RunLoop对象&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Core Foundation&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CFRunLoopGetCurrent();       // 获得当前线程的RunLoop对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CFRunLoopGetMain();          // 获得主线程的RunLoop对象&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;运行循环本质&quot;&gt;&lt;a href=&quot;#运行循环本质&quot; class=&quot;headerlink&quot; title=&quot;运行循环本质&quot;&gt;&lt;/a&gt;运行循环本质&lt;/h4&gt;&lt;p&gt;1.从字面上看，就是运行循环跑圈&lt;/p&gt;
&lt;p&gt;2.其实它内部就是do-while循环，在这个循环内部不断地处理各种任务（比如Source、Timer、Observer）&lt;/p&gt;
&lt;p&gt;3.循环体的开始需要检测是否有需要处理的事件，如果有则去处&amp;gt; - 理，如果没有则进入睡眠以节省CPU时间&lt;/p&gt;
&lt;h4 id=&quot;FIXME-0-运行循环-概念性的东西有？&quot;&gt;&lt;a href=&quot;#FIXME-0-运行循环-概念性的东西有？&quot; class=&quot;headerlink&quot; title=&quot;FIXME:0.运行循环 概念性的东西有？&quot;&gt;&lt;/a&gt;FIXME:0.运行循环 概念性的东西有？&lt;/h4&gt;&lt;p&gt;概念1【输入源==事件源】&lt;br&gt;具体查看《RunLoop【输入源】》&lt;/p&gt;
&lt;p&gt;概念2【模式】&lt;br&gt;具体查看《RunLoop【模式】》&lt;/p&gt;
&lt;p&gt;概念3【观察者Observer】&lt;br&gt;具体查看《RunLoop【观察者】》&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>提升自己</title>
    <link href="williamliuwen.cn/2016/06/06/%E6%8F%90%E5%8D%87%E8%87%AA%E5%B7%B1/"/>
    <id>williamliuwen.cn/2016/06/06/提升自己/</id>
    <published>2016-06-06T12:02:32.000Z</published>
    <updated>2016-06-06T12:24:08.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;疑问：&quot;&gt;&lt;a href=&quot;#疑问：&quot; class=&quot;headerlink&quot; title=&quot;疑问：&quot;&gt;&lt;/a&gt;疑问：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.为什么要学这些？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.什么是系统性的目标？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.如何利用有限时间最大化自己的长期收益&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;行动：&quot;&gt;&lt;a href=&quot;#行动：&quot; class=&quot;headerlink&quot; title=&quot;行动：&quot;&gt;&lt;/a&gt;行动：&lt;/h3&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;第一：打造你的工具箱&lt;br&gt;    如果程序员是侠客，编缉器则是他手中的剑。建议你花足够多的时间来思考如何组织你的个人知识库；做到长期从事的任务（往往不随技术而改变，也不随公司而改变）&lt;br&gt;工具：Emacs&lt;br&gt;信息采集器：用来收集别人产生的信息&lt;br&gt;键盘：HHKB键盘&lt;/p&gt;
&lt;p&gt;第二：目标要够大，这样你才能看到更多的风景。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.“我要成为iOS developer中的达人” “我要成为前端应用开发的专家” 两者区别？前者学到深处你可能会去钻研iOS framework里各种奇技淫巧；后者你会开始关注视觉与交互设计，研究各平台间的差异与共同趋势；后者更有助于你的个人发展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.当初入一个领域时，选择主流技术框架；当你有一定经验后，选择技术时更应该关注背后的推动者，我相信优秀的人和团队总能打造优秀的产品，无论是商业公司还是开源社区。不必太在意技术的新旧，因为可能很快都会成为过去时。你真正要学习的是技术背后的思想。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.如果学习一门技术仅仅停留在用的层面上，你就还没有完全吸取其中的精华，而且学习的收益会随着技术的过时而消失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4.在选择学习一门新技术时，最大化它与你现有知识库的差异性。不管你是否会在可见的未来用到，它们能让你从一个不同的角度看待编程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5.有很多人想成为全栈工程师，最快的捷径就是打造一款自己的产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;6.如果每一个程序员都有自己的作品，我想程序员的面试会简单许多。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第三：重视沟通能力的培养、&lt;/p&gt;
&lt;p&gt;第四：累积你的人脉：结识一两个同道中人远比听技术讲座有价值。每个人都需要一个职场导师。&lt;/p&gt;
&lt;p&gt;第五：公司的发展前景、你将要加入的团队、薪资福利&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0606.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只要你想学，就去学。不要考虑成功在哪里。其实最重要的是过程。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;疑问：&quot;&gt;&lt;a href=&quot;#疑问：&quot; class=&quot;headerlink&quot; title=&quot;疑问：&quot;&gt;&lt;/a&gt;疑问：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.为什么要学这些？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.什么是系统性的目标？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.如何利用有限时间最大化自己的长期收益&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;行动：&quot;&gt;&lt;a href=&quot;#行动：&quot; class=&quot;headerlink&quot; title=&quot;行动：&quot;&gt;&lt;/a&gt;行动：&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitHub命令小结</title>
    <link href="williamliuwen.cn/2016/06/03/GitHub%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/"/>
    <id>williamliuwen.cn/2016/06/03/GitHub命令小结/</id>
    <published>2016-06-03T11:57:34.000Z</published>
    <updated>2016-06-03T12:00:56.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;如果你是初学者，可以按照步骤来，这是一个记录贴，方便查询代码；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;初步建立GitHub仓库的一些命令：&quot;&gt;&lt;a href=&quot;#初步建立GitHub仓库的一些命令：&quot; class=&quot;headerlink&quot; title=&quot;初步建立GitHub仓库的一些命令：&quot;&gt;&lt;/a&gt;初步建立GitHub仓库的一些命令：&lt;/h3&gt;&lt;p&gt;touch README.md  // 新建说明文件&lt;br&gt;ssh-keygen -t rsa -C “your_email@youremail.com” // 创建本地的keygen&lt;br&gt;cd ~/.ssh // 进入创建好keygen的文件，用cat id_rsa.pub来查看keygen，然后再把它复制到你的github&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;ssh -T git@github.com // 这个是测试一下连接；&lt;br&gt;git config –global user.name “your name”&lt;br&gt;git config –global user.email “your_email@youremail.com”&lt;br&gt;git init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录&lt;br&gt;git add . //添加当前目录中的所有文件到索引&lt;br&gt;git commit -m “first commit”  // 提交到本地源码库，并附加提交注释&lt;br&gt;git remote add origin https: // github.com/chape/test.git //添加到远程项目，别名为origin&lt;br&gt;git push -u origin master  // 把本地源码库push到github 别名为origin的远程项目中，确认提交&lt;/p&gt;
&lt;h3 id=&quot;每次更改完本地仓库之后，使用更新语句提交到远程仓库：&quot;&gt;&lt;a href=&quot;#每次更改完本地仓库之后，使用更新语句提交到远程仓库：&quot; class=&quot;headerlink&quot; title=&quot;每次更改完本地仓库之后，使用更新语句提交到远程仓库：&quot;&gt;&lt;/a&gt;每次更改完本地仓库之后，使用更新语句提交到远程仓库：&lt;/h3&gt;&lt;p&gt;cd /到你要更新的目录下&lt;/p&gt;
&lt;p&gt;git add .&lt;/p&gt;
&lt;p&gt;git commit -m “update test” //检测文件改动并附加提交注释&lt;/p&gt;
&lt;p&gt;git push -u origin master //提交修改到项目主线&lt;/p&gt;
&lt;h3 id=&quot;如果你在家又更新代码；回到公司的本地代码库没有更新到最新，就需要从远程仓库pull下最新的代码到本地：&quot;&gt;&lt;a href=&quot;#如果你在家又更新代码；回到公司的本地代码库没有更新到最新，就需要从远程仓库pull下最新的代码到本地：&quot; class=&quot;headerlink&quot; title=&quot;如果你在家又更新代码；回到公司的本地代码库没有更新到最新，就需要从远程仓库pull下最新的代码到本地：&quot;&gt;&lt;/a&gt;如果你在家又更新代码；回到公司的本地代码库没有更新到最新，就需要从远程仓库pull下最新的代码到本地：&lt;/h3&gt;&lt;p&gt;git pull origin master //从Github上pull到本地源码库&lt;/p&gt;
&lt;h3 id=&quot;后期进阶用到的GitHub命令：&quot;&gt;&lt;a href=&quot;#后期进阶用到的GitHub命令：&quot; class=&quot;headerlink&quot; title=&quot;后期进阶用到的GitHub命令：&quot;&gt;&lt;/a&gt;后期进阶用到的GitHub命令：&lt;/h3&gt;&lt;p&gt;git push origin master //把本地源码库push到Github&lt;br&gt;git config –list //查看配置信息&lt;br&gt;git status //查看项目状态信息&lt;br&gt;git branch //查看项目分支&lt;br&gt;git checkout -b host//添加一个名为host的分支&lt;br&gt;git checkout master //切换到主干&lt;br&gt;git merge host //合并分支host到主干&lt;br&gt;git branch -d host //删除分支host&lt;/p&gt;
&lt;p&gt;&lt;em&gt;持续更新,逐步完善…&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;最近更新说明：&quot;&gt;&lt;a href=&quot;#最近更新说明：&quot; class=&quot;headerlink&quot; title=&quot;最近更新说明：&quot;&gt;&lt;/a&gt;最近更新说明：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;2015.10.16 终于知道了怎么同步远程仓库到本地。&lt;/li&gt;
&lt;li&gt;2016.06.03 把文章迁移过来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0603.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;桃之夭夭，灼灼其华，之子于归，宜其室家。 —— 《诗经‧周南‧桃夭》&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果你是初学者，可以按照步骤来，这是一个记录贴，方便查询代码；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;初步建立GitHub仓库的一些命令：&quot;&gt;&lt;a href=&quot;#初步建立GitHub仓库的一些命令：&quot; class=&quot;headerlink&quot; title=&quot;初步建立GitHub仓库的一些命令：&quot;&gt;&lt;/a&gt;初步建立GitHub仓库的一些命令：&lt;/h3&gt;&lt;p&gt;touch README.md  // 新建说明文件&lt;br&gt;ssh-keygen -t rsa -C “your_email@youremail.com” // 创建本地的keygen&lt;br&gt;cd ~/.ssh // 进入创建好keygen的文件，用cat id_rsa.pub来查看keygen，然后再把它复制到你的github&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>衣物极简原则</title>
    <link href="williamliuwen.cn/2016/06/01/%E8%A1%A3%E7%89%A9%E6%9E%81%E7%AE%80%E5%8E%9F%E5%88%99/"/>
    <id>williamliuwen.cn/2016/06/01/衣物极简原则/</id>
    <published>2016-06-01T12:09:33.000Z</published>
    <updated>2016-06-01T12:15:52.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;每日给自己一句话：超抵抗力最大的路径前进！&quot;&gt;&lt;a href=&quot;#每日给自己一句话：超抵抗力最大的路径前进！&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：超抵抗力最大的路径前进！&quot;&gt;&lt;/a&gt;每日给自己一句话：超抵抗力最大的路径前进！&lt;/h3&gt;&lt;p&gt;转自：豆瓣：Oscar&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之一：-衣物精简原则&quot;&gt;&lt;a href=&quot;#我的精简心得之一：-衣物精简原则&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之一： 衣物精简原则&quot;&gt;&lt;/a&gt;我的精简心得之一： 衣物精简原则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;有不少人问我是怎么精简我的物品的，有哪些经验或者哪些物品值得推荐。其实在精简的过程中，我确实感受到这里面还是有一定的原则可循的，那就写一篇文字和大家分享。声明：以下文字只是个人总结，没有经过普遍性验证，仅供参考。在精简物品的过程中，个人衣物是重头戏，我们就先来谈谈这个话题。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;精简原则：&quot;&gt;&lt;a href=&quot;#精简原则：&quot; class=&quot;headerlink&quot; title=&quot;精简原则：&quot;&gt;&lt;/a&gt;精简原则：&lt;/h4&gt;&lt;p&gt;1、功能性&amp;gt;适合性&amp;gt;个人喜好&lt;br&gt;我们平时在选购物品的时候，经常以个人喜好为主要标准。但是我认为要以功能性优先。比如你有很多喜欢的牛仔裤，但是如果公司要求正装出席某些场合的时候，你是否有合适的服装？&lt;br&gt;在满足功能性的前提下，其次要考虑的是适合性。穿在模特身上好看的衣服，一定适合自己吗？绝大多数情况之下，答案让人沮丧。我们的喜好经常受到媒体潜移默化地引导。最好的办法还是要了解自己的特质，身材比例，体型，肤色，气质，等等。网上有很多这类的电子书，大家可以参阅。&lt;br&gt;最后，在功能性和适合性都得到满足的前提下，我们再去考虑个人喜好。&lt;/p&gt;
&lt;p&gt;2、 基本款&amp;gt;流行款&lt;br&gt;基本款的另一个名字叫经典。相对于流行款，它的适用范围更广，可搭配程度更高，并且不需要经常升级和更新。基本款的颜色最好选择纯色，相对于花色或多色的衣服，纯色的衣服更加高雅和容易搭配。&lt;/p&gt;
&lt;p&gt;3、外衣偏深色，内衣偏浅色。&lt;br&gt;投资了经典设计和高质量的基本款之后，衣服升级的频率就会显著地下降。但是在这里要说明，外衣选择深色，即使很长时间之后也不会显得很旧；而内衣则不然，由于是贴身的衣服，应该选择浅色，一旦颜色泛黄显旧就要更新升级，以保证衣物的功能性，防止影响健康。&lt;/p&gt;
&lt;p&gt;4、选择可以承受范围内最好的。&lt;br&gt;便宜的东西未必不好，但好东西肯定不便宜。从经济学的角度来说，非常容易理解。好的衣服，需要好的设计人员，优质的原材料，高超的制作工艺，等等…这些成本都要分摊到我们购买的价格中。但是，由于适合我们自己的东西不多（因为个人特征的独特性），所以在购买数量小的前提下，我们可以追求那些设计和质量更好的衣服，当然价钱会更高。需要说明的是，我们要鉴别价格高的原因，如果是出于品牌定位的话，我就觉得没有必要了。&lt;/p&gt;
&lt;p&gt;5、去标签化。&lt;br&gt;我们已经为商品付出了成本，不再需要变成商家的移动广告，我买的是商品本身而不是它的品牌效应。在同等质量的情况下，我会选择没有标签的，或者标签非常小的，或者标签不起眼的品牌。&lt;/p&gt;
&lt;p&gt;6、精明选择，标准化更替。&lt;br&gt;由于成年之后，我们的特征相对稳定。所以按照上面的原则选择的衣服应该是比较适合自己的，那么接下来就对这些衣物进行标准化，也就是说在衣物需要更替的时候，尽量选择同品牌同款同色的衣服。&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之二-内衣篇&quot;&gt;&lt;a href=&quot;#我的精简心得之二-内衣篇&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之二 内衣篇&quot;&gt;&lt;/a&gt;我的精简心得之二 内衣篇&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在第一篇心得中，曾经有一条原则涉及到内衣的选择，就是内衣要选择浅色。其他的就看个人的偏好了，而且在这个方面，男生女生的选择差异巨大。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于我这样的男生而言，选择相对简单：&lt;/p&gt;
&lt;p&gt;1、 V领白色短袖打底衫－优衣库 AIRism系列&lt;br&gt;这个主要是温暖季节为衬衣打底，不至于衬衣因为出汗而贴到后背上。另外，穿白衬衣的时候也不至于太透。由于白色打底，会让白衬衣看上去更加洁白。&lt;/p&gt;
&lt;p&gt;2、V领白色长袖打底衫－优衣库 HEATTECH系列&lt;/p&gt;
&lt;p&gt;3、白色紧身裤 －HEATTECH系列&lt;br&gt;这两件基本上应对冬季，除非特别冷的天气，平时足够了。&lt;/p&gt;
&lt;p&gt;4、黑色五指袜 - 优衣库&lt;br&gt;五指袜能够有效保持脚趾间部位的干爽，达到保暖，抑菌的作用，对足部健康非常有益。对于袜子，我只选择黑色，因为百搭。&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之三：中衣篇&quot;&gt;&lt;a href=&quot;#我的精简心得之三：中衣篇&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之三：中衣篇&quot;&gt;&lt;/a&gt;我的精简心得之三：中衣篇&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;选择功能性较强的内衣可以很大程度上削弱中衣的重要性，而中衣的选择则更多地关注百搭。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、纯色精致牛津纺衬衣 - 优衣库&lt;br&gt;衬衣主要在工作场合穿着，所以纯色的衬衣更百搭。精致牛津纺面料容易打理，由于我衬衣和衣架一一对应，所以洗过晾干的衬衣也不用叠，直接挂到衣橱里面，没有什么褶皱和折痕，避免了熨烫的麻烦。&lt;/p&gt;
&lt;p&gt;2、V领浅灰色羊毛衫 - 无印良品&lt;br&gt;灰色是高雅色，也属于百搭系列。和西裤衬衣组合就非常商务，而和牛仔裤搭配就非常休闲。&lt;/p&gt;
&lt;p&gt;3、Columbia Men’s Expedition Long Sleeve 1/2 Zip Shirt - Black&lt;/p&gt;
&lt;p&gt;4、Columbia Men’s Extreme Fleece Tight - Black&lt;br&gt;哥伦比亚这一身保暖效果非常好，使用了OMNI-HEAT THERMAL REFLECTIVE技术，能够反射人体自身散发的热量，通过自身的热量循环减少热量损失，最终达到保暖的作用，同时兼顾透气，排汗，速干和抑菌。这个套装对我非常重要，它们使我不借助臃肿的羽绒服轻松度过华北的寒冬。&lt;/p&gt;
&lt;p&gt;5、浅灰色长袖T恤衫 - 优衣库&lt;br&gt;百搭休闲。&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之四：外衣篇&quot;&gt;&lt;a href=&quot;#我的精简心得之四：外衣篇&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之四：外衣篇&quot;&gt;&lt;/a&gt;我的精简心得之四：外衣篇&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果不是意外损坏的话，外衣的使用寿命一般都是很长的，更新换代的频率也非常慢。所以，选择的标准是经典款式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、短款黑色羊绒大衣。&lt;br&gt;即使再极简，我也觉得这件外衣不能少。和西裤搭配，那就是商务着装的代表；和牛仔裤搭配，那就休闲衣着的经典。&lt;/p&gt;
&lt;p&gt;2、黑色商务套装。&lt;br&gt;其实，炭灰色也许比黑色更经典。不论怎样，西装是功能性第一的服装，不过一套足矣。&lt;/p&gt;
&lt;p&gt;3、黑色西裤。&lt;br&gt;主要是工作着装。&lt;/p&gt;
&lt;p&gt;4、牛仔裤。&lt;br&gt;无需赘述，一条就好。&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之五-APP管理篇&quot;&gt;&lt;a href=&quot;#我的精简心得之五-APP管理篇&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之五 APP管理篇&quot;&gt;&lt;/a&gt;我的精简心得之五 APP管理篇&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;现在智能设备大行其道，确实给我们带来了方便，但同时也带来了烦恼。如何找到自己需要的App呢？我也没有灵丹妙药，还是要根据自己的需要不断尝试，去粗取精。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过了长时间的体验，我最终选择了这几个App, 和大家分享一下，如果你也一直在寻找这类的App, 不妨体验一下，或者有更好的推荐也可以分享给我。那我就在这里抛个砖引个玉吧。&lt;/p&gt;
&lt;p&gt;1、Kindle: Mobi格式电子书阅读利器。&lt;/p&gt;
&lt;p&gt;2、Pocket: 优秀文章一键保存。&lt;/p&gt;
&lt;p&gt;3、Adobe Reader: PDF格式电子书阅读。&lt;/p&gt;
&lt;p&gt;4、WeChat: 关闭朋友圈功能，主要用于《逻辑思维》语音推荐和推荐文章阅读。&lt;/p&gt;
&lt;p&gt;5、WhatsApp: 和国外朋友和同事日常联系。&lt;/p&gt;
&lt;p&gt;6、 LinkedIn: 商务应用。&lt;/p&gt;
&lt;p&gt;7、MindNode: 思维的导图工具。&lt;/p&gt;
&lt;p&gt;8、Evernote: 知识管理工具。&lt;/p&gt;
&lt;p&gt;9、Eidetic: 记忆增强工具。&lt;/p&gt;
&lt;p&gt;10、Bible: 电子版圣经。&lt;br&gt;其它日常需要都能够被系统自带App满足。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0601.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有小孩知道他们在寻找什么。 —— 《小王子》    &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;每日给自己一句话：超抵抗力最大的路径前进！&quot;&gt;&lt;a href=&quot;#每日给自己一句话：超抵抗力最大的路径前进！&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：超抵抗力最大的路径前进！&quot;&gt;&lt;/a&gt;每日给自己一句话：超抵抗力最大的路径前进！&lt;/h3&gt;&lt;p&gt;转自：豆瓣：Oscar&lt;/p&gt;
&lt;h4 id=&quot;我的精简心得之一：-衣物精简原则&quot;&gt;&lt;a href=&quot;#我的精简心得之一：-衣物精简原则&quot; class=&quot;headerlink&quot; title=&quot;我的精简心得之一： 衣物精简原则&quot;&gt;&lt;/a&gt;我的精简心得之一： 衣物精简原则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;有不少人问我是怎么精简我的物品的，有哪些经验或者哪些物品值得推荐。其实在精简的过程中，我确实感受到这里面还是有一定的原则可循的，那就写一篇文字和大家分享。声明：以下文字只是个人总结，没有经过普遍性验证，仅供参考。在精简物品的过程中，个人衣物是重头戏，我们就先来谈谈这个话题。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>极简消费观</title>
    <link href="williamliuwen.cn/2016/05/31/%E6%9E%81%E7%AE%80%E6%B6%88%E8%B4%B9%E8%A7%82/"/>
    <id>williamliuwen.cn/2016/05/31/极简消费观/</id>
    <published>2016-05-31T12:17:55.000Z</published>
    <updated>2016-05-31T12:20:28.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;每日给自己一段话：&quot;&gt;&lt;a href=&quot;#每日给自己一段话：&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一段话：&quot;&gt;&lt;/a&gt;每日给自己一段话：&lt;/h3&gt;&lt;p&gt;生活就像逆水行舟，想活得有意义，还是要走抵抗力最大的那条路。看书学习抵抗力大，刷微博微信抵抗力小；坚持锻炼身体抵抗力大，窝在沙发里上网看电视抵抗力小；吃清淡健康食物抵抗力大，喝啤酒吃炸鸡抵抗力小；精简生活抵抗力大，囤积、消费抵抗力小。&lt;br&gt;抵抗力最大的路和抵抗力最小的路有共同的起点，可终点不啻霄壤。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;开始正文：来自网络&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在我们现在的社会中，消费主义是主流思想。每天我们都要被动地被广告成千上万次，在这样密集的轰滥炸式的灌输之下，有几人能保持理性消费？广告的作用并不是简单地宣扬产品的优点，其真正的目的是营造一种气氛，造成一种假象，让你感觉必须使用这种产品你才能幸福。但是，从过去成千上万次的消费经验中，我们很容易就能发现，购买不能让我们感到真正的快乐。但是那些看上去很好、实际没用的东西却让我们付出巨大的代价。我们需要加更多的班，挣更多的钱去还信用卡；我们减少了陪家人的时间；我们减少了本应该不断增长的个人存款；我们减少了梦想基金。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我一个朋友，爱买衣服。那些衣服价格不菲，堆积成山，很少上身，甚至有的根本没穿过。她有一个梦想就是去欧洲旅行，尤其喜欢捷克的布拉格。很久以来，一直都念叨着存钱去旅行。我告诉她，如果你不买那些从来没有穿过的衣服，你早可以在布拉格广场边上租个房子住上一个月了…&lt;br&gt;那什么是极简消费观呢？我没有明确的定义，但我可以分享自己的看法。&lt;/p&gt;
&lt;h5 id=&quot;第一原则：能租的就不买，能借的就不租。&quot;&gt;&lt;a href=&quot;#第一原则：能租的就不买，能借的就不租。&quot; class=&quot;headerlink&quot; title=&quot;第一原则：能租的就不买，能借的就不租。&quot;&gt;&lt;/a&gt;第一原则：能租的就不买，能借的就不租。&lt;/h5&gt;&lt;p&gt;我不是为了购买而购买，消费是为了完成某件事情。看看家里的东西，很多都是使用了一次或者几次之后就束之高阁，在我们“万一某天还能用的上”的心理作用下，被遗忘在角落。如果你做一个试验，把所有的物品都整理出来，你会发现已经忘记很多东西的存在。所以，租、借的方式可能让我们省下很多的金钱、维护的精力、家中的空间，还能让那些东西物尽其用。&lt;/p&gt;
&lt;h5 id=&quot;第二原则：少、小、好、巧，外加环保。&quot;&gt;&lt;a href=&quot;#第二原则：少、小、好、巧，外加环保。&quot; class=&quot;headerlink&quot; title=&quot;第二原则：少、小、好、巧，外加环保。&quot;&gt;&lt;/a&gt;第二原则：少、小、好、巧，外加环保。&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;少&lt;/strong&gt;：囤积是人的天性之一，商家也用“量贩”的方式引诱消费者。可是为什么购买超过需求的物品呢？就是因为便宜？但是你牺牲了家中的空间和再次选择的权利。我曾经以量贩的方式购买过东西，后来发现不好用。扔掉省下的大部分吧，绝对浪费；不扔吧，实在不好用；最后，好不容易用完了，简直是煎熬。以后就买小包装了，其实没有贵多少，再说，哪有量贩式的精品…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小&lt;/strong&gt;：现在进入了微时代，什么都是越便携越好。这个我非常赞同。一般来说，东西做大一些相对容易，要做得更小，需要更加精细的工艺。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好&lt;/strong&gt;：极简主义者不是乞丐，虽然我拒绝购买不需要的物品，但是对于购买的物品质量都是高要求的。由于购买的东西少，我有更多的资金去购买高质量的物&lt;br&gt;品，享受高品质的使用体验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;巧&lt;/strong&gt;：我喜欢设计精巧的物品。这样在使用的时候更加方便顺手，同时也能增加使用的愉悦感。典型的例子就是瑞士军刀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环保&lt;/strong&gt;：物品的材质不但影响品质，也影响环境。尽量选择环保材料和生产工艺的物品是极简主义者的态度。例如：能用玻璃的，就不用塑料；能用电子的，就不用纸张；能用再生纸的，就不用非再生纸；能用棉花的，就不用羊毛的，等等。&lt;/p&gt;
&lt;p&gt;这些原则不是对生活的限制，而是对生活品质的追求&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0531.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;士之读书治学，盖将以脱心志于俗谛之桎梏，真理因得以发扬。思想而不自由，毋宁死耳。 —— 陈寅恪    &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;每日给自己一段话：&quot;&gt;&lt;a href=&quot;#每日给自己一段话：&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一段话：&quot;&gt;&lt;/a&gt;每日给自己一段话：&lt;/h3&gt;&lt;p&gt;生活就像逆水行舟，想活得有意义，还是要走抵抗力最大的那条路。看书学习抵抗力大，刷微博微信抵抗力小；坚持锻炼身体抵抗力大，窝在沙发里上网看电视抵抗力小；吃清淡健康食物抵抗力大，喝啤酒吃炸鸡抵抗力小；精简生活抵抗力大，囤积、消费抵抗力小。&lt;br&gt;抵抗力最大的路和抵抗力最小的路有共同的起点，可终点不啻霄壤。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>极简生活</title>
    <link href="williamliuwen.cn/2016/05/30/%E6%9E%81%E7%AE%80%E7%94%9F%E6%B4%BB/"/>
    <id>williamliuwen.cn/2016/05/30/极简生活/</id>
    <published>2016-05-30T11:43:26.000Z</published>
    <updated>2016-05-30T12:02:58.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;关键词：&quot;&gt;&lt;a href=&quot;#关键词：&quot; class=&quot;headerlink&quot; title=&quot;关键词：&quot;&gt;&lt;/a&gt;关键词：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;仓库(住所)&lt;/li&gt;
&lt;li&gt;现在当下（快活）&lt;/li&gt;
&lt;li&gt;未来过去（不快活）&lt;/li&gt;
&lt;li&gt;需要，合适，舒服&lt;/li&gt;
&lt;li&gt;不增加衣物，不增加卡片&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;内容较多，给大家列多几点&quot;&gt;&lt;a href=&quot;#内容较多，给大家列多几点&quot; class=&quot;headerlink&quot; title=&quot;内容较多，给大家列多几点:&quot;&gt;&lt;/a&gt;内容较多，给大家列多几点:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;超过自己管理能力的物品，不持有不留恋的物品，不持有无法回归自然或转让给其他人的物品，不持有和自己或自己的生活风格不符的物品，不持有生命本身就是一场体验，只经历，不占有。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不持有的生活不仅是提倡绿色环保，节俭，乐活，更是精神压力的释放与解脱，内省，灵修，心灵成长和达到各方面的平衡。每天使用到的东西要斤斤计较，就是常用的东西都要选自己喜欢的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于一些不常用的东西，可以向朋友借。让自己的东西只出不进每天坚持不买瓶装饮料，而是自制饮料。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每天收拾一个抽屉每天走路带上计步器。扔掉不要的运动器材。出门自己带购物袋，不需要商场的购物袋，不要接受免费的赠品。购物的时候要考虑东西是否对自己有用。而不是看买哪件还是哪件好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不去特定去看优惠的信息，要到需要的时候去买，而不是看到优惠才想自己需不需要买。两者前后顺序不一样。不管多便宜，只买有用的东西即使免费送，也只接受需要的东西。学会扔掉的习惯。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会用东西来代替自己需要的东西。如果你在考虑你是否需要买一样东西的时候，可以考虑这样东西，是否有无都对你无所谓。如果是就不买。跟比人说“谢谢”的时候，要注释对方的眼睛并微笑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每天至少仰望一次天空。r吃饭的时候不可一心二用，如一边吃饭一边看电视。回家之后，一定要把手提包和外套放到固定位置，回家之后，把脱下来的鞋摆好。在泡澡之前让孩子（或自己）将玩具放好。最好不要使用淋浴，而是盆浴。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每天闭目静坐5分钟。尽量一天之内整理好已经晒干的衣物。在固定的时间看电视在固定的时间上网，玩游戏。睡觉之前，确保地面上没有任何东西。睡觉之前，不要在水槽中放置需要洗涤的衣物。睡觉之前，准备好第二天外出时所需的物品。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;每一条都很受用，慢慢领悟慢慢做，如果都做到了，你就成功了：&quot;&gt;&lt;a href=&quot;#每一条都很受用，慢慢领悟慢慢做，如果都做到了，你就成功了：&quot; class=&quot;headerlink&quot; title=&quot;每一条都很受用，慢慢领悟慢慢做，如果都做到了，你就成功了：&quot;&gt;&lt;/a&gt;每一条都很受用，慢慢领悟慢慢做，如果都做到了，你就成功了：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每天用吸尘器把房间打扫一遍。每三天擦拭一次地板和家具。把一年之内不打算穿的衣服处理掉（出售，转赠，扔掉）对那些沾有污垢或开线的衣物进行修补，无法修补的处理掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理掉不佩戴的饰品。处理掉夹脚或基本不穿的鞋。将那些毫无“用武之地”的领带处理掉处理掉那些变旧或使用起来不舒服的毛巾。处理掉多余的被褥及亚麻类用品处理掉那些毫无用处的家具和电器。处理掉那些没有保存价值的信–仅仅是问候的信？邮递广告。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;扔掉那些没有放入相册中或没有保存必要的照片处理掉已经用不到的婴儿车等婴儿用品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理掉不玩的玩具在一个月前的杂志中，找出有保存价值的保存起来，其余的处理掉。处理掉那些读过后感觉没有保存价值的书（出售，送人，扔掉）处理掉那些听过后没有感觉没有保存价值的dvd处理掉那些录好后一直没有看过的录像处理掉那些拆开没再碰过的赠品或礼物处理掉不喜欢的装饰品处理掉那些不用的餐具盒烹饪用具去自己喜欢的饭店遇到东西用完的情况时，尽量选择不购买，试着用其他方式代替，以不增加物品，一定要买，则要选择可以使生活变得更加简单的物品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择购买食品时，选那些没有附带赠品的东西；不要申请会员卡。不要轻易在跳蚤市场买东西，不要图便宜货觉得有趣就盲目购买。不要轻易在外出旅行时购买纪念品。尽量使用充电电池。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;吃剩的冷冻食品不要在继续保存。不让免费的物品进入家里，家里的东西就会慢慢变少。不购买那些长期储藏品使家中物品的数量缩减20%银行卡有钱才买商品，不能提前透支。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多出去旅行或听音乐会，以此来取代购物。对于长期处于无精打采的状态的人，应该美美的睡一觉，吃一顿，欣赏美丽的风景，给予身体和心灵养分。约朋友出来见个面。帮助不肯扔东西的人，一点点的开始扔垃圾，即使当事人发现了，自己也要装作不知道。需要“从无论怎么看都是垃圾”的东西开始。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;我很喜欢这一条：&quot;&gt;&lt;a href=&quot;#我很喜欢这一条：&quot; class=&quot;headerlink&quot; title=&quot;我很喜欢这一条：&quot;&gt;&lt;/a&gt;我很喜欢这一条：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对于兴趣爱好，即使花费时间，也不能花费金钱的原则，另外，如果对某件事情产生了兴趣，就一定要坚持到底。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果对很多事情都感兴趣，尽量选择那些不需要太多东西的爱好。对某一事情产生兴趣时，尽量租借所需的物品。如果对某一爱好不感兴趣了，就将与之有关的东西赠与或借给他人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于那些即使花钱也很难坚持到底的兴趣，要趁早放弃。从你最介意的地方开始处理，并要保证处理后东西不会再增加。衣服的分类1工作2游玩3日常生活4正式场合需要处理的东西报纸，宣传单各种通知单剪报，发票会员卡，积分卡纸盒发票要坚持放在固定的地方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处理掉不用的会员卡，不接受新的会员卡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;早起30分钟，让你的时间渐渐地宽裕起来。认真地享受自己的每一餐（包括做饭的过程），这样你的心情也会得到放松。仰望天空无须花费你很多时间，但却能使你的生活变得悠闲，舒适。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0530.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你把幸福掌握在手中的时候，它看起来总是微不足道，但当它不见的时候，你才会了解它是多么重要和珍贵。 —— 马克西姆·高尔基&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关键词：&quot;&gt;&lt;a href=&quot;#关键词：&quot; class=&quot;headerlink&quot; title=&quot;关键词：&quot;&gt;&lt;/a&gt;关键词：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;仓库(住所)&lt;/li&gt;
&lt;li&gt;现在当下（快活）&lt;/li&gt;
&lt;li&gt;未来过去（不快活）&lt;/li&gt;
&lt;li&gt;需要，合适，舒服&lt;/li&gt;
&lt;li&gt;不增加衣物，不增加卡片&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络专家认识论</title>
    <link href="williamliuwen.cn/2016/05/28/%E7%BD%91%E7%BB%9C%E4%B8%93%E5%AE%B6%E8%AE%A4%E8%AF%86%E8%AE%BA/"/>
    <id>williamliuwen.cn/2016/05/28/网络专家认识论/</id>
    <published>2016-05-28T01:50:45.000Z</published>
    <updated>2016-05-28T01:54:09.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;每日给自己一句话：在没有成功之前都是在做量的积累；&quot;&gt;&lt;a href=&quot;#每日给自己一句话：在没有成功之前都是在做量的积累；&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：在没有成功之前都是在做量的积累；&quot;&gt;&lt;/a&gt;每日给自己一句话：在没有成功之前都是在做量的积累；&lt;/h3&gt;&lt;h2 id=&quot;专家&quot;&gt;&lt;a href=&quot;#专家&quot; class=&quot;headerlink&quot; title=&quot;专家&quot;&gt;&lt;/a&gt;专家&lt;/h2&gt;&lt;h3 id=&quot;职称：&quot;&gt;&lt;a href=&quot;#职称：&quot; class=&quot;headerlink&quot; title=&quot;职称：&quot;&gt;&lt;/a&gt;职称：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;高级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作在大的网络公司、或研究所&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要是技术主管、项目经理、技术专家&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1、技术专家&quot;&gt;&lt;a href=&quot;#1、技术专家&quot; class=&quot;headerlink&quot; title=&quot;1、技术专家&quot;&gt;&lt;/a&gt;1、技术专家&lt;/h4&gt;&lt;h5 id=&quot;工作描述：&quot;&gt;&lt;a href=&quot;#工作描述：&quot; class=&quot;headerlink&quot; title=&quot;工作描述：&quot;&gt;&lt;/a&gt;工作描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;某一行业的专家、顾问、权威；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果的确非常喜爱技术工作，而不擅长和喜欢与人沟通，则可以完全专注于自身的领域，以发展成为行业资深专家为方向和目标&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;发展过程比较漫长，任何一个领域的顶尖技术人才都需要长期的行业经验的累积和个人孜孜不倦的投入；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优势是越老越吃香，当别人随着年龄的逐步增长而开始担心饭碗问题时，你则渐入佳境，开始进入职业发展的黄金时期。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;工作要求：&quot;&gt;&lt;a href=&quot;#工作要求：&quot; class=&quot;headerlink&quot; title=&quot;工作要求：&quot;&gt;&lt;/a&gt;工作要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全面的网络技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对新技术有深刻的认识，所以要求有极强的学习能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：&quot;&gt;&lt;a href=&quot;#就业前景：&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;待遇很高，技术人员到30岁后的发展目标之一&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2、项目经理&quot;&gt;&lt;a href=&quot;#2、项目经理&quot; class=&quot;headerlink&quot; title=&quot;2、项目经理&quot;&gt;&lt;/a&gt;2、项目经理&lt;/h4&gt;&lt;h5 id=&quot;工作内容：&quot;&gt;&lt;a href=&quot;#工作内容：&quot; class=&quot;headerlink&quot; title=&quot;工作内容：&quot;&gt;&lt;/a&gt;工作内容：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;融合技术和管理的复合性人才&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参与项目谈判&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目目标和项目财务指标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;划分工作内容并合理分配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指导网络工程师&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;控制工作的进度，按计划完成项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组织项目会议&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;职位要求：&quot;&gt;&lt;a href=&quot;#职位要求：&quot; class=&quot;headerlink&quot; title=&quot;职位要求：&quot;&gt;&lt;/a&gt;职位要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;多年的网络工程师经验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;希望做管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要自己学习项目管理知识&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：-1&quot;&gt;&lt;a href=&quot;#就业前景：-1&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;技术人员到35岁后的发展目标之一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;待遇高，可晋升企业核心管理层&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3、技术主管&quot;&gt;&lt;a href=&quot;#3、技术主管&quot; class=&quot;headerlink&quot; title=&quot;3、技术主管&quot;&gt;&lt;/a&gt;3、技术主管&lt;/h4&gt;&lt;h5 id=&quot;工作任务描述：&quot;&gt;&lt;a href=&quot;#工作任务描述：&quot; class=&quot;headerlink&quot; title=&quot;工作任务描述：&quot;&gt;&lt;/a&gt;工作任务描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;带领技术团队创造更多的价值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在信息方面参与公司的规划和计划&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;职位要求：-1&quot;&gt;&lt;a href=&quot;#职位要求：-1&quot; class=&quot;headerlink&quot; title=&quot;职位要求：&quot;&gt;&lt;/a&gt;职位要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;技术全面；有管理能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：-2&quot;&gt;&lt;a href=&quot;#就业前景：-2&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;是网络工程师30岁后的发展方向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0528.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;每日给自己一句话：在没有成功之前都是在做量的积累；&quot;&gt;&lt;a href=&quot;#每日给自己一句话：在没有成功之前都是在做量的积累；&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：在没有成功之前都是在做量的积累；&quot;&gt;&lt;/a&gt;每日给自己一句话：在没有成功之前都是在做量的积累；&lt;/h3&gt;&lt;h2 id=&quot;专家&quot;&gt;&lt;a href=&quot;#专家&quot; class=&quot;headerlink&quot; title=&quot;专家&quot;&gt;&lt;/a&gt;专家&lt;/h2&gt;&lt;h3 id=&quot;职称：&quot;&gt;&lt;a href=&quot;#职称：&quot; class=&quot;headerlink&quot; title=&quot;职称：&quot;&gt;&lt;/a&gt;职称：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;高级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作在大的网络公司、或研究所&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要是技术主管、项目经理、技术专家&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1、技术专家&quot;&gt;&lt;a href=&quot;#1、技术专家&quot; class=&quot;headerlink&quot; title=&quot;1、技术专家&quot;&gt;&lt;/a&gt;1、技术专家&lt;/h4&gt;&lt;h5 id=&quot;工作描述：&quot;&gt;&lt;a href=&quot;#工作描述：&quot; class=&quot;headerlink&quot; title=&quot;工作描述：&quot;&gt;&lt;/a&gt;工作描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;某一行业的专家、顾问、权威；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果的确非常喜爱技术工作，而不擅长和喜欢与人沟通，则可以完全专注于自身的领域，以发展成为行业资深专家为方向和目标&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络管理员认识论</title>
    <link href="williamliuwen.cn/2016/05/27/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98%E8%AE%A4%E8%AF%86%E8%AE%BA/"/>
    <id>williamliuwen.cn/2016/05/27/网络管理员认识论/</id>
    <published>2016-05-27T15:52:15.000Z</published>
    <updated>2016-05-27T15:55:38.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&quot;&gt;&lt;a href=&quot;#每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&quot;&gt;&lt;/a&gt;每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&lt;/h4&gt;&lt;p&gt;网络工程师里面的最低级别：&lt;/p&gt;
&lt;h4 id=&quot;网络管理员&quot;&gt;&lt;a href=&quot;#网络管理员&quot; class=&quot;headerlink&quot; title=&quot;网络管理员&quot;&gt;&lt;/a&gt;网络管理员&lt;/h4&gt;&lt;h4 id=&quot;职称：&quot;&gt;&lt;a href=&quot;#职称：&quot; class=&quot;headerlink&quot; title=&quot;职称：&quot;&gt;&lt;/a&gt;职称：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作在中小企业，涵盖网络基础设施管理、网络操作系统管理、网络应用系统管理、网络用户管理、网络安全保密管理、信息存储备份管理和网络机房管理等几大方向。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些管理涉及到多个领域，每个领域的管理又有各自特定的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;主要岗位：&quot;&gt;&lt;a href=&quot;#主要岗位：&quot; class=&quot;headerlink&quot; title=&quot;主要岗位：&quot;&gt;&lt;/a&gt;主要岗位：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;网络管理员（系统管理员）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;工作职责描述：&quot;&gt;&lt;a href=&quot;#工作职责描述：&quot; class=&quot;headerlink&quot; title=&quot;工作职责描述：&quot;&gt;&lt;/a&gt;工作职责描述：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;网络本身的管理；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络中操作/应用系统的管理(在大型企业、外资、合资企业中通常称之为“MIS（Manger Information System，信息系统管理员）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;两者的区别主要是：网络管理员重在OSI下3层，系统管理员则主要在系统维护和公司信息系统管理上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;就业前景：&quot;&gt;&lt;a href=&quot;#就业前景：&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;是一个专业网络人员必经的初始阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;待遇：&quot;&gt;&lt;a href=&quot;#待遇：&quot; class=&quot;headerlink&quot; title=&quot;待遇：&quot;&gt;&lt;/a&gt;待遇：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1800元——3000元（视专业的掌握程度以及技术的熟练度而定）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0527.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;天作孽，犹可违；自作孽，不可逭。 —— 《尚书·太甲中》&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&quot;&gt;&lt;a href=&quot;#每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&quot;&gt;&lt;/a&gt;每日给自己一句话：现在你的生活取决于你3年前的选择；现在你的生活决定你未来3年的品质。&lt;/h4&gt;&lt;p&gt;网络工程师里面的最低级别：&lt;/p&gt;
&lt;h4 id=&quot;网络管理员&quot;&gt;&lt;a href=&quot;#网络管理员&quot; class=&quot;headerlink&quot; title=&quot;网络管理员&quot;&gt;&lt;/a&gt;网络管理员&lt;/h4&gt;&lt;h4 id=&quot;职称：&quot;&gt;&lt;a href=&quot;#职称：&quot; class=&quot;headerlink&quot; title=&quot;职称：&quot;&gt;&lt;/a&gt;职称：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作在中小企业，涵盖网络基础设施管理、网络操作系统管理、网络应用系统管理、网络用户管理、网络安全保密管理、信息存储备份管理和网络机房管理等几大方向。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些管理涉及到多个领域，每个领域的管理又有各自特定的任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络工程师认识论</title>
    <link href="williamliuwen.cn/2016/05/26/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%AE%A4%E8%AF%86%E8%AE%BA/"/>
    <id>williamliuwen.cn/2016/05/26/网络工程师认识论/</id>
    <published>2016-05-26T15:10:12.000Z</published>
    <updated>2016-05-26T15:16:06.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;每日给自己一句话：不要随大流，要有自己的绝活；&quot;&gt;&lt;a href=&quot;#每日给自己一句话：不要随大流，要有自己的绝活；&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：不要随大流，要有自己的绝活；&quot;&gt;&lt;/a&gt;每日给自己一句话：不要随大流，要有自己的绝活；&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;比网络管理员高一级别，打怪应该需要打一年才能升到，而且还要自己平时努力，不然管理员还是管理员；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;工程师&quot;&gt;&lt;a href=&quot;#工程师&quot; class=&quot;headerlink&quot; title=&quot;工程师&quot;&gt;&lt;/a&gt;工程师&lt;/h3&gt;&lt;h4 id=&quot;职称：&quot;&gt;&lt;a href=&quot;#职称：&quot; class=&quot;headerlink&quot; title=&quot;职称：&quot;&gt;&lt;/a&gt;职称：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;中级&lt;/li&gt;
&lt;li&gt;工作在网络公司或者大中型企业。在网络公司中主要任务是设计并建设；在大中型企业中的主要任务是运营和维护。&lt;/li&gt;
&lt;li&gt;网络工程师其实是一个包括许多种工种的职业，不同的网络工程师工种对从业的人员的要求也不一样，对从业人员的网络管理水平的要求差别很大。专业网络工程师主要有：网络系统设计师、网络工程师、系统工程师、网络安全工程师、数据存储工程师等。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;1、普通网络工程师&quot;&gt;&lt;a href=&quot;#1、普通网络工程师&quot; class=&quot;headerlink&quot; title=&quot;1、普通网络工程师&quot;&gt;&lt;/a&gt;1、普通网络工程师&lt;/h4&gt;&lt;h5 id=&quot;工作职责描述：&quot;&gt;&lt;a href=&quot;#工作职责描述：&quot; class=&quot;headerlink&quot; title=&quot;工作职责描述：&quot;&gt;&lt;/a&gt;工作职责描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;高级网络管理员，在大企业中或是在网络公司工作&lt;/li&gt;
&lt;li&gt;维护公司网络设备，保证公司骨干网络正常工作&lt;/li&gt;
&lt;li&gt;对主流的网络设备非常了解&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;职位要求：&quot;&gt;&lt;a href=&quot;#职位要求：&quot; class=&quot;headerlink&quot; title=&quot;职位要求：&quot;&gt;&lt;/a&gt;职位要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;扎实而又全面的网络知识功底&lt;/li&gt;
&lt;li&gt;多年专业网络管理经验&lt;/li&gt;
&lt;li&gt;对产品性能和最新技术掌握很好&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：国内网络公司的技术人员或专业的IDC中心、大的ISP服务商&quot;&gt;&lt;a href=&quot;#就业前景：国内网络公司的技术人员或专业的IDC中心、大的ISP服务商&quot; class=&quot;headerlink&quot; title=&quot;就业前景：国内网络公司的技术人员或专业的IDC中心、大的ISP服务商&quot;&gt;&lt;/a&gt;就业前景：国内网络公司的技术人员或专业的IDC中心、大的ISP服务商&lt;/h5&gt;&lt;h4 id=&quot;2、普通系统工程师&quot;&gt;&lt;a href=&quot;#2、普通系统工程师&quot; class=&quot;headerlink&quot; title=&quot;2、普通系统工程师&quot;&gt;&lt;/a&gt;2、普通系统工程师&lt;/h4&gt;&lt;h5 id=&quot;工作职责描述：-1&quot;&gt;&lt;a href=&quot;#工作职责描述：-1&quot; class=&quot;headerlink&quot; title=&quot;工作职责描述：&quot;&gt;&lt;/a&gt;工作职责描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;高级网络管理员&lt;/li&gt;
&lt;li&gt;在大企业中或是在网络公司工作&lt;/li&gt;
&lt;li&gt;维护并保证系统工作正常&lt;/li&gt;
&lt;li&gt;对流行的OS非常了解&lt;/li&gt;
&lt;li&gt;对系统故障的解决有丰富的经验&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;职位要求：-1&quot;&gt;&lt;a href=&quot;#职位要求：-1&quot; class=&quot;headerlink&quot; title=&quot;职位要求：&quot;&gt;&lt;/a&gt;职位要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;扎实而又全面的网络知识功底&lt;/li&gt;
&lt;li&gt;多年专业网络管理经验&lt;/li&gt;
&lt;li&gt;对新OS系统和最新技术掌握很好&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：&quot;&gt;&lt;a href=&quot;#就业前景：&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;国内网络公司的技术人员&lt;/li&gt;
&lt;li&gt;大公司的技术人员&lt;/li&gt;
&lt;li&gt;外包公司&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3、网络系统设计师&quot;&gt;&lt;a href=&quot;#3、网络系统设计师&quot; class=&quot;headerlink&quot; title=&quot;3、网络系统设计师&quot;&gt;&lt;/a&gt;3、网络系统设计师&lt;/h4&gt;&lt;h5 id=&quot;工作职责描述：-2&quot;&gt;&lt;a href=&quot;#工作职责描述：-2&quot; class=&quot;headerlink&quot; title=&quot;工作职责描述：&quot;&gt;&lt;/a&gt;工作职责描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;公司需要建设网络，主要根据要求进行设计，客户能满意&lt;/li&gt;
&lt;li&gt;设计项目达到全面、高的实用性和可用性&lt;/li&gt;
&lt;li&gt;网络系统设计师是一个综合性的工种&lt;/li&gt;
&lt;li&gt;网络和系统方面都有很好的经验&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;职位要求：-2&quot;&gt;&lt;a href=&quot;#职位要求：-2&quot; class=&quot;headerlink&quot; title=&quot;职位要求：&quot;&gt;&lt;/a&gt;职位要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;扎实而又全面的网络知识功底&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多年专业网络管理、设计经验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对网络核心技术掌握很好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：-1&quot;&gt;&lt;a href=&quot;#就业前景：-1&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;国内真正的设计师凤毛麟角 工资过万&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4、网络存储工程师&quot;&gt;&lt;a href=&quot;#4、网络存储工程师&quot; class=&quot;headerlink&quot; title=&quot;4、网络存储工程师&quot;&gt;&lt;/a&gt;4、网络存储工程师&lt;/h4&gt;&lt;h5 id=&quot;工作职责描述：-3&quot;&gt;&lt;a href=&quot;#工作职责描述：-3&quot; class=&quot;headerlink&quot; title=&quot;工作职责描述：&quot;&gt;&lt;/a&gt;工作职责描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;主要工作在一些大的数据需要量大的公司如银行、电视台、IDC中心&lt;/li&gt;
&lt;li&gt;有效管理公司海量数据，有存储设备测试、评估环境、系统咨询、实施指导、测试、培训、相关解决方案&lt;/li&gt;
&lt;li&gt;灾难恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;职位要求：-3&quot;&gt;&lt;a href=&quot;#职位要求：-3&quot; class=&quot;headerlink&quot; title=&quot;职位要求：&quot;&gt;&lt;/a&gt;职位要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;有多年的网络管理经验&lt;/li&gt;
&lt;li&gt;熟悉一些常用数据库软件&lt;/li&gt;
&lt;li&gt;有网络存储理论知识，包括存储基础、技术及网络存储高级技术&lt;/li&gt;
&lt;li&gt;熟悉主流存储、备份厂商的产品线；如IBM/HP/SUN&lt;/li&gt;
&lt;li&gt;熟练掌握veritas、legato、tsm、dp等备份软件工具使用&lt;/li&gt;
&lt;li&gt;具有良好的撰写需求分析、解决方案、PPT、系统软硬件配置等方案的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：-2&quot;&gt;&lt;a href=&quot;#就业前景：-2&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;国内每年所需的网络存储人才在60万以上，而目前国内每年最多仅能提供1万左右，缺口极大。随着网络经济的日益普及，此类人才在未来几年中的需求将持续攀升，专业的硬件服务器和网络存储人才的工资标准可能还要远高于软、硬件开发人员。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;5、网络安全工程师&quot;&gt;&lt;a href=&quot;#5、网络安全工程师&quot; class=&quot;headerlink&quot; title=&quot;5、网络安全工程师&quot;&gt;&lt;/a&gt;5、网络安全工程师&lt;/h4&gt;&lt;h5 id=&quot;工作职责描述：-4&quot;&gt;&lt;a href=&quot;#工作职责描述：-4&quot; class=&quot;headerlink&quot; title=&quot;工作职责描述：&quot;&gt;&lt;/a&gt;工作职责描述：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;主要保护网络安全&lt;/li&gt;
&lt;li&gt;保护网站、邮件等服务器安全&lt;/li&gt;
&lt;li&gt;合理布置网络结构和网络产品&lt;/li&gt;
&lt;li&gt;对企业能进行安全评估和防护&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;工作要求：&quot;&gt;&lt;a href=&quot;#工作要求：&quot; class=&quot;headerlink&quot; title=&quot;工作要求：&quot;&gt;&lt;/a&gt;工作要求：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;有多年的网络管理经验&lt;/li&gt;
&lt;li&gt;熟悉多种网络安全技术，对各种主流的安全产品（如防火墙、防病毒、入侵检测等）有较好的理论基础和实践经验，了解各种安全产品（例如FireWall、VPN、防病毒产品、IPS等）的特点、使用方法及常用的调试技巧；&lt;/li&gt;
&lt;li&gt;精通Windows、Linux等系统环境，能进行维护管理和故障分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;就业前景：-3&quot;&gt;&lt;a href=&quot;#就业前景：-3&quot; class=&quot;headerlink&quot; title=&quot;就业前景：&quot;&gt;&lt;/a&gt;就业前景：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;当前最急缺的人才，工资增长幅度大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0526.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;凡是合理的都是存在的，凡是存在的都是合理的。 —— 黑格尔    &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;每日给自己一句话：不要随大流，要有自己的绝活；&quot;&gt;&lt;a href=&quot;#每日给自己一句话：不要随大流，要有自己的绝活；&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：不要随大流，要有自己的绝活；&quot;&gt;&lt;/a&gt;每日给自己一句话：不要随大流，要有自己的绝活；&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;比网络管理员高一级别，打怪应该需要打一年才能升到，而且还要自己平时努力，不然管理员还是管理员；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;工程师&quot;&gt;&lt;a href=&quot;#工程师&quot; class=&quot;headerlink&quot; title=&quot;工程师&quot;&gt;&lt;/a&gt;工程师&lt;/h3&gt;&lt;h4 id=&quot;职称：&quot;&gt;&lt;a href=&quot;#职称：&quot; class=&quot;headerlink&quot; title=&quot;职称：&quot;&gt;&lt;/a&gt;职称：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;中级&lt;/li&gt;
&lt;li&gt;工作在网络公司或者大中型企业。在网络公司中主要任务是设计并建设；在大中型企业中的主要任务是运营和维护。&lt;/li&gt;
&lt;li&gt;网络工程师其实是一个包括许多种工种的职业，不同的网络工程师工种对从业的人员的要求也不一样，对从业人员的网络管理水平的要求差别很大。专业网络工程师主要有：网络系统设计师、网络工程师、系统工程师、网络安全工程师、数据存储工程师等。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解读网络工程师职业</title>
    <link href="williamliuwen.cn/2016/05/25/%E8%A7%A3%E8%AF%BB%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%81%8C%E4%B8%9A/"/>
    <id>williamliuwen.cn/2016/05/25/解读网络工程师职业/</id>
    <published>2016-05-25T14:34:36.000Z</published>
    <updated>2016-05-25T14:36:58.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;每日给自己一句话：很多事情往往不是有兴趣才能做好，而是做好了才有兴趣。&quot;&gt;&lt;a href=&quot;#每日给自己一句话：很多事情往往不是有兴趣才能做好，而是做好了才有兴趣。&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：很多事情往往不是有兴趣才能做好，而是做好了才有兴趣。&quot;&gt;&lt;/a&gt;每日给自己一句话：很多事情往往不是有兴趣才能做好，而是做好了才有兴趣。&lt;/h4&gt;&lt;h4 id=&quot;一、网络工程师的职业优势&quot;&gt;&lt;a href=&quot;#一、网络工程师的职业优势&quot; class=&quot;headerlink&quot; title=&quot;一、网络工程师的职业优势&quot;&gt;&lt;/a&gt;一、网络工程师的职业优势&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、最具增值潜力的职业，掌握企业核心网络架构、安全技术，具有不可替代的竞争优势&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、新型网络人才缺口大，27%的行业增长速度导致网络人才年缺口达30万，高薪高福利成为必然&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、可实现专业零基础入行，4-10个月的强化训练和职业化引导，就可成为企业急需的技能型网络人才&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;4、就业面广，一专多能，实践经验适用于各个领域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5、增值潜力大，职业价值随着自身经验的丰富以及项目运作的成熟，升值空间一路看涨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;6、职业发展前景广阔，网络工程师到项目经理仅一步之遥，从容晋升Manager&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;二、网络工程师解读&quot;&gt;&lt;a href=&quot;#二、网络工程师解读&quot; class=&quot;headerlink&quot; title=&quot;二、网络工程师解读&quot;&gt;&lt;/a&gt;二、网络工程师解读&lt;/h4&gt;&lt;p&gt;何谓网络工程师，网络工程师是通过学习和训练，掌握网络技术的理论知识和操作技能的网络技术人员。网络工程师能够从事计算机信息系统的设计、建设、运行和维护工作。&lt;/p&gt;
&lt;p&gt;具体来说，我们可以从企业信息化的岗位体系中作一些了解。企业（或政府）信息化过程中需要以下四种人：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、企业信息化主管：负责信息化建设中的目标与方案决策，信息化建设中的方向研究；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、工程技术人员：负责信息化系统的设计、建设，包括设备、系统、数据库、应用系统的建设；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、运行维护人员：负责信息化系统的运行、维护、管理以及基本的开发；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4、操作应用人员：主要应用信息化系统进行本职工作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，IT企业的IT技术职位根据职能可以分为管理岗位：企业信息主管CIO、总监、IT经理、项目经理等；工程技术岗位：规划设计师、网络工程师、系统工程师、软件工程师和数据库工程师等；运行维护岗位：数据库管理员、系统管理员、网络管理员、服务器管理员等；操作岗位：办公文员、CAD设计员、网页制作员、多媒体制作员等。&lt;/p&gt;
&lt;p&gt;根据企业规模大小，规模较小的企业，一个岗位可能涵盖几个岗位的内容，系统管理员既要负责系统管理，又要承担网络管理；大企业则会分的比较专业，有网络设计师、系统集成工程师、网络安装工程师、综合布线工程师和系统测试工程师等。&lt;/p&gt;
&lt;h4 id=&quot;网络工程师职业规划过程主要有以下几步：&quot;&gt;&lt;a href=&quot;#网络工程师职业规划过程主要有以下几步：&quot; class=&quot;headerlink&quot; title=&quot;网络工程师职业规划过程主要有以下几步：&quot;&gt;&lt;/a&gt;网络工程师职业规划过程主要有以下几步：&lt;/h4&gt;&lt;p&gt;两年以上的小型企业→四年左右的中型企业→大型企业或跨国集团公司&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一步，小企业的网络管理员（系统管理员）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二步，进入大中型企业，同样的网络管理工作，工资就可能完全不同了，一般都在3000元以上。做了部门经理时，还可以高达5000元或以上；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三步，学习更全面的知识成为普通的网络工程师工资就高达3500元以上；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第四步，学习更全面的知识成为专业的网络工程师，如网络存储工程师、网络安全工程师的工资就可以达8000元以上，做大型企业或专业网络公司IT经理的工资就更高了，基本在万元以上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0525.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真正的大不敬是不尊重别人的神。 —— 马克·吐温&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;每日给自己一句话：很多事情往往不是有兴趣才能做好，而是做好了才有兴趣。&quot;&gt;&lt;a href=&quot;#每日给自己一句话：很多事情往往不是有兴趣才能做好，而是做好了才有兴趣。&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：很多事情往往不是有兴趣才能做好，而是做好了才有兴趣。&quot;&gt;&lt;/a&gt;每日给自己一句话：很多事情往往不是有兴趣才能做好，而是做好了才有兴趣。&lt;/h4&gt;&lt;h4 id=&quot;一、网络工程师的职业优势&quot;&gt;&lt;a href=&quot;#一、网络工程师的职业优势&quot; class=&quot;headerlink&quot; title=&quot;一、网络工程师的职业优势&quot;&gt;&lt;/a&gt;一、网络工程师的职业优势&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、最具增值潜力的职业，掌握企业核心网络架构、安全技术，具有不可替代的竞争优势&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、新型网络人才缺口大，27%的行业增长速度导致网络人才年缺口达30万，高薪高福利成为必然&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、可实现专业零基础入行，4-10个月的强化训练和职业化引导，就可成为企业急需的技能型网络人才&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>给网络工程师的建议</title>
    <link href="williamliuwen.cn/2016/05/24/%E7%BB%99%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%BB%BA%E8%AE%AE/"/>
    <id>williamliuwen.cn/2016/05/24/给网络工程师的建议/</id>
    <published>2016-05-24T14:35:18.000Z</published>
    <updated>2016-05-24T14:44:54.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;每日给自己一句话：明确自己想要的生活，明确经理职位要求；&quot;&gt;&lt;a href=&quot;#每日给自己一句话：明确自己想要的生活，明确经理职位要求；&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：明确自己想要的生活，明确经理职位要求；&quot;&gt;&lt;/a&gt;每日给自己一句话：明确自己想要的生活，明确经理职位要求；&lt;/h4&gt;&lt;h4 id=&quot;应聘网络工程师要注意的地方：&quot;&gt;&lt;a href=&quot;#应聘网络工程师要注意的地方：&quot; class=&quot;headerlink&quot; title=&quot;应聘网络工程师要注意的地方：&quot;&gt;&lt;/a&gt;应聘网络工程师要注意的地方：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;首先是简历这里，我比较关注的是职业经历和工作成果，还有就是技术专业方向等，对于职业经历，关注的重点是曾服务企业的规模以及所具体负责的业务范围，特别在具体工作中所处的位置是主导还是参与很重要。而技术方向而言，应当体现对自己职业生涯规划的一个思想，把自己在IT领域的学习和发展方向表述清晰。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;通过大部分简历的筛选来看，大部分简历内容比较泛泛，简历描述各种技术都会，实际面试的交流却反应出只是了解皮毛而已。我挑选的简历基本都是三年以上的工作经验，但是通过面试，感觉到大部分工程师还是处于办公电脑基础维护这样的水平，对于三层交换、路由、防火墙、数据库、分布式网络规划管理等方面缺乏一定的深入，我想建议具有一定经验的网络工程师来说，经过3年的积累，应该为自己的技术发展做个规划。个人比较喜欢接受过职业培训的员工，他们的动手实践能力一般都比较强，因为职业培训不同于大学教育，是很注重学员的实践能力的。山东海天软件培训基地创始人邹晓东就说过，实践能力是他们教学的宗旨。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;谈谈面试，求职者的外在形象和沟通能力很重要。形象要体现出职业化，比如衣着搭配、头发、胡子（男同胞）等等，昨天面试看到有的头发乱乱的像几天没洗了，有的迎面坐下就传来很浓的汗味儿，这样的给人第一印象就不是很好。再说说沟通这里，我的面试风格比较随意，不需要做那些什么TCP协议之类的笔试题，就是面谈，谈自己的工作经历，我问的比较细，关注技术要点，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;到底什么水平通过这样的交流很容易体现出来，而交流过程会观察个人的表达能力和性格特点，比如有的人说话过程中声音发颤，有的人特别喜欢狡辩，有的人特别被动等。还有面试的其它一些细节，作为应聘者也要注意，因为面试你的人时刻在观察着你。比如有的人一进来公司，便对前台小姐大声说你们公司挺难找的啊，有的人在等待时歪坐着翘着二郎腿东张西望，这些细节都反应出一个人的职业素养。我建议学习IT技术的同时，要培养自己的职业素养和管理能力，以更高的职业水平来要求自己。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后说一下职业规划，虽然作为网络工程师是技术主导，但是要有管理的思想和理念，其实每个人都是管理者，因为首先你已经有了很好的管理对象，就是你自己。对于IT技术，要有全面了解的意识，了解整个IT领域的新知识和新概念，但是更为重要的是自己要选择一个深入发展的方向，成为一个专业的专家，就是说要注重自己在IT领域横向和纵向的双向发展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/pic/0524.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;竭力为善，爱自由甚于一切，即使为了王座，也永勿欺妄真理。 —— 贝多芬    &lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;每日给自己一句话：明确自己想要的生活，明确经理职位要求；&quot;&gt;&lt;a href=&quot;#每日给自己一句话：明确自己想要的生活，明确经理职位要求；&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：明确自己想要的生活，明确经理职位要求；&quot;&gt;&lt;/a&gt;每日给自己一句话：明确自己想要的生活，明确经理职位要求；&lt;/h4&gt;&lt;h4 id=&quot;应聘网络工程师要注意的地方：&quot;&gt;&lt;a href=&quot;#应聘网络工程师要注意的地方：&quot; class=&quot;headerlink&quot; title=&quot;应聘网络工程师要注意的地方：&quot;&gt;&lt;/a&gt;应聘网络工程师要注意的地方：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;首先是简历这里，我比较关注的是职业经历和工作成果，还有就是技术专业方向等，对于职业经历，关注的重点是曾服务企业的规模以及所具体负责的业务范围，特别在具体工作中所处的位置是主导还是参与很重要。而技术方向而言，应当体现对自己职业生涯规划的一个思想，把自己在IT领域的学习和发展方向表述清晰。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的番茄炒蛋</title>
    <link href="williamliuwen.cn/2016/05/23/%E6%88%91%E7%9A%84%E7%95%AA%E8%8C%84%E7%82%92%E8%9B%8B/"/>
    <id>williamliuwen.cn/2016/05/23/我的番茄炒蛋/</id>
    <published>2016-05-23T11:53:26.000Z</published>
    <updated>2016-05-23T12:14:42.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;每日给自己一句话：背人说话没好事儿&quot;&gt;&lt;a href=&quot;#每日给自己一句话：背人说话没好事儿&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：背人说话没好事儿&quot;&gt;&lt;/a&gt;每日给自己一句话：背人说话没好事儿&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一生大概有80年，一年大概有12个月，大概有365天，每天有24个小时，除了8小时的睡觉时间，16个小时都在工作，学习，生活，旅游，发呆。&lt;/p&gt;
&lt;p&gt;你的一生是否幸福快乐自由享受，就在乎这80年里面，你是否过得幸福快乐自由享受；也在乎每天年中365天里面你是否过得幸福快乐自由享受；也在乎你每天16个小时里面，你是否过得幸福快乐自由享受。&lt;/p&gt;
&lt;p&gt;珍惜你一天里面的16个小时，不要浪费，不给花在无关的事，无关的人上面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;工作日&quot;&gt;&lt;a href=&quot;#工作日&quot; class=&quot;headerlink&quot; title=&quot;工作日&quot;&gt;&lt;/a&gt;工作日&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我的工作日：一天里面大概有10个番茄时间花在学习上，就是花了5个小时了，还剩下11个小时，一个小时2个番茄时间，就是说还有22个番茄时间，我都用在了哪里呢：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;番茄时间完成的原则：具体时间根据具体情况而定，只要能完成总的番茄时间。对于番茄时间被打断是否承认为番茄时间问题上，还在考虑中。&lt;/li&gt;
&lt;li&gt;下面的计划只是用一个月以内，根据以后具体的角色改变而改变。&lt;/li&gt;
&lt;li&gt;我的工作：睡觉时间标准比例是：晚上10点–白天6点&lt;/li&gt;
&lt;li&gt;我的工作：工作学习生活旅游时间是：白天6点–晚上10点，划分的细致一点是：&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;我的工作：一天下来总共需要完成14个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;早上&quot;&gt;&lt;a href=&quot;#早上&quot; class=&quot;headerlink&quot; title=&quot;早上&quot;&gt;&lt;/a&gt;早上&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;6点-1点，7个小时，&lt;/li&gt;
&lt;li&gt;在家里待的时间是2个小时（可以利用2个番茄时间，1小时）1/2=50%；&lt;/li&gt;
&lt;li&gt;在公司待的时间8点–1点，就是5小时（可以利用4个番茄时间，2小时），2/5=40%。可以扩充多1个番茄时间：2.5/5=50%  下午1点-6点，5个小时（可以利用4个番茄时间，2小时），2/5=40%。可以扩充多1个番茄时间：2.5/5=50%  &lt;/li&gt;
&lt;li&gt;晚上6点-10,4个小时，6点-8点吃饭休息洗澡时间，8点-10点（有2个番茄时间可以利用）剩下1个小时什么都不做。&lt;/li&gt;
&lt;li&gt;剩下的一个小时，可以陪伴家人，可以跟宝宝聊天早上：家里2个番茄时间；公司5个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;下午：&quot;&gt;&lt;a href=&quot;#下午：&quot; class=&quot;headerlink&quot; title=&quot;下午：&quot;&gt;&lt;/a&gt;下午：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;公司5个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;完成：&quot;&gt;&lt;a href=&quot;#完成：&quot; class=&quot;headerlink&quot; title=&quot;完成：&quot;&gt;&lt;/a&gt;完成：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;家里2个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;周末&quot;&gt;&lt;a href=&quot;#周末&quot; class=&quot;headerlink&quot; title=&quot;周末&quot;&gt;&lt;/a&gt;周末&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我的周末：睡觉时间标准比例是：晚上10点–白天8点，周六除外，周六需要10点起床；我的周末：基于周末可能有时候会有事情办，对于没有时间安排的番茄时间，可以具体说明时间都去哪里了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;我的周六：总共需要完成12个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;早上10点-1点，3个小时，吃饭时间12点-1点包括休息，完全可以利用时间10-12点，2个小时，4个饭番茄时间  下午1点-6点，5个小时，吃饭时间5点-6点，完全可以利用时间1点-5点，4个小时，8个番茄时间  晚上6点-10,6点-8点，陪伴家人时间，休息，8点-10点，自己休息时间，自由发挥。早上：4个番茄时间;下午：8个番茄时间;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我的周日：总共需要完成16个番茄时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;早上8点-1点，5个小时，吃饭时间12点-1点包括休息，完全可以利用时间8点-12点，4个小时，8个饭番茄时间  下午1点-6点，5个小时，吃饭时间5点-6点，完全可以利用时间1点-5点，4个小时，8个番茄时间  晚上6点-10,6点-8点，陪伴家人时间，休息，8点-10点，自己休息时间，自由发挥。早上：8个番茄时间;下午：8个番茄时间;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;每日给自己一句话：背人说话没好事儿&quot;&gt;&lt;a href=&quot;#每日给自己一句话：背人说话没好事儿&quot; class=&quot;headerlink&quot; title=&quot;每日给自己一句话：背人说话没好事儿&quot;&gt;&lt;/a&gt;每日给自己一句话：背人说话没好事儿&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一生大概有80年，一年大概有12个月，大概有365天，每天有24个小时，除了8小时的睡觉时间，16个小时都在工作，学习，生活，旅游，发呆。&lt;/p&gt;
&lt;p&gt;你的一生是否幸福快乐自由享受，就在乎这80年里面，你是否过得幸福快乐自由享受；也在乎每天年中365天里面你是否过得幸福快乐自由享受；也在乎你每天16个小时里面，你是否过得幸福快乐自由享受。&lt;/p&gt;
&lt;p&gt;珍惜你一天里面的16个小时，不要浪费，不给花在无关的事，无关的人上面。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
